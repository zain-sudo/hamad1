{"version":3,"sources":["constants/constants.ts","components/error-page.tsx","api/axios-decorator.ts","api/culture-metadata-api.ts","helpers/cache-helper.ts","i18n.ts","models/event-operation-type.ts","models/event-status.ts","helpers/api-helper.ts","models/event-audience.ts","models/event-type.ts","api/common-api.ts","api/user-group-api.ts","api/user-events-api.ts","models/language-direction.ts","api/create-event-api.ts","helpers/event-helper.ts","providers/context-provider.tsx","components/common/event-artifacts/audience.tsx","models/event-search-type.ts","models/sort-by.ts","components/common/event-artifacts/teams-meeting.tsx","components/common/event-artifacts/live-event.tsx","components/common/event-artifacts/mandatory.tsx","components/common/event-image/event-image.tsx","components/event-operation-task-module/event-details.tsx","components/register-remove-event/register-remove-event.tsx","components/event-image/event-image.tsx","components/event-card/event-card.tsx","components/user-events-wrapper/user-events-wrapper.tsx","components/no-content-page/no-content-page.tsx","components/common/popup-menu/popup-menu-checkboxes-content.tsx","components/common/popup-menu/popup-menu-radiogroup-content.tsx","components/common/popup-menu/popup-menu-wrapper.tsx","constants/resources.ts","helpers/localized-constants.ts","models/activity-status.ts","components/filter-bar/filter-bar.tsx","components/tab-menu/tab-menu.tsx","components/toast-notification/toast-notification.tsx","api/LnD-team-api.ts","helpers/mobile-filter-helper.ts","components/discover-events/discover-events.tsx","components/my-events/my-events.tsx","components/common/accordion-menu/accordion-menu-checkboxes-content.tsx","components/common/accordion-menu/accordion-menu-radiogroup-content.tsx","components/common/accordion-menu/accordion-menu-wrapper.tsx","components/mobile-filter-bar/mobile-filter-bar.tsx","components/manage-events/manage-events-menu.tsx","api/manage-events-api.ts","components/manage-events/manage-events.tsx","helpers/dark-customizations.ts","helpers/date-picker-styles.ts","helpers/people-picker-styles.ts","helpers/default-customizations.ts","components/common/date-picker/datepicker.tsx","components/common/time-picker/timepicker.tsx","components/common/color-picker/color-picker.tsx","components/create-event/create-event-step1.tsx","components/common/user-search-dropdown/dropdown-search.tsx","components/create-event/create-event-step2.tsx","components/create-event/create-event-step3.tsx","components/common/event-details/event-details.tsx","components/create-event/create-event-wrapper.tsx","api/manage-categories-api.ts","components/manage-categories/list-categories.tsx","components/manage-categories/manage-categories-operation-footer.tsx","components/manage-categories/add-update-category.tsx","components/manage-categories/delete-category.tsx","components/manage-categories/manage-categories.tsx","components/manage-events/close-cancel-event.tsx","components/manage-events/delete-draft.tsx","components/signin/signin.tsx","api/authentication-metadata-api.ts","components/signin/signin-start.tsx","components/signin/signin-end.tsx","router/router.tsx","app.tsx","index.tsx"],"names":["CategoryOperations","ResponseStatus","ErrorPage","props","code","token","search","window","location","params","URLSearchParams","get","state","resourceStrings","a","message","this","errorMessage","unauthorizedAccess","className","Flex","gap","hAlign","vAlign","Item","style","position","Label","icon","ErrorIcon","grow","column","Text","weight","error","content","React","axiosJWTDecoratorInstance","authorizationHeaderKey","acceptLanguageHeaderKey","url","data","config","setupAuthorizationHeader","axios","post","Promise","resolve","handleError","delete","put","patch","needAuthorizationHeader","headers","hasOwnProperty","response","microsoftTeams","reject","authTokenRequest","successCallback","defaults","i18n","language","failureCallback","console","href","resources","getAuthToken","Constants","body","theme","default","light","dark","contrast","categoryNameMaxLength","categoryDescriptionMaxLength","lazyLoadEventsCount","maxWidthForMobileView","apiBaseURL","origin","getDefaultCultureAsync","getSupportedCulturesAsync","getDataFromCache","cacheName","supportedCultureCache","nextCleanup","Date","getTime","localStorage","getItem","JSON","parse","removeItem","e","setDataToCache","key","value","setItem","stringify","defaultLocale","context","supportedCulturesCache","defaultCultureCache","includes","locale","split","changeLanguage","then","result","supportedCultures","use","Backend","initReactI18next","init","lng","fallbackLng","keySeparator","interpolation","escapeValue","react","useSuspense","EventOperationType","EventStatus","EventAudience","EventType","getAPIRequestConfigParams","baseAxios","getEventAsync","eventId","teamId","searchUsersAndGroups","searchText","encodeURIComponent","getGroupMembers","groupId","getUserProfiles","userIds","baseURL","getEventsAsync","searchString","pageCount","eventSearchType","createdByFilter","categoryFilter","sortByFilter","sortBy","registerToEventAsync","removeEventAsync","LanguageDirection","uploadEventImage","formData","saveEventAsDraft","event","updateEventAsDraft","createNewEvent","updateEvent","getEventCategoriesAsync","validateSelectedUsers","selectedUsersAndGroups","users","mandatoryUsers","Array","optionalUsers","groups","filteredUsers","i","length","userOrGroup","isGroup","id","status","OK","members","map","member","isMandatory","push","Set","filteredOptionalUsers","j","find","mandatoryUserId","filteredOptionalUsersInGroup","k","filteredMandatoryUsersInGroup","l","optionalUser","m","mandatoryUser","createEvent","stepEventState","eventDetails","startDate","moment","startOf","add","startTime","getHours","getMinutes","utc","toDate","endDate","endTime","selectedUserOrGroupListJSON","selectedUserGroups","updateEventDetails","saveEventAsDraftAsync","isDraft","formatEventDayAndTimeToShort","eventDay","local","format","eventStartTime","eventEndTime","withContext","WrappedComponent","teamsContext","dir","Ltr","setState","Rtl","Component","EventSearchType","SortBy","withTranslation","localize","t","circular","title","audienceType","Private","Layout","start","main","size","isImageLoaded","setImageLoaded","isErrorLoadingImage","setImageError","onImageNotLoaded","src","imageSrc","onLoad","onError","onAbort","fill","align","color","getArtifacts","artifactElements","isMandatoryForLoggedInUser","type","Teams","LiveEvent","audience","Public","renderOperationButtonText","eventOperationType","CloseRegistration","CancelEvent","Register","Remove","isLoadingEventDetails","Provider","Loader","isFailedToGetEventDetails","Fabric","isMobileView","truncated","categoryName","space","renderHeader","photo","selectedColor","backgroundColor","name","marginTop","Icon","iconName","eventType","venue","InPerson","Divider","vertical","styles","height","marginRight","renderEventVenue","design","description","meetingLink","target","rel","renderAttendeeURL","undefined","maximumNumberOfParticipants","registeredAttendeesCount","eventCreatedByName","Avatar","renderEventCreatorInfo","None","isOperationFailed","Button","primary","loading","isOperationInProgress","disabled","onClick","onPerformOperation","renderFooter","renderEventDetails","RegisterRemoveEvent","getEventDetailsAsync","queryParam","Active","isLoggedInUserRegistered","isRegistrationClosed","canLoggedInUserRegister","isLoading","getUserProfileAsync","createdBy","isErrorGettingEventDetails","userId","user","userInfo","eventCreatedBy","displayName","onRegisterRemoveEvent","responseSuccess","responseStatusSuccess","responseDataSuccess","submitTask","isSuccess","isFailedToRegisterOrRemove","shrink","footerElements","UserEvents","Container","fluid","pageStart","initialLoad","loader","useWindow","loadMore","loadMoreEvents","hasMore","hasMoreEvents","events","index","Col","xl","lg","sm","md","Row","data-testid","renderEvents","NoContent","EyeIcon","useTranslation","checkboxes","filteredCheckboxes","setFilteredCheckboxes","searchedString","setSearchString","disableClear","setdisableClear","checkBoxClicked","setcheckBoxClicked","setFilterCheckboxes","onCheckboxValueChange","checked","checkCount","checkboxList","checkbox","isChecked","trim","filteredItems","filter","item","toLowerCase","onCheckboxStateChange","filterItems","itemsToRender","slice","showSearchBar","Input","SearchIcon","iconPosition","placeholder","onChange","text","onSearchChange","selectedCount","deSelectAll","toString","Checkbox","label","checkboxLabel","RadioGroup","defaultCheckedValue","selectedValue","items","radioGroupItems","onCheckedValueChange","onRadiogroupStateChange","isOpen","popup","onOpenChange","onPopupOpenChange","Popup","open","trigger","onFilterClick","ChevronDownIcon","trapFocus","radioGroup","selectedSortBy","Resources","eventNameMaxLength","eventDescriptionMaxLength","eventVenueMaxLength","userEventsMobileFilteredCategoriesLocalStorageKey","userEventsMobileFilteredUsersLocalStorageKey","userEventsMobileSortByFilterLocalStorageKey","validUrlRegExp","colorCells","Recent","Popularity","ActivityStatus","getLocalizedSortBy","FilterBar","isFilterStateChanged","resize","innerWidth","screenWidth","onCategoryStateChange","categoryValues","selectedCategories","categoryList","categorySelectedCount","onCreatedByStateChange","createdByValues","selectedUsers","createdByList","createdBySelectedCount","onSortByStateChange","onCloseIconClick","onFilterBarCloseClick","onFilterChange","isFilterItemOpen","categories","category","filteredCategories","initializeIcons","addEventListener","bind","removeEventListener","nextProps","isReset","categoryId","aadObjectId","isVisible","CloseIcon","TabMenu","Menu","tabItems","defaultActiveIndex","defaultTabIndex","activeIndex","activeTabIndex","onActiveIndexChange","tabEventDetails","onTabIndexChange","ToastNotification","onClose","isShowNotification","notification","Toast","Success","autohide","delay","show","Body","baseAxiosUrl","getAllLnDTeamMembersAsync","clearMobileFilterLocalStorage","DiscoverEvents","timeout","mandatoryEventsCount","allEventsCount","screenResize","loadEventCategories","categoriesInFilter","loadAllLnDTeamMembers","lnDTeamMembersInFilter","pageNumber","MandatoryEventsForUser","AllPublicPrivateEventsForUser","loadEvents","mandatoryEvents","updatedEventResponse","findIndex","concat","setTotalEventsCount","allEvents","eventSeatchType","count","onEventClick","tasks","startTask","width","eventAtIndex","eventToUpdate","prevState","clearTimeout","isLoadingEvents","isResetFilter","setTimeout","getEvents","onSearchEvents","keyCode","onSearchTextChange","onFilterBarToggle","isFilterOpen","onMobileFilterButtonClick","onFilterBarClose","join","onMobileSearchBoxClose","isMobileSearchBoxOpen","userEventsContainerKey","finally","formatEventsCount","renderTabMenuItems","renderFilterButtonIcon","renderDesktopView","MenuButton","inverted","input","minWidth","maxWidth","onKeyUp","renderMobileView","iconOnly","all","results","MyEvents","registeredEventsCount","completedEventsCount","RegisteredEventsForUser","CompletedEventsForUser","registeredEvents","completedEvents","updatedRegisteredEvents","reduce","accumulator","setOpen","onAccordionOpenChange","onFilterOpenChange","MobileFilterBar","sortByList","loadFilterItems","eventCategories","lndTeamMembers","indexOf","sortByValue","sortByItem","sharedBy","updatedList","tag","onCategoriesFilterOpenStateChange","isCategoriesFilterOpen","isCreatedByFilterOpen","isSortByFilterOpen","onCreatedByFilterOpenStateChange","onSortByFilterOpenStateChange","onClearFilter","onApplyFilter","selectedCategoryIds","selectedUserIds","getActiveEventsMenu","outline","onEditEvent","onExportDetails","onSendReminder","kind","onCancelEvent","getDraftEventsMenu","onDeleteDraftEvent","getCompletedEventsMenu","menu","Draft","unshift","onCloseRegistration","getMenuItems","closeEventRegistrationsAsync","cancelEventAsync","deleteDraftEventAsync","exportEventDetailsToCSV","sendReminder","ManageEvents","draftEventsCount","activeEventsCount","eventsScrollAreaRef","componentWillReceiveProps","ActiveEventsForTeam","activeEvents","DraftEventsForTeam","draftEvents","CompletedEventsForTeam","infiniteScrollKey","formatEventDateAndTime","eventDayMonthYear","onTabMenuIndexChange","isCreateEvent","Error","updatedActiveEvents","eventName","updatedDraftEvents","URL","createObjectURL","Blob","downloadLink","document","createElement","setAttribute","click","getTabMenuItems","onEventCreated","err","getContext","onManageCategoriesClick","onCreateEventsClick","getEventsTableHeader","getEventType","SplitButton","button","onMenuItemClick","isInitialLoadComplete","onScreenSizeChange","Cancelled","List","rows","eventVenue","eventDateAndTime","truncateContent","Table","header","DarkDefaultPalette","themeDarker","themeDark","themeDarkAlt","themePrimary","themeSecondary","themeTertiary","themeLight","themeLighter","themeLighterAlt","black","neutralDark","neutralPrimary","neutralPrimaryAlt","neutralSecondary","neutralSecondaryAlt","neutralTertiary","neutralTertiaryAlt","neutralQuaternary","neutralQuaternaryAlt","neutralLight","neutralLighter","neutralLighterAlt","white","redDark","DarkTheme","createTheme","palette","semanticColors","buttonText","buttonTextPressed","buttonTextHovered","disabledBackground","inputBackgroundChecked","menuBackground","menuItemBackgroundHovered","menuItemBackgroundPressed","menuDivider","menuIcon","menuHeader","menuItemText","menuItemTextHovered","isInverted","DarkCustomizations","settings","scopedSettings","Card","root","background","DatePicker","TextHoverStyle","callout","bodyBackground","selectors","display","listItemBackgroundChecked","disabledBodyText","DetailsList","headerWrapper","borderColor","ActionButton","rootDisabled","rootHovered","rootPressed","DetailsRow","Modal","Overlay","blackTranslucent40","VerticalDivider","divider","wrapper","Backgroundcolor","green","DocumentCard","border","borderRight","DocumentCardPreview","borderBottom","Panel","closeButton","PeoplePickerItem","selected","removeButton","subComponentStyles","persona","primaryText","PersonaCoin","initials","showUnknownPersonaCoin","Separator","SpinButton","inputTextSelected","addVariants","DefaultCustomizations","StartDate","datePickerTheme","bgcolor","useState","selectedDate","setDate","minDate","setMinDate","Customizer","showMonthPickerAsOverlay","isMonthPickerVisible","onSelectDate","date","startCycle","set","hour","minute","second","onDateSelect","disableSelectionForPastDate","TimePicker","hours","padStart","minutes","setText","setHour","setMinute","minHours","setMinHour","minMinutes","setMinMinute","hoursItems","minutesItems","useEffect","onHourChange","onAdd","onMinuteChange","popupContent","Dropdown","getA11ySelectionMessage","onPickerClose","parseInt","isDisabled","defaultProps","ColorPicker","selectedId","setSelectedId","divKey","setDivKey","selectedIdFound","x","SwatchColorPicker","columnCount","cellShape","onColorChanged","onColorChange","CreateEventStep1","inputReference","timeZone","update","checkIfSaveAsDraftAllowed","eventValidationStatus","isPhotoValid","isColorValid","isNameValid","isDescriptionValid","isEventTypeValid","isEventCategoryValid","isVenueValid","isMaxNoofPartipantsValid","isMeetingLinkValid","isMaxNoofParticipantsValid","isEventNameExisting","checkIfNextAllowed","isTimeValid","match","checkEventAlreadyStarted","isValidatingStep1","eventPageState","isEdit","nextBtnClick","modifiedState","selectedCategory","selectedEvent","selectedEventType","navigateToPage","setStartDate","setEndDate","getNameError","getMeetingLinkError","getDescriptionError","getVenueError","getEventTypeError","getEventCategoryError","getPhotoError","isPhotoDimentionsValid","getMaximumNoofParticipantsError","onEventNameChange","onEventDescriptionChange","eventDescription","onEventVenueChange","onLiveEventUrlChange","eventUrl","onMaxNoOfParticipantsChange","eventMaxNoofParticipants","onStartTimeChange","min","setHours","onEndTimeChange","handleUploadClick","current","inputKey","uploadImage","imageUploadLoader","handleChange","fileUploaded","files","isValid","img","Image","onload","FormData","append","checkEventName","eventTypes","tz","guess","projectStartDate","getDate","onEventTypeChange","categoriesList","ref","maxLength","TextArea","secondary","DropdownSearch","initialReults","searchResult","setSearchResult","setLoading","setKey","setselectedValue","searchUsingAPI","searchQuery","array","email","onTypeSelection","onItemSelect","loadingMessage","onSearchQueryChange","initiateSearch","noResultsMessage","noResultMessage","CreateEventStep2","selectedAudience","selectedAudienceType","backBtnClick","onToggleChange","memberIndex","deleteItem","splice","renderMembers","toggle","TrashCanIcon","QuestionCircleIcon","onAudienceTypeSelection","onUserOrGroupSelection","selectedItem","selectedUserOrGroup","existingUsers","onAudienceChange","onAutoRegisterToggleChange","isAutoRegister","onMandatoryAllClocked","selectedUserGroup","audienceTypes","InfoIcon","ArrowLeftIcon","ArrowRightIcon","CreateEventStep3","getRegisteredAttendeesCount","getEventDayAndTime","isDraftLoading","isCreateLoading","EventDetails","errorGettingEventDetails","createdByName","setCreatedByName","getUserProfile","CreateEventWrapper","getEventDetailsToUpdate","selectedUsersOrGroups","displayReadonly","getAllCategories","setEventStep","currentStep","currentEventStep","renderOperation","createdOn","graphEventId","numberOfOccurrences","mandatoryAttendees","optionalAttendees","registeredAttendees","autoRegisteredAttendees","getCategoriesAsync","createCategoryAsync","updateCategoryAsync","deleteCategoriesAsync","categoryIds","ListCategories","forEach","statusMessage","getLastCategoryUpdateDateAndTime","sort","category1","category2","updatedOn","toUTCString","searchCategories","searchedCategories","onActionPerformed","categoryOperation","Edit","Delete","categoryOperationData","isSelected","onCategoryCheckedChange","manageControlsEnabilityAndSelection","onSelectAllCategoriesCheckedChange","isAllCategoriesSelected","onSearchTextChanged","renderCategoryOperationStatusIcon","showStatusIcon","PresenceAvailableIcon","timestamp","renderCategories","categoriesTableHeaderItems","searchedText","renderSearchInput","isEditEnabled","isDeleteEnabled","selectedCategoriesCount","AddIcon","Add","EditIcon","ManageCategoriesOperationFooter","backButtonContent","onBackClicked","renderError","submitButtonContent","isSubmitButtonDisabled","onSubmit","AddUpdateCategory","categoryDetails","createOrUpdateCategoryAsync","isCreatingOrUpdating","checkCategoryExists","isCategoryAlreadyExists","onCategoryAddedOrUpdated","some","onNameChanged","onDescriptionChanged","renderCategoryNameError","isInUse","required","DeleteCategory","deleteCategoryAsync","isDeleting","categoryIdsToDelete","onCategoryDeleted","paddingLeft","ManageCategories","setCategoryOperation","operationStatusMessage","Unknown","operationData","operation","onOperationSuccessful","onCategoryActionPerformed","CloseCancelEvent","operationType","onCloseOrCancelEvent","isFailedToCloseOrCancelEvent","DeleteDraftEvent","isUpdatingStatus","setUpdatingEventStatus","errorUpdatingEventStatus","setUpdateStatusError","deleteDraftEvent","marginLeft","margintop","bottom","SignInPage","authenticate","log","reason","getAuthenticationConsentMetadata","windowLocationOriginDomain","login_hint","loginhint","SignInSimpleStart","replace","upn","assign","SignInSimpleEnd","hashParams","hash","substr","s","v","decodeURIComponent","getHashParameters","notifyFailure","notifySuccess","AppRoute","fallback","exact","path","component","CloseOrCancelEvent","MobileFilter","App","setThemeComponent","getAppDOM","themes","teamsDark","teamsHighContrast","teams","forceUpdate","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.0a27cf3f.chunk.js","sourcesContent":["/*\r\n    <copyright file=\"constants.ts\" company=\"Microsoft\">\r\n    Copyright (c) Microsoft. All rights reserved.\r\n    </copyright>\r\n*/\r\n\r\nexport default class Constants {\r\n\t//Themes\r\n\tpublic static readonly body: string = \"body\";\r\n\tpublic static readonly theme: string = \"theme\";\r\n\tpublic static readonly default: string = \"default\";\r\n\tpublic static readonly light: string = \"light\";\r\n\tpublic static readonly dark: string = \"dark\";\r\n\tpublic static readonly contrast: string = \"contrast\";\r\n\r\n\t//Constants for manage categories\r\n\tpublic static readonly categoryNameMaxLength: number = 100;\r\n\tpublic static readonly categoryDescriptionMaxLength: number = 300;\r\n\r\n\tpublic static readonly lazyLoadEventsCount: number = 50;\r\n\r\n\tpublic static readonly maxWidthForMobileView: number = 750;\r\n\r\n\t/** The base URL for API */\r\n\tpublic static readonly apiBaseURL = window.location.origin + \"/api\";\r\n}\r\n\r\n/** Indicates the operations that can be done on event categories */\r\nexport enum CategoryOperations {\r\n\tAdd,\r\n\tEdit,\r\n\tDelete,\r\n\tUnknown\r\n}\r\n\r\n/** Indicates the response status codes */\r\nexport enum ResponseStatus {\r\n\tOK = 200\r\n}","/*\r\n    <copyright file=\"error-page.tsx\" company=\"Microsoft\">\r\n    Copyright (c) Microsoft. All rights reserved.\r\n    </copyright>\r\n*/\r\n\r\nimport * as React from \"react\";\r\nimport { Text, Flex, Label } from \"@fluentui/react-northstar\";\r\nimport { ErrorIcon } from '@fluentui/react-icons-northstar';\r\n\r\ninterface errorPageState {\r\n    resourceStrings: any | \"\",\r\n}\r\n\r\nexport default class ErrorPage extends React.Component<{}, errorPageState> {\r\n    code: string | null = null;\r\n    token: string | null = null;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        let search = window.location.search;\r\n        let params = new URLSearchParams(search);\r\n        this.token = params.get(\"token\");\r\n        this.code = params.get(\"code\");\r\n        this.state = {\r\n            resourceStrings: {}\r\n        };\r\n    }\r\n\r\n    /** Called once component is mounted. */\r\n    async componentDidMount() {\r\n    }\r\n\r\n    /**\r\n     * Render error page.\r\n     * */\r\n    render() {\r\n        let message = this.state.resourceStrings.errorMessage;\r\n        if (this.code === \"401\") {\r\n            message = `${this.state.resourceStrings.unauthorizedAccess}`;\r\n        }\r\n\r\n        return (\r\n            <div className=\"container-div\">\r\n                <Flex gap=\"gap.small\" hAlign=\"center\" vAlign=\"center\" className=\"error-container\">\r\n                    <Flex gap=\"gap.small\" hAlign=\"center\" vAlign=\"center\">\r\n                        <Flex.Item>\r\n                            <div\r\n                                style={{\r\n                                    position: \"relative\",\r\n                                }}\r\n                            >\r\n                                <Label icon={<ErrorIcon />} />\r\n                            </div>\r\n                        </Flex.Item>\r\n\r\n                        <Flex.Item grow>\r\n                            <Flex column gap=\"gap.small\" vAlign=\"stretch\">\r\n                                <div>\r\n                                    <Text weight=\"bold\" error content={message} /><br />\r\n                                </div>\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                </Flex>\r\n            </div>\r\n        );\r\n    }\r\n}","/*\r\n    <copyright file=\"axios-decorator.ts\" company=\"Microsoft\">\r\n    Copyright (c) Microsoft. All rights reserved.\r\n    </copyright>\r\n*/\r\n\r\nimport axios, { AxiosResponse, AxiosRequestConfig } from \"axios\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport i18n from '../i18n';\r\n\r\nexport class AxiosJWTDecorator {\r\n    readonly authorizationHeaderKey = \"Authorization\";\r\n    readonly acceptLanguageHeaderKey = \"Accept-Language\";\r\n\r\n\t/**\r\n\t* Post data to API\r\n\t* @param  {String} url Resource URI\r\n\t* @param  {Object} data Request body data\r\n\t*/\r\n    public async post<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        data?: any,\r\n        config?: AxiosRequestConfig\r\n    ): Promise<R> {\r\n        try {\r\n            config = await this.setupAuthorizationHeader(config);\r\n            return await axios.post(url, data, config);\r\n        } catch (error) {\r\n            return Promise.resolve(this.handleError(error));\r\n        }\r\n    }\r\n\r\n\t/**\r\n\t* Post data to API\r\n\t* @param  {String} url Resource URI\r\n\t*/\r\n    public async delete<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        config?: AxiosRequestConfig\r\n    ): Promise<R> {\r\n        try {\r\n            config = await this.setupAuthorizationHeader(config);\r\n            return await axios.delete(url, config);\r\n        } catch (error) {\r\n            return Promise.resolve(this.handleError(error));\r\n        }\r\n    }\r\n\r\n\t/**\r\n\t* Post data to API\r\n\t* @param  {String} url Resource URI\r\n\t* @param  {Object} data Request body data\r\n\t*/\r\n    public async put<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        data?: any,\r\n        config?: AxiosRequestConfig\r\n    ): Promise<R> {\r\n        try {\r\n            config = await this.setupAuthorizationHeader(config);\r\n            return await axios.put(url, data, config);\r\n        } catch (error) {\r\n            return Promise.resolve(this.handleError(error));\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Post data to API\r\n    * @param  {String} url Resource URI\r\n    * @param  {Object} data Request body data\r\n    */\r\n    public async patch<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        data?: any,\r\n        config?: AxiosRequestConfig\r\n    ): Promise<R> {\r\n        try {\r\n            config = await this.setupAuthorizationHeader(config);\r\n            return await axios.patch(url, data, config);\r\n        } catch (error) {\r\n            return Promise.resolve(this.handleError(error));\r\n        }\r\n    }\r\n\r\n\t/**\r\n\t* Get data to API\r\n\t*/\r\n    public async get<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        config?: AxiosRequestConfig,\r\n        needAuthorizationHeader: boolean = true\r\n    ): Promise<R> {\r\n        try {\r\n            if (needAuthorizationHeader) {\r\n                config = await this.setupAuthorizationHeader(config);\r\n            }\r\n            return await axios.get(url, config);\r\n        } catch (error) {\r\n            return Promise.resolve(this.handleError(error));\r\n        }\r\n    }\r\n\r\n    /**\r\n\t* Get data to API\r\n\t*/\r\n    public async getCachedData<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        config?: AxiosRequestConfig,\r\n        needAuthorizationHeader: boolean = true\r\n    ): Promise<R> {\r\n        try {\r\n            if (needAuthorizationHeader) {\r\n                config = await this.setupAuthorizationHeader(config);\r\n                config.headers[\"Cache-Control\"] = \"max-age=1209600\"\r\n            }\r\n            return await axios.get(url, config);\r\n        } catch (error) {\r\n            return Promise.resolve(this.handleError(error));\r\n        }\r\n    }\r\n\r\n    /**\r\n\t* Handle error occurred during API call.\r\n\t* @param  {Object} error Error response object\r\n\t*/\r\n    private handleError(error: any):any {\r\n        if (error.hasOwnProperty(\"response\")) {\r\n            return error.response;\r\n        } else {\r\n            return error;\r\n        }\r\n    }\r\n\r\n\tprivate async setupAuthorizationHeader(\r\n\t\tconfig?: AxiosRequestConfig\r\n\t): Promise<AxiosRequestConfig> {\r\n\t\tmicrosoftTeams.initialize();\r\n\r\n\t\treturn new Promise<AxiosRequestConfig>((resolve, reject) => {\r\n\t\t\tconst authTokenRequest = {\r\n\t\t\t\tsuccessCallback: (token: string) => {\r\n\t\t\t\t\tif (!config) {\r\n\t\t\t\t\t\tconfig = axios.defaults;\r\n\t\t\t\t\t}\r\n                    config.headers[this.authorizationHeaderKey] = `Bearer ${token}`;\r\n                    config.headers[this.acceptLanguageHeaderKey] = i18n.language;\r\n\t\t\t\t\tresolve(config);\r\n\t\t\t\t},\r\n\t\t\t\tfailureCallback: (error: string) => {\r\n\t\t\t\t\t// When the getAuthToken function returns a \"resourceRequiresConsent\" error, \r\n\t\t\t\t\t// it means Azure AD needs the user's consent before issuing a token to the app. \r\n\t\t\t\t\t// The following code redirects the user to the \"Sign in\" page where the user can grant the consent. \r\n\t\t\t\t\t// Right now, the app redirects to the consent page for any error.\r\n\t\t\t\t\tconsole.error(\"Error from getAuthToken: \", error);\r\n\t\t\t\t\twindow.location.href = \"/signin\";\r\n\t\t\t\t},\r\n\t\t\t\tresources: []\r\n\t\t\t};\r\n\t\t\tmicrosoftTeams.authentication.getAuthToken(authTokenRequest);\r\n\t\t});\r\n\t}\r\n}\r\n\r\nconst axiosJWTDecoratorInstance = new AxiosJWTDecorator();\r\nexport default axiosJWTDecoratorInstance;","// <copyright file=\"culture-metadata-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\nimport Constants from \"../constants/constants\";\r\n\r\n/**\r\n* Get default culture from API.\r\n*/\r\nexport const getDefaultCultureAsync = async (): Promise<any> => {\r\n    let url = `${Constants.apiBaseURL}/cultureMetadata`;\r\n\r\n    return await axios.get(url);\r\n}\r\n\r\n/**\r\n* Get supported cultures from API.\r\n*/\r\nexport const getSupportedCulturesAsync = async (): Promise<any> => {\r\n    let url = `${Constants.apiBaseURL}/cultureMetadata/supportedcultures`;\r\n\r\n    return await axios.get(url);\r\n}","// <copyright file=\"cache-helper.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nconst ONE_DAY = 1000 * 60 * 60 * 24;\r\n\r\n/**\r\n * Gets the data from local storage cache.\r\n * @param cacheName Name of the cache to get.\r\n */\r\nexport const getDataFromCache = (cacheName: string) => {\r\n    let supportedCultureCache = {\r\n        data: {},\r\n        nextCleanup: new Date().getTime() + ONE_DAY\r\n    }\r\n\r\n    try {\r\n        const data = localStorage.getItem(cacheName)\r\n        if (data) {\r\n            supportedCultureCache = JSON.parse(data)\r\n\r\n            // Remove cache if expired.\r\n            if (new Date().getTime() > supportedCultureCache.nextCleanup) {\r\n                localStorage.removeItem(cacheName);\r\n                return {\r\n                    data: {},\r\n                    nextCleanup: new Date().getTime() + ONE_DAY\r\n                }\r\n            }\r\n        }\r\n    }\r\n    catch (e) {\r\n        console.error(e.message)\r\n    }\r\n\r\n    return supportedCultureCache\r\n}\r\n\r\n/**\r\n * Set the cache in local storage.\r\n * @param cacheName Name of the cache.\r\n * @param key Cache key.\r\n * @param value The value that need to stored.\r\n */\r\nexport const setDataToCache = (cacheName: string, key: string, value: any) => {\r\n    const supportedCultureCache = getDataFromCache(cacheName);\r\n    const data = supportedCultureCache.data;\r\n    data[key] = value;\r\n    try {\r\n        localStorage.setItem(cacheName, JSON.stringify(supportedCultureCache))\r\n    }\r\n    catch (e) {\r\n        console.error(e.message)\r\n        localStorage.removeItem(cacheName);\r\n    }\r\n}","// <copyright file=\"i18n.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport Backend from 'i18next-xhr-backend';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { getDefaultCultureAsync, getSupportedCulturesAsync } from \"./api/culture-metadata-api\";\r\nimport { getDataFromCache, setDataToCache } from \"./helpers/cache-helper\";\r\n\r\nconst SUPPORTEDCULTURE_CACHE = \"SUPPORTEDCULTURE_CACHE\"\r\nconst SupportedCulturesKey = \"SupportedCultures\"\r\nconst DEFAULTCULTURE_CACHE = \"DEFAULTCULTURE_CACHE\"\r\nconst DefaultCultureKey = \"DefaultCulture\"\r\n\r\nlet locale = \"en\";\r\nlet defaultLocale = \"en\";\r\nmicrosoftTeams.initialize();\r\nmicrosoftTeams.getContext((context: microsoftTeams.Context) => {\r\n    // Get suported cultures and default culture from cache.\r\n    const supportedCulturesCache = getDataFromCache(SUPPORTEDCULTURE_CACHE);\r\n    const defaultCultureCache = getDataFromCache(DEFAULTCULTURE_CACHE);\r\n\r\n    // Check if cache is present.\r\n    if (supportedCulturesCache.data[SupportedCulturesKey] && defaultCultureCache.data[DefaultCultureKey]) {\r\n        if (supportedCulturesCache.data[SupportedCulturesKey].includes(context.locale.split(\"-\")[0]) || supportedCulturesCache.data[SupportedCulturesKey].includes(context.locale)) {\r\n            i18n.changeLanguage(context.locale!);\r\n        }\r\n        else {\r\n            i18n.changeLanguage(defaultCultureCache.data[DefaultCultureKey]);\r\n        }\r\n    }\r\n    else {\r\n        getSupportedCulturesAsync().then((result: any) => {\r\n            const supportedCultures = result.data;\r\n\r\n            // Set supported culture to cache.\r\n            setDataToCache(SUPPORTEDCULTURE_CACHE, SupportedCulturesKey, supportedCultures);\r\n            if (supportedCultures.includes(context.locale.split(\"-\")[0]) || supportedCultures.includes(context.locale)) {\r\n                i18n.changeLanguage(context.locale!);\r\n            }\r\n            else {\r\n                getDefaultCultureAsync().then((result: any) => {\r\n                    defaultLocale = result.data;\r\n\r\n                    // Set default culture to cache.\r\n                    setDataToCache(DEFAULTCULTURE_CACHE, DefaultCultureKey, defaultLocale);\r\n                    i18n.changeLanguage(defaultLocale);\r\n                });\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\ni18n\r\n.use(Backend)\r\n.use(initReactI18next) // passes i18n down to react-i18next\r\n.init({\r\n    lng: locale,\r\n    fallbackLng: defaultLocale,\r\n    keySeparator: false, // we do not use keys in form messages.welcome\r\n    interpolation: {\r\n        escapeValue: false // react already safes from xss\r\n    },\r\n    react: {\r\n        useSuspense: true\r\n    }\r\n});\r\n\r\nexport default i18n;","// <copyright file=\"event-operation-type.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\n/** Indicates the event operation */\r\nexport enum EventOperationType {\r\n    /** No event operation */\r\n    None,\r\n\r\n    /** The operation in task module to close event registrations */\r\n    CloseRegistration,\r\n\r\n    /** The operation in task module to cancel an event to occur */\r\n    CancelEvent,\r\n\r\n    /** The operation in task module to register for an event */\r\n    Register,\r\n\r\n    /** The operation in task module to cancel event registration */\r\n    Remove\r\n}","// <copyright file=\"event-status.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\n/** Contains the values for event status */\r\nexport enum EventStatus {\r\n    /** Indicates that the event status is not specified */\r\n    None,\r\n\r\n    /** Indicates that the event is in draft */\r\n    Draft,\r\n\r\n    /** Indicates that the event is active */\r\n    Active,\r\n\r\n    /** Indicates that the event has been cancelled */\r\n    Cancelled,\r\n\r\n    /** Indicates that the event has been completed */\r\n    Completed\r\n}","// <copyright file=\"api-helper.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport baseAxios, { AxiosRequestConfig } from \"axios\";\r\n\r\n/**\r\n * Gets the API request configuration parameters\r\n * @param params The request parameters\r\n */\r\nexport const getAPIRequestConfigParams = (params: any) => {\r\n    let config: AxiosRequestConfig = baseAxios.defaults;\r\n    config.params = params;\r\n\r\n    return config;\r\n}","// <copyright file=\"event-audience.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nexport enum EventAudience {\r\n    /** Indicates that the event audience is not specified */\r\n    None,\r\n\r\n    /** Indicates that the event is public */\r\n    Public = 1,\r\n\r\n    /** Indicates that the event is private */\r\n    Private = 2,\r\n}","// <copyright file=\"event-type.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nexport enum EventType {\r\n    /** Indicates that the event type is not specified */\r\n    None,\r\n\r\n    /** Indicates that the event occurs in physical presence */\r\n    InPerson = 1,\r\n\r\n    /** Indicates that the event is a Microsoft Teams meeting */\r\n    Teams = 2,\r\n\r\n    /** Indicates that the event is a Microsoft Teams meeting */\r\n    LiveEvent = 3,\r\n}","// <copyright file=\"common-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\nimport { AxiosRequestConfig } from \"axios\";\r\nimport Constants from \"../constants/constants\";\r\nimport { getAPIRequestConfigParams } from \"../helpers/api-helper\";\r\n\r\n/**\r\n * Gets event details\r\n * @param eventId The event ID of which details need to be retrieved\r\n * @param teamId The LnD team ID\r\n */\r\nexport const getEventAsync = async (eventId: string, teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/Event`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ eventId: eventId, teamId: teamId });\r\n\r\n    return await axios.get(url, config);\r\n}","// <copyright file=\"user-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\nimport { AxiosRequestConfig } from \"axios\";\r\nimport Constants from \"../constants/constants\";\r\nimport { getAPIRequestConfigParams } from \"../helpers/api-helper\";\r\n\r\n/**\r\n* Search users and groups.\r\n * @param searchText defines the searched text\r\n*/\r\nexport const searchUsersAndGroups = async (searchText: string): Promise<any> => {\r\n    let url = `${Constants.apiBaseURL}/users`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ searchText: encodeURIComponent(searchText) });\r\n\r\n    return await axios.get(url, config);\r\n}\r\n\r\n/**\r\n* Get members of group.\r\n * @param groupId identifies a particular group of members\r\n*/\r\nexport const getGroupMembers = async (groupId: string): Promise<any> => {\r\n    let url = `${Constants.apiBaseURL}/group/get-group-members`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ groupId: groupId });\r\n\r\n    return await axios.get(url, config);\r\n}\r\n\r\n/**\r\n * Gets the user profiles\r\n * @param userIds The user IDs of which profiles to get\r\n */\r\nexport const getUserProfiles = async (userIds: Array<string>): Promise<any> => {\r\n    let url = `${Constants.apiBaseURL}/users`;\r\n    return await axios.post(url, userIds);\r\n}","// <copyright file=\"user-events-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\nimport baseAxios, { AxiosRequestConfig } from \"axios\";\r\n\r\n/** The base URL for API */\r\nconst baseURL = window.location.origin + \"/api\";\r\n\r\n/**\r\n * Register to an event\r\n * @param eventId The event Id in which registration need to be done\r\n */\r\nexport const getEventsAsync = async (\r\n    searchString: string, pageCount: number, eventSearchType: number, createdByFilter: string, categoryFilter: string, sortByFilter: number) => {\r\n    let url = `${baseURL}/event/UserEvents`;\r\n    let config: AxiosRequestConfig = baseAxios.defaults;\r\n    config.params = {\r\n        searchString: encodeURIComponent(searchString),\r\n        pageCount: pageCount,\r\n        eventSearchType: eventSearchType,\r\n        createdByFilter: createdByFilter,\r\n        categoryFilter: categoryFilter,\r\n        sortBy: sortByFilter\r\n    };\r\n\r\n    return axios.get(url, config);\r\n}\r\n\r\n/**\r\n * Registers user to an event\r\n * @param teamId The LnD team ID who created the event\r\n * @param eventId The event Id in which registration need to be done\r\n */\r\nexport const registerToEventAsync = (teamId: string, eventId: string) => {\r\n    let url = `${baseURL}/event/RegisterToEvent?teamId=${teamId}&eventId=${eventId}`;\r\n    let config: AxiosRequestConfig = baseAxios.defaults;\r\n    config.params = {\r\n        teamId: teamId,\r\n        eventId: eventId\r\n    };\r\n\r\n    return axios.post(url, null, config);\r\n}\r\n\r\n/**\r\n * Un-register user to an event\r\n * @param teamId The LnD team ID who created the event\r\n * @param eventId The event Id in which registration need to be cancelled\r\n */\r\nexport const removeEventAsync = (teamId: string, eventId: string) => {\r\n    let url = `${baseURL}/event/UnregisterToEvent`;\r\n    let config: AxiosRequestConfig = baseAxios.defaults;\r\n    config.params = {\r\n        teamId: teamId,\r\n        eventId: eventId\r\n    };\r\n\r\n    return axios.post(url, null, config);\r\n}","// <copyright file=\"language-direction.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nexport enum LanguageDirection {\r\n    /** Indicates that the language direction is right-to-left*/\r\n    Rtl = \"rtl\",\r\n\r\n    /** Indicates that the language direction is left-to-right*/\r\n    Ltr = \"ltr\",\r\n\r\n    /** Indicates that the language direction is auto*/\r\n    Auto = \"auto\",\r\n}","// <copyright file=\"create-event-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\nimport { AxiosRequestConfig } from \"axios\";\r\nimport { IEvent } from \"../models/IEvent\";\r\nimport Constants from \"../constants/constants\";\r\nimport { getAPIRequestConfigParams } from \"../helpers/api-helper\";\r\n\r\n/**\r\n * Upload image photo\r\n * @param formData Form data containing selected image\r\n * @param teamId The LnD team Id\r\n */\r\nexport const uploadEventImage = async (formData: FormData, teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/eventfiles/upload-image`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId });\r\n\r\n    return await axios.post(url, formData, config);\r\n}\r\n\r\n/**\r\n * Save event as draft\r\n * @param event Event details to be saved as draft\r\n * @param teamId The LnD team Id\r\n */\r\nexport const saveEventAsDraft = async (event: IEvent, teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/eventworkflow/create-draft`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId });\r\n\r\n    return await axios.post(url, event, config);\r\n}\r\n\r\n/**\r\n * Update draft event\r\n * @param event Event details to be updated as draft\r\n * @param teamId The LnD team Id\r\n */\r\nexport const updateEventAsDraft = async (event: IEvent, teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/eventworkflow/update-draft`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId });\r\n\r\n    return await axios.patch(url, event, config);\r\n}\r\n\r\n/**\r\n * Create event and add to calendar\r\n * @param event Event details to be saved\r\n * @param teamId The LnD team Id\r\n */\r\nexport const createNewEvent = async (event: IEvent, teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/eventworkflow/create-event`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId });\r\n\r\n    return await axios.post(url, event, config);\r\n}\r\n\r\n/**\r\n * Update event details\r\n * @param event Event details to be updated\r\n * @param teamId The LnD team Id\r\n */\r\nexport const updateEvent = async (event: IEvent, teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/eventworkflow/update-event`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId });\r\n\r\n    return await axios.patch(url, event, config);\r\n}\r\n\r\n/**\r\n * Gets event categories\r\n * @param teamId The LnD team Id\r\n */\r\nexport const getEventCategoriesAsync = async () => {\r\n    let url = `${Constants.apiBaseURL}/category/get-categories-for-event`;\r\n    return await axios.get(url);\r\n}\r\n\r\n/**\r\n * Check for event with same name\r\n * @param eventName User entered event name\r\n */\r\nexport const searchEventAsync = async (eventName:string) => {\r\n    let url = `${Constants.apiBaseURL}/event/search-by-title`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ search: eventName });\r\n\r\n    return await axios.get(url, config);\r\n}","import { createNewEvent, saveEventAsDraft, updateEvent, updateEventAsDraft } from \"../api/create-event-api\";\r\nimport { ResponseStatus } from \"../constants/constants\";\r\nimport { ISelectedUserGroup } from \"../models/ISelectedUserGroup\";\r\nimport { getGroupMembers } from \"../api/user-group-api\";\r\nimport { ICreateEventState } from \"../models/ICreateEventState\";\r\nimport moment from 'moment';\r\n\r\nexport const validateSelectedUsers = async (selectedUsersAndGroups: Array<ISelectedUserGroup>) => {\r\n    let users = { mandatoryUsers: new Array<string>(), optionalUsers: new Array<string>() };\r\n    let groups = { mandatoryUsers: new Array<string>(), optionalUsers: new Array<string>() };\r\n\r\n    let filteredUsers = { mandatoryUsers: new Array<string>(), optionalUsers: new Array<string>() };\r\n\r\n    for (let i = 0; i < selectedUsersAndGroups.length; i++) {\r\n        let userOrGroup = selectedUsersAndGroups[i];\r\n        if (userOrGroup.isGroup) {\r\n            let response = await getGroupMembers(userOrGroup.id);\r\n            if (response.status === ResponseStatus.OK) {\r\n                let members = response.data.map((member) => { return member.id });\r\n                if (userOrGroup.isMandatory) {\r\n                    groups.mandatoryUsers.push(...members);\r\n                }\r\n                else {\r\n                    groups.optionalUsers.push(...members);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (userOrGroup.isMandatory) {\r\n                users.mandatoryUsers.push(userOrGroup.id);\r\n            }\r\n            else {\r\n                users.optionalUsers.push(userOrGroup.id);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Remove duplicates\r\n    users.mandatoryUsers = [...new Set(users.mandatoryUsers)];\r\n    users.optionalUsers = [...new Set(users.optionalUsers)];\r\n    groups.mandatoryUsers = [...new Set(groups.mandatoryUsers)];\r\n    groups.optionalUsers = [...new Set(groups.optionalUsers)];\r\n\r\n    // Remove users from optional array if present in both mandatory and optional array (for users).\r\n    let filteredOptionalUsers = new Array<string>();\r\n    for (let j = 0; j < users.optionalUsers.length; j++) {\r\n        let result = users.mandatoryUsers.find((mandatoryUserId) => mandatoryUserId === users.optionalUsers[j]);\r\n        if (!result) {\r\n            filteredOptionalUsers.push(users.optionalUsers[j]);\r\n        }\r\n    }\r\n    users.optionalUsers = filteredOptionalUsers;\r\n\r\n    // Remove users from optional array if present in both mandatory and optional array (for users in group).\r\n    let filteredOptionalUsersInGroup = new Array<string>();\r\n    for (let k = 0; k < groups.optionalUsers.length; k++) {\r\n        let result = groups.mandatoryUsers.find((mandatoryUserId) => mandatoryUserId === groups.optionalUsers[k]);\r\n        if (!result) {\r\n            filteredOptionalUsersInGroup.push(groups.optionalUsers[k]);\r\n        }\r\n    }\r\n\r\n    groups.optionalUsers = filteredOptionalUsersInGroup;\r\n\r\n    // Check if user from group is added again as single user.\r\n    // If true then single user entity's mandatory/optional status will be considered and group's status will be neglected for that user.\r\n    let filteredMandatoryUsersInGroup = new Array<string>();\r\n    for (let l = 0; l < groups.mandatoryUsers.length; l++) {\r\n        let result = users.optionalUsers.find((optionalUser) => optionalUser === groups.mandatoryUsers[l]);\r\n        if (!result) {\r\n            filteredMandatoryUsersInGroup.push(groups.mandatoryUsers[l]);\r\n        }\r\n    }\r\n    groups.mandatoryUsers = filteredMandatoryUsersInGroup;\r\n\r\n    filteredOptionalUsersInGroup = new Array<string>();\r\n    for (let m = 0; m < groups.optionalUsers.length; m++) {\r\n        let result = users.mandatoryUsers.find((mandatoryUser) => mandatoryUser === groups.optionalUsers[m]);\r\n        if (!result) {\r\n            filteredOptionalUsersInGroup.push(groups.optionalUsers[m]);\r\n        }\r\n    }\r\n    groups.optionalUsers = filteredOptionalUsersInGroup;\r\n\r\n    filteredUsers.mandatoryUsers.push(...users.mandatoryUsers);\r\n    filteredUsers.mandatoryUsers.push(...groups.mandatoryUsers);\r\n    filteredUsers.optionalUsers.push(...users.optionalUsers);\r\n    filteredUsers.optionalUsers.push(...groups.optionalUsers);\r\n\r\n    filteredUsers.mandatoryUsers = [...new Set(filteredUsers.mandatoryUsers)];\r\n    filteredUsers.optionalUsers = [...new Set(filteredUsers.optionalUsers)];\r\n\r\n    return { mandatoryUsers: filteredUsers.mandatoryUsers, optionalUsers: filteredUsers.optionalUsers };\r\n}\r\n\r\nexport const createEvent = async (stepEventState: ICreateEventState, teamId: string) => {\r\n    let eventDetails = { ...stepEventState.eventDetails };\r\n    eventDetails.startDate = moment(eventDetails.startDate).startOf('day').add(eventDetails.startTime?.getHours(), 'hours').add(eventDetails.startTime?.getMinutes(), 'minutes').utc().toDate();\r\n    eventDetails.endDate = moment(eventDetails.endDate).startOf('day').add(eventDetails.startTime?.getHours(), 'hours').add(eventDetails.startTime?.getMinutes(), 'minutes').utc().toDate();\r\n    eventDetails.startTime = moment(eventDetails.startTime).utc().toDate();\r\n    eventDetails.endTime = moment(eventDetails.endTime).utc().toDate();\r\n    eventDetails.selectedUserOrGroupListJSON = JSON.stringify(stepEventState.selectedUserGroups);\r\n    let response = await createNewEvent(eventDetails, teamId);\r\n\r\n    if (response.status === ResponseStatus.OK) {\r\n        return true;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const updateEventDetails = async (stepEventState: ICreateEventState, teamId: string) => {\r\n    let eventDetails = { ...stepEventState.eventDetails };\r\n    eventDetails.startDate = moment(eventDetails.startDate).utc().toDate();\r\n    eventDetails.endDate = moment(eventDetails.endDate).utc().toDate();\r\n    eventDetails.startTime = moment(eventDetails.startTime).utc().toDate();\r\n    eventDetails.endTime = moment(eventDetails.endTime).utc().toDate();\r\n    eventDetails.selectedUserOrGroupListJSON = JSON.stringify(stepEventState.selectedUserGroups);\r\n    let response = await updateEvent(eventDetails, teamId);\r\n\r\n    if (response.status === ResponseStatus.OK) {\r\n        return true;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const saveEventAsDraftAsync = async (stepEventState: ICreateEventState, teamId: string) => {\r\n    let eventDetails = stepEventState.eventDetails;\r\n    // let users = await getUserIdString(stepEventState.selectedUserGroups);\r\n    eventDetails.startDate = moment(eventDetails.startDate).utc().toDate();\r\n    eventDetails.endDate = moment(eventDetails.endDate).utc().toDate();\r\n    eventDetails.startTime = moment(eventDetails.startTime).utc().toDate();\r\n    eventDetails.endTime = moment(eventDetails.endTime).utc().toDate();\r\n    eventDetails.selectedUserOrGroupListJSON = JSON.stringify(stepEventState.selectedUserGroups);\r\n\r\n    if (stepEventState.isDraft) {\r\n        let response = await updateEventAsDraft(eventDetails, teamId);\r\n\r\n        if (response.status === ResponseStatus.OK) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    else {\r\n        let response = await saveEventAsDraft(eventDetails, teamId);\r\n\r\n        if (response.status === ResponseStatus.OK) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n    * Format and renders event day and time as per local time.\r\n    * @param startDate The start date of an event\r\n    * @param startTime The start time of an event\r\n    * @param endTime The end time of an event\r\n    * @returns Returns formatted date and time. Ex. Tue, 10:00 - 11:00\r\n    */\r\nexport const formatEventDayAndTimeToShort = (startDate: Date, startTime: Date, endTime: Date) => {\r\n    let eventDay = moment.utc(startDate).local().format(\"ddd\");\r\n    let eventStartTime = moment.utc(startTime).local().format(\"HH:mm\");\r\n    let eventEndTime = moment.utc(endTime).local().format(\"HH:mm\");\r\n\r\n    return `${eventDay}, ${eventStartTime} - ${eventEndTime}`;\r\n}","// <copyright file=\"context-provider.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport i18n from \"i18next\";\r\nimport React, { Component } from 'react';\r\nimport { LanguageDirection } from \"../models/language-direction\";\r\n\r\nexport interface IWithContext {\r\n    teamsContext: microsoftTeams.Context | null,\r\n    microsoftTeams: typeof microsoftTeams,\r\n    dir: LanguageDirection\r\n}\r\n\r\nexport default function withContext(WrappedComponent: any) {\r\n    return class extends Component<any, IWithContext> {\r\n        constructor(props:any) {\r\n            super(props);\r\n            this.state = {\r\n                teamsContext: null,\r\n                microsoftTeams: microsoftTeams,\r\n                dir: LanguageDirection.Ltr\r\n            };\r\n        }\r\n\r\n        componentDidMount() {\r\n            microsoftTeams.initialize();\r\n            microsoftTeams.getContext((context: microsoftTeams.Context) => {\r\n                this.setState({ teamsContext: context, dir: i18n.dir(context.locale!) === LanguageDirection.Rtl ? LanguageDirection.Rtl : LanguageDirection.Ltr});\r\n            });\r\n        }\r\n\r\n        /** Renders component */\r\n        render() {\r\n            return (\r\n                <WrappedComponent {...this.props} teamsContext={this.state.teamsContext} microsoftTeams={this.state.microsoftTeams} dir={this.state.dir}/>\r\n            );\r\n        }\r\n    }\r\n}","// <copyright file=\"audience.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { EyeIcon, EyeSlashIcon, Text, Label, Layout } from \"@fluentui/react-northstar\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { EventAudience } from \"../../../models/event-audience\";\r\nimport withContext, { IWithContext } from \"../../../providers/context-provider\";\r\nimport { LanguageDirection } from \"../../../models/language-direction\";\r\n\r\ninterface IAudienceArtifact extends WithTranslation, IWithContext {\r\n    audienceType: EventAudience\r\n}\r\n\r\n/** The event audience artifact */\r\nconst AudienceArtifact: React.FunctionComponent<IAudienceArtifact> = props => {\r\n    const localize: TFunction = props.t;\r\n\r\n    return (\r\n        <Label\r\n            circular\r\n            className={props.dir === LanguageDirection.Rtl ? \"event-artifact rtl-right-margin-small\" : \"event-artifact\"}\r\n            title={props.audienceType === EventAudience.Private ? localize(\"private\") : localize(\"public\")}\r\n            content={\r\n                <Layout className=\"text-overflow-ellipsis\"\r\n                gap=\".6rem\"\r\n                start={props.audienceType === EventAudience.Private ? <EyeSlashIcon /> : <EyeIcon />}\r\n                main={<Text className=\"text-overflow-ellipsis\" content={props.audienceType === EventAudience.Private ? localize(\"private\") : localize(\"public\")} size=\"small\" weight=\"semibold\" />}\r\n            />}\r\n        />\r\n    );\r\n}\r\n\r\nexport default withTranslation()(withContext(AudienceArtifact));","// <copyright file=\"event-search-type.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nexport enum EventSearchType {\r\n    /** Represents operation type to get all public and private events for user */\r\n    AllPublicPrivateEventsForUser,\r\n\r\n    /** Represents operation type to get mandatory events for user */\r\n    MandatoryEventsForUser,\r\n\r\n    /** Represents operation type to get draft events for team */\r\n    DraftEventsForTeam,\r\n\r\n    /** Represents operation type to get active events for team */\r\n    ActiveEventsForTeam,\r\n\r\n    /** Represents operation type to get completed events for team */\r\n    CompletedEventsForTeam,\r\n\r\n    /** Represents operation type to get registered events for a user */\r\n    RegisteredEventsForUser,\r\n\r\n    /** Represents operation type to get completed events for a user */\r\n    CompletedEventsForUser = 7,\r\n}","// <copyright file=\"sort-by.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\n/** Represents 0 for recent and 1 for popular events */\r\nexport enum SortBy {\r\n    /** Represents default sorting of event by most recent first */\r\n    Recent,\r\n\r\n    /** Represents sorting of events by most number of registered attendee for an event */\r\n    Popularity,\r\n}","// <copyright file=\"teams-meeting.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Text, Label, TeamsIcon, Layout } from \"@fluentui/react-northstar\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\n\r\n/** The teams-meeting artifact */\r\nconst TeamsMeetingArtifact: React.FunctionComponent<WithTranslation> = props => {\r\n    const localize: TFunction = props.t;\r\n\r\n    return (\r\n        <Label\r\n            circular\r\n            className=\"event-artifact\"\r\n            title={localize(\"teamsMeeting\")}\r\n            content={<Layout className=\"text-overflow-ellipsis\"\r\n                gap=\".6rem\"\r\n                start={<TeamsIcon />}\r\n                main={<Text className=\"text-overflow-ellipsis\" content={localize(\"teamsMeeting\")} size=\"small\" weight=\"semibold\" />}\r\n            />} />\r\n    );\r\n}\r\n\r\nexport default withTranslation()(TeamsMeetingArtifact);","// <copyright file=\"live-event.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Text, Label, BroadcastIcon, Layout } from \"@fluentui/react-northstar\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\n\r\n/** The live event artifact */\r\nconst LiveEventArtifact: React.FunctionComponent<WithTranslation> = props => {\r\n    const localize: TFunction = props.t;\r\n\r\n    return (\r\n        <Label\r\n            circular\r\n            className=\"event-artifact\"\r\n            title={localize(\"liveEvent\")}\r\n            content={\r\n                <Layout className=\"text-overflow-ellipsis\"\r\n                gap=\".6rem\"\r\n                start={<BroadcastIcon />}\r\n                main={<Text className=\"text-overflow-ellipsis\" content={localize(\"liveEvent\")} size=\"small\" weight=\"semibold\" />}\r\n            />}\r\n        />\r\n    );\r\n}\r\n\r\nexport default withTranslation()(LiveEventArtifact);","// <copyright file=\"mandatory.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Label, RedbangIcon, Text, Layout } from \"@fluentui/react-northstar\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\n\r\n/** The mandatory event artifact */\r\nconst MandatoryArtifact: React.FunctionComponent<WithTranslation> = props => {\r\n    const localize: TFunction = props.t;\r\n\r\n    return (\r\n        <Label\r\n            circular\r\n            className=\"event-artifact mandatory text-overflow-ellipsis\"\r\n            title={localize(\"mandatoryArtifactText\")}\r\n            content={\r\n                <Layout className=\"text-overflow-ellipsis\"\r\n                    start={<RedbangIcon />}\r\n                    main={<Text className=\"text-overflow-ellipsis\" content={localize(\"mandatoryArtifactText\")} size=\"small\" weight=\"semibold\" />}\r\n                />\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default withTranslation()(MandatoryArtifact);","// <copyright file=\"event-image.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Text, ImageUnavailableIcon } from \"@fluentui/react-northstar\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\n\r\nimport \"./event-image.css\";\r\n\r\ninterface IEventImage extends WithTranslation {\r\n    className: string | undefined,\r\n    imageSrc: string\r\n}\r\n\r\n/**\r\n * Renders event image. If image not loaded successfully, then renders placeholder\r\n * @param props The props of type IEventImage\r\n */\r\nconst EventImage: React.FunctionComponent<IEventImage> = props => {\r\n    let localize: TFunction = props.t;\r\n\r\n    let [isImageLoaded, setImageLoaded] = React.useState(false);\r\n    let [isErrorLoadingImage, setImageError] = React.useState(false);\r\n\r\n    /** The event handler called when image loaded successfully */\r\n    const onImageLoaded = () => {\r\n        setImageLoaded(true);\r\n    }\r\n\r\n    /** The event handler called when image was not loaded or user aborted loading image */\r\n    const onImageNotLoaded = () => {\r\n        setImageError(true);\r\n    }\r\n\r\n    const renderImagePlaceholder = () => {\r\n        if (!isImageLoaded && !isErrorLoadingImage) {\r\n            return (\r\n                <Flex\r\n                    className={`${props.className} event-image-placeholder-container`}\r\n                    vAlign=\"center\"\r\n                    hAlign=\"center\">\r\n                    <Flex className=\"event-image-placeholder\" vAlign=\"center\" hAlign=\"center\" gap=\"gap.small\" fill>\r\n                        <Text\r\n                            content={localize(\"eventCardImageLoadingPlaceholder\")}\r\n                            align=\"center\" size=\"medium\"\r\n                            weight=\"semibold\"\r\n                            color=\"white\"\r\n                        />\r\n                    </Flex>\r\n                </Flex>\r\n            );\r\n        }\r\n        else if (isErrorLoadingImage) {\r\n            return (\r\n                <Flex\r\n                    className={`${props.className} event-image-placeholder-container`}\r\n                    vAlign=\"center\"\r\n                    hAlign=\"center\">\r\n                    <Flex className=\"event-image-placeholder\" vAlign=\"center\" hAlign=\"center\" gap=\"gap.small\" fill>\r\n                        <ImageUnavailableIcon className=\"placeholder-icon\" />\r\n                        <Text\r\n                            content={localize(\"eventCardImageNotFoundPlaceholder\")}\r\n                            align=\"center\" size=\"medium\"\r\n                            weight=\"semibold\"\r\n                            color=\"white\"\r\n                        />\r\n                    </Flex>\r\n                </Flex>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <img\r\n                className={`${props.className} ${isImageLoaded && !isErrorLoadingImage ? 'event-image-renderer image-loaded' : 'event-image-renderer image-not-loaded'}`}\r\n                src={props.imageSrc}\r\n                onLoad={onImageLoaded}\r\n                onError={onImageNotLoaded}\r\n                onAbort={onImageNotLoaded} />\r\n            {renderImagePlaceholder()}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default withTranslation()(EventImage);","// <copyright file=\"event-details.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Text, Divider, Avatar, Layout, Provider, Button, Loader } from \"@fluentui/react-northstar\";\r\nimport { Icon } from '@fluentui/react/lib/Icon';\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { EventAudience } from \"../../models/event-audience\";\r\nimport { EventType } from \"../../models/event-type\";\r\nimport { EventOperationType } from \"../../models/event-operation-type\";\r\nimport { formatEventDayAndTimeToShort } from \"../../helpers/event-helper\";\r\nimport AudienceArtifact from \"../../components/common/event-artifacts/audience\";\r\nimport TeamsMeetingArtifact from \"../../components/common/event-artifacts/teams-meeting\";\r\nimport LiveEventArtifact from \"../../components/common/event-artifacts/live-event\";\r\nimport MandatoryArtifact from \"../../components/common/event-artifacts/mandatory\";\r\nimport EventImage from \"../../components/common/event-image/event-image\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\nimport { Fabric } from \"@fluentui/react\";\r\n\r\nimport \"./event-details.css\";\r\n\r\ninterface IEventDetailsProps extends WithTranslation {\r\n    dir: LanguageDirection\r\n    eventDetails: IEvent | undefined,\r\n    eventCreatedByName: string\r\n    eventOperationType: EventOperationType,\r\n    isLoadingEventDetails: boolean,\r\n    isFailedToGetEventDetails: boolean,\r\n    isOperationInProgress: boolean,\r\n    isOperationFailed: boolean,\r\n    isMobileView: boolean,\r\n    onPerformOperation: () => void\r\n}\r\n\r\n/** Renders the event details in task module */\r\nconst EventDetails: React.FunctionComponent<IEventDetailsProps> = props => {\r\n    const localize: TFunction = props.t;\r\n\r\n    /** Renders artifacts */\r\n    const getArtifacts = () => {\r\n        let artifactElements: Array<JSX.Element> = [];\r\n\r\n        if (props.eventDetails?.isMandatoryForLoggedInUser) {\r\n            artifactElements.push(<MandatoryArtifact />);\r\n        }\r\n\r\n        switch (props.eventDetails?.type) {\r\n            case EventType.Teams:\r\n                artifactElements.push(<TeamsMeetingArtifact />);\r\n                break;\r\n\r\n            case EventType.LiveEvent:\r\n                artifactElements.push(<LiveEventArtifact />);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        switch (props.eventDetails?.audience) {\r\n            case EventAudience.Private:\r\n                artifactElements.push(<AudienceArtifact audienceType={EventAudience.Private} />);\r\n                break;\r\n\r\n            case EventAudience.Public:\r\n                artifactElements.push(<AudienceArtifact audienceType={EventAudience.Public} />);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <Flex gap=\"gap.small\" vAlign=\"center\">\r\n                {artifactElements}\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    /** Renders the event creator information */\r\n    const renderEventCreatorInfo = () => {\r\n        let name = props.eventCreatedByName && props.eventCreatedByName.length ? props.eventCreatedByName : localize(\"unknownUserName\");\r\n        return (\r\n            <Flex vAlign=\"center\" hAlign=\"start\" gap=\"gap.smaller\" design={{ marginTop: \"2.67rem\" }}>\r\n                <Avatar\r\n                    size=\"small\"\r\n                    name={name}\r\n                    className={props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}\r\n                />\r\n                <Layout\r\n                    start={<Text content={localize(\"createdBy\")} size=\"small\" />}\r\n                    main={<Text content={name} size=\"small\" weight=\"semibold\" />}\r\n                    gap=\".4rem\"\r\n                />\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Renders event venue if event type is In-Person\r\n     * @param eventType The event type\r\n     * @param venue The event venue\r\n     */\r\n    const renderEventVenue = (eventType: number, venue: string) => {\r\n        if (eventType === EventType.InPerson) {\r\n            return (\r\n                <React.Fragment>\r\n                    <Divider vertical styles={{ height: \"1.13rem\", marginRight: \".8rem\" }} />\r\n                    <Text className=\"event-venue\" content={venue} weight=\"semibold\" size=\"small\" />\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Sets the event operation type that the task module is going to do */\r\n    const renderOperationButtonText = () => {\r\n        switch (props.eventOperationType) {\r\n            case EventOperationType.CloseRegistration:\r\n                return localize(\"closeRegistration\");\r\n\r\n            case EventOperationType.CancelEvent:\r\n                return localize(\"cancelEvent\");\r\n\r\n            case EventOperationType.Register:\r\n                return localize(\"register\");\r\n\r\n            case EventOperationType.Remove:\r\n                return localize(\"remove\");\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /** Renders the footer which has the submit action to close, cancel, register or cancel an event */\r\n    const renderFooter = () => {\r\n        if (props.eventOperationType === EventOperationType.None) {\r\n            return;\r\n        }\r\n\r\n        return (\r\n            <Flex className=\"footer\" vAlign=\"center\">\r\n                {props.isOperationFailed ? <Text error content={localize(\"dataResponseFailedStatus\")} weight=\"semibold\" /> : null}\r\n                <Flex.Item grow={props.dir === LanguageDirection.Rtl} push={props.dir === LanguageDirection.Ltr}>\r\n                    <div >\r\n                        <Button\r\n                            primary\r\n                            loading={props.isOperationInProgress}\r\n                            disabled={props.isOperationInProgress}\r\n                            content={renderOperationButtonText()}\r\n                            onClick={props.onPerformOperation}\r\n                        />\r\n                    </div>\r\n                </Flex.Item>\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    /** Renders task module header */\r\n    const renderHeader = () => {\r\n        if (props.isMobileView) {\r\n            return (\r\n                <Flex column vAlign=\"center\" gap=\"gap.smaller\">\r\n                    <Text className=\"category label-color\" truncated content={props.eventDetails?.categoryName} title={props.eventDetails?.categoryName} weight=\"bold\" />\r\n                    <Flex vAlign=\"center\">\r\n                        {getArtifacts()}\r\n                    </Flex>\r\n                </Flex>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <Flex space=\"between\" vAlign=\"center\">\r\n                    <Text className=\"category label-color\" truncated content={props.eventDetails?.categoryName} title={props.eventDetails?.categoryName} weight=\"bold\" />\r\n                    <Flex.Item push={props.dir === LanguageDirection.Ltr}>\r\n                        {getArtifacts()}\r\n                    </Flex.Item>\r\n                </Flex>\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Renders the attendee URL for live event */\r\n    const renderAttendeeURL = () => {\r\n        if (props.eventDetails?.type === EventType.LiveEvent) {\r\n            return (\r\n                <Flex design={{ marginTop: \"2.67rem\" }} vAlign=\"center\" hAlign=\"start\" column>\r\n                    <Text content={localize(\"liveEventUrlStep1\")} weight=\"semibold\" />\r\n                    <a href={props.eventDetails?.meetingLink} target=\"_blank\" rel=\"noopener noreferrer\">{props.eventDetails?.meetingLink}</a>\r\n                </Flex>\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Renders component */\r\n    const renderEventDetails = () => {\r\n        if (props.isLoadingEventDetails) {\r\n            return (\r\n                <Provider>\r\n                    <Flex>\r\n                        <div className=\"task-module-container\">\r\n                            <Loader className=\"task-module-loader\" />\r\n                        </div>\r\n                    </Flex>\r\n                </Provider>\r\n            );\r\n        }\r\n\r\n        if (props.isFailedToGetEventDetails || !props.eventDetails) {\r\n            return (\r\n                <Provider>\r\n                    <Flex>\r\n                        <div className=\"task-module-container event-task-module\">\r\n                            <Text error content={localize(\"dataResponseFailedStatus\")} weight=\"semibold\" />\r\n                        </div>\r\n                    </Flex>\r\n                </Provider>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Fabric dir={props.dir}>\r\n                <Provider>\r\n                    <Flex>\r\n                        <div className={`${props.isMobileView ? \"mobile-task-module-container\" : \"task-module-container\"} event-task-module`}>\r\n                            <div className=\"event-info\">\r\n                                { renderHeader() }\r\n                                {props.eventDetails.photo && <EventImage className=\"event-image\" imageSrc={props.eventDetails.photo} />}\r\n                                {props.eventDetails.selectedColor && <div className=\"event-image\" style={{ backgroundColor: props.eventDetails.selectedColor }}>\r\n                                    <Flex className=\"event-image\" hAlign=\"center\" vAlign=\"center\">\r\n                                        <Text className=\"event-color-text\" size=\"large\" weight=\"semibold\" content={props.eventDetails.name} title={props.eventDetails.name} />\r\n                                    </Flex>\r\n                                </div>}\r\n                                <div style={{ marginTop: \"1.33rem\" }}>\r\n                                    <Text align={props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} className={props.dir === LanguageDirection.Rtl ? \"rtl-right-margin-smaller\" : \"\"} content={props.eventDetails?.name} weight=\"bold\" size=\"medium\" />\r\n                                </div>\r\n                                <Flex vAlign=\"center\" hAlign=\"start\">\r\n                                    <Layout\r\n                                        className=\"event-date-and-time\"\r\n                                        start={<Icon iconName=\"Clock\" />}\r\n                                        main={<Text content={formatEventDayAndTimeToShort(props.eventDetails?.startDate, props.eventDetails?.startTime!, props.eventDetails.endTime!)} weight=\"semibold\" size=\"small\" />}\r\n                                        gap=\".4rem\"\r\n                                    />\r\n                                    {renderEventVenue(props.eventDetails?.type, props.eventDetails?.venue)}\r\n                                </Flex>\r\n                                <Flex vAlign=\"center\" hAlign=\"start\" design={{ marginTop: \"2.67rem\" }}>\r\n                                    <Text className={props.dir === LanguageDirection.Rtl ? \"rtl-right-margin-small\" : \"\"} content={props.eventDetails?.description} />\r\n                                </Flex>\r\n                                { renderAttendeeURL() }\r\n                                <Flex gap={props.dir === LanguageDirection.Rtl ? undefined : \"gap.large\"} className={props.dir === LanguageDirection.Rtl ? \"rtl-right-margin-small\" : \"\"} design={{ marginTop: \"2.67rem\" }}>\r\n                                    <Flex column className={props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-large\" : \"\"}>\r\n                                        <Text content={localize(\"totalNoOfParticipants\")} weight=\"semibold\" />\r\n                                        <Text align={props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={props.eventDetails?.maximumNumberOfParticipants} />\r\n                                    </Flex>\r\n                                    <Flex column>\r\n                                        <Text content={localize(\"registeredParticipants\")} weight=\"semibold\" />\r\n                                        <Text align={props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={props.eventDetails?.registeredAttendeesCount} />\r\n                                    </Flex>\r\n                                </Flex>\r\n                                {renderEventCreatorInfo()}\r\n                            </div>\r\n                            {renderFooter()}\r\n                        </div>\r\n                    </Flex>\r\n                </Provider>\r\n            </Fabric>\r\n        );\r\n    }\r\n\r\n    return renderEventDetails();\r\n}\r\n\r\nexport default withTranslation()(EventDetails);","// <copyright file=\"register-remove-event.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport moment from \"moment\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { ResponseStatus } from \"../../constants/constants\";\r\nimport { EventOperationType } from \"../../models/event-operation-type\";\r\nimport { EventStatus } from \"../../models/event-status\";\r\nimport { getEventAsync } from \"../../api/common-api\";\r\nimport { getUserProfiles } from \"../../api/user-group-api\"\r\nimport { registerToEventAsync, removeEventAsync } from \"../../api/user-events-api\";\r\nimport EventDetails from \"../event-operation-task-module/event-details\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport { Loader } from \"@fluentui/react-northstar\";\r\n\r\ninterface IRegisterRemoveEventProps extends IWithContext, WithTranslation {\r\n}\r\n\r\ninterface IRegisterRemoveEventState {\r\n    isLoading: boolean,\r\n    isOperationInProgress: boolean,\r\n    eventDetails: IEvent | undefined,\r\n    eventCreatedBy: string,\r\n    isErrorGettingEventDetails: boolean,\r\n    isFailedToRegisterOrRemove: boolean,\r\n    eventOperationType: EventOperationType\r\n}\r\n\r\nclass RegisterRemoveEvent extends React.Component<IRegisterRemoveEventProps, IRegisterRemoveEventState> {\r\n    readonly localize: TFunction;\r\n    isMobileView: boolean;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.localize = this.props.t;\r\n        this.isMobileView = false;\r\n\r\n        this.state = {\r\n            isLoading: true,\r\n            isOperationInProgress: false,\r\n            eventDetails: undefined,\r\n            eventCreatedBy: \"\",\r\n            isErrorGettingEventDetails: false,\r\n            isFailedToRegisterOrRemove: false,\r\n            eventOperationType: EventOperationType.None\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        microsoftTeams.initialize();\r\n        this.getEventDetailsAsync();\r\n    }\r\n\r\n    /** Gets event details */\r\n    getEventDetailsAsync = async () => {\r\n        let queryParam = new URLSearchParams(window.location.search);\r\n        let eventId = queryParam.get(\"eventId\") ?? \"0\";\r\n        let teamId = queryParam.get(\"teamId\") ?? \"0\";\r\n        this.isMobileView = queryParam.get(\"isMobileView\") === \"true\" ? true : false;\r\n\r\n        let response = await getEventAsync(eventId!, teamId!);\r\n\r\n        if (response.status === ResponseStatus.OK && response.data) {\r\n            let eventDetails: IEvent = response.data;\r\n            let eventOperationType: EventOperationType = EventOperationType.None;\r\n\r\n            if (eventDetails.status === EventStatus.Active && new Date() < moment.utc(eventDetails.endDate).local().toDate()) {\r\n                if (eventDetails.isLoggedInUserRegistered) {\r\n                    eventOperationType = EventOperationType.Remove;\r\n                }\r\n                else if (!eventDetails.isRegistrationClosed && eventDetails.registeredAttendeesCount < eventDetails.maximumNumberOfParticipants && eventDetails.canLoggedInUserRegister) {\r\n                    eventOperationType = EventOperationType.Register;\r\n                }\r\n            }\r\n\r\n            this.setState({isLoading: false, eventDetails, eventOperationType }, () => {\r\n                if (this.state.eventDetails) {\r\n                    this.getUserProfileAsync(this.state.eventDetails.createdBy);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.setState({ isLoading: false, isErrorGettingEventDetails: true });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get event creator information\r\n     * @param userId The user ID of which information to get\r\n     */\r\n    getUserProfileAsync = async (userId: string) => {\r\n        let user: Array<string> = [userId];\r\n        let response = await getUserProfiles(user);\r\n\r\n        if (response.status === ResponseStatus.OK && response.data) {\r\n            let userInfo = response.data[0];\r\n            this.setState({ eventCreatedBy: userInfo.displayName });\r\n        }\r\n    }\r\n\r\n    /** Called when click on 'Register' or 'Remove' event */\r\n    onRegisterRemoveEvent = async () => {\r\n\r\n\r\n        let responseSuccess, responseStatusSuccess, responseDataSuccess;\r\n\r\n        let teamId = this.state.eventDetails ? this.state.eventDetails.teamId : \"0\";\r\n        let eventId = this.state.eventDetails ? this.state.eventDetails.eventId : \"0\";\r\n\r\n        switch (this.state.eventOperationType) {\r\n            case EventOperationType.Register:\r\n                this.setState({ isLoading: true });\r\n\r\n                responseSuccess = await registerToEventAsync(teamId, eventId);\r\n                responseStatusSuccess = responseSuccess.status === ResponseStatus.OK;\r\n                responseDataSuccess = responseSuccess.data === true;\r\n                break;\r\n\r\n            case EventOperationType.Remove:\r\n                this.setState({ isLoading: true });\r\n                responseSuccess = await removeEventAsync(teamId, eventId);\r\n                responseStatusSuccess = responseSuccess.status === ResponseStatus.OK;\r\n                responseDataSuccess = responseSuccess.data === true;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        if (responseSuccess && responseStatusSuccess && responseDataSuccess) {\r\n            microsoftTeams.tasks.submitTask({ isSuccess: true, type: this.state.eventOperationType });\r\n            this.setState({ isFailedToRegisterOrRemove: false, isOperationInProgress: true });\r\n            this.setState({ isLoading: false });\r\n        }\r\n        else {\r\n            this.setState({ isFailedToRegisterOrRemove: true, isOperationInProgress: false });\r\n            this.setState({ isLoading: false });\r\n        }\r\n    }\r\n\r\n    /** Renders component */\r\n    render() {\r\n        return (\r\n            <EventDetails\r\n                dir={this.props.dir}\r\n                eventDetails={this.state.eventDetails}\r\n                eventCreatedByName={this.state.eventCreatedBy}\r\n                eventOperationType={this.state.eventOperationType}\r\n                isLoadingEventDetails={this.state.isLoading}\r\n                isFailedToGetEventDetails={this.state.isErrorGettingEventDetails}\r\n                isOperationInProgress={this.state.isOperationInProgress}\r\n                isOperationFailed={this.state.isFailedToRegisterOrRemove}\r\n                isMobileView={this.isMobileView}\r\n                onPerformOperation={this.onRegisterRemoveEvent}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(RegisterRemoveEvent));","// <copyright file=\"event-image.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Text, ImageUnavailableIcon } from \"@fluentui/react-northstar\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\n\r\nimport \"./event-image.css\";\r\n\r\ninterface IEventImage extends WithTranslation {\r\n    className: string | undefined,\r\n    imageSrc: string\r\n}\r\n\r\n/**\r\n * Renders event image. If image not loaded successfully, then renders placeholder\r\n * @param props The props of type IEventImage\r\n */\r\nconst EventImage: React.FunctionComponent<IEventImage> = props => {\r\n    let localize: TFunction = props.t;\r\n\r\n    let [isImageLoaded, setImageLoaded] = React.useState(false);\r\n    let [isErrorLoadingImage, setImageError] = React.useState(false);\r\n\r\n    /** The event handler called when image loaded successfully */\r\n    const onImageLoaded = () => {\r\n        setImageLoaded(true);\r\n    }\r\n\r\n    /** The event handler called when image was not loaded or user aborted loading image */\r\n    const onImageNotLoaded = () => {\r\n        setImageError(true);\r\n    }\r\n\r\n    const renderImagePlaceholder = () => {\r\n        if (!isImageLoaded && !isErrorLoadingImage) {\r\n            return (\r\n                <Flex\r\n                    className={`${props.className} event-image-placeholder-container`}\r\n                    vAlign=\"center\"\r\n                    hAlign=\"center\">\r\n                    <Flex className=\"event-image-placeholder\" vAlign=\"center\" hAlign=\"center\" gap=\"gap.small\" fill>\r\n                        <Text\r\n                            content={localize(\"eventCardImageLoadingPlaceholder\")}\r\n                            align=\"center\" size=\"medium\"\r\n                            weight=\"semibold\"\r\n                            color=\"white\"\r\n                        />\r\n                    </Flex>\r\n                </Flex>\r\n            );\r\n        }\r\n        else if (isErrorLoadingImage) {\r\n            return (\r\n                <Flex\r\n                    className={`${props.className} event-image-placeholder-container`}\r\n                    vAlign=\"center\"\r\n                    hAlign=\"center\">\r\n                    <Flex className=\"event-image-placeholder\" vAlign=\"center\" hAlign=\"center\" gap=\"gap.small\" fill>\r\n                        <ImageUnavailableIcon className=\"placeholder-icon\" />\r\n                        <Text\r\n                            content={localize(\"eventCardImageNotFoundPlaceholder\")}\r\n                            align=\"center\" size=\"medium\"\r\n                            weight=\"semibold\"\r\n                            color=\"white\"\r\n                        />\r\n                    </Flex>\r\n                </Flex>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <img\r\n                className={`${props.className} ${isImageLoaded && !isErrorLoadingImage ? 'event-image-renderer image-loaded' : 'event-image-renderer image-not-loaded'}`}\r\n                src={props.imageSrc}\r\n                onLoad={onImageLoaded}\r\n                onError={onImageNotLoaded}\r\n                onAbort={onImageNotLoaded} />\r\n            {renderImagePlaceholder()}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default withTranslation()(EventImage);","// <copyright file=\"event-card.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Text, Divider } from \"@fluentui/react-northstar\";\r\nimport moment from \"moment\";\r\nimport { Icon } from 'office-ui-fabric-react';\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport MandatoryArtifact from \"../common/event-artifacts/mandatory\";\r\nimport TeamsMeetingArtifact from \"../common/event-artifacts/teams-meeting\";\r\nimport AudienceArtifact from \"../common/event-artifacts/audience\";\r\nimport LiveEventArtifact from \"../common/event-artifacts/live-event\";\r\nimport { EventAudience } from \"../../models/event-audience\";\r\nimport { formatEventDayAndTimeToShort } from \"../../helpers/event-helper\";\r\nimport EventImage from \"../event-image/event-image\";\r\nimport { EventType } from \"../../models/event-type\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\n\r\nimport \"../event-card/event-card.css\";\r\n\r\ninterface IEventCardProps extends WithTranslation, IWithContext {\r\n    eventDetails: IEvent,\r\n    onClick: () => void\r\n}\r\n\r\n/**\r\n * Renders the event card for user\r\n * @param props The props with type IEventCard\r\n */\r\nconst EventCard: React.FunctionComponent<IEventCardProps> = props => {\r\n    const localize: TFunction = props.t;\r\n\r\n    const renderFooter = () => {\r\n        let footerElements: Array<JSX.Element> = [];\r\n\r\n        if (props.eventDetails.isMandatoryForLoggedInUser) {\r\n            footerElements.push(<MandatoryArtifact />);\r\n        }\r\n\r\n        switch (props.eventDetails.type) {\r\n            case EventType.Teams:\r\n                footerElements.push(<TeamsMeetingArtifact />);\r\n                break;\r\n\r\n            case EventType.LiveEvent:\r\n                footerElements.push(<LiveEventArtifact />);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        switch (props.eventDetails.audience) {\r\n            case EventAudience.Private:\r\n                footerElements.push(<AudienceArtifact audienceType={EventAudience.Private} />);\r\n                break;\r\n\r\n            case EventAudience.Public:\r\n                footerElements.push(<AudienceArtifact audienceType={EventAudience.Public} />);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <Flex className=\"footer\" gap=\"gap.small\" vAlign=\"center\">\r\n                {footerElements}\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    /** Gets the available slots for the event */\r\n    const getAvailableSlots = () => {\r\n        if (props.eventDetails.registeredAttendeesCount < props.eventDetails.maximumNumberOfParticipants) {\r\n            return props.eventDetails.maximumNumberOfParticipants - props.eventDetails.registeredAttendeesCount;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /** Renders event venue if event type is In-Person */\r\n    const renderEventVenue = () => {\r\n        if (props.eventDetails.type === EventType.InPerson) {\r\n            return (\r\n                <React.Fragment>\r\n                    <Divider className=\"event-date-venue-separator\" vertical />\r\n                    <Text truncated className=\"event-venue\" content={props.eventDetails.venue} title={props.eventDetails.venue} weight=\"semibold\" size=\"small\" />\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Flex column className=\"event-card\" onClick={props.onClick}>\r\n            {props.eventDetails.photo && <EventImage className=\"event-photo\" imageSrc={props.eventDetails.photo} />}\r\n            {\r\n                props.eventDetails.selectedColor &&\r\n                <div className=\"event-photo\" style={{ backgroundColor: props.eventDetails.selectedColor }}>\r\n                    <Flex className=\"event-photo\" hAlign=\"center\" vAlign=\"center\">\r\n                        <Text className=\"event-color-text\" size=\"medium\" weight=\"semibold\" title={props.eventDetails.name} content={props.eventDetails.name} />\r\n                    </Flex>\r\n                </div>\r\n            }\r\n            <Flex className=\"event-info\" column fill>\r\n                <Flex vAlign=\"center\" gap=\"gap.medium\">\r\n                    <Flex className=\"event-day\" column vAlign=\"center\" hAlign=\"center\" fill>\r\n                        <Text content={moment.utc(props.eventDetails.startDate).local().format(\"DD\")} size=\"large\" weight=\"bold\" />\r\n                        <Text content={moment.utc(props.eventDetails.startDate).local().format(\"MMM\")} size=\"medium\" weight=\"semibold\" />\r\n                    </Flex>\r\n                    <Flex className=\"event-details\" column vAlign=\"center\" fill>\r\n                        <Text align={props.dir === \"rtl\" ? \"end\" : undefined} className={props.dir === \"rtl\" ? \"event-category rtl-right-margin-small\" : \"event-category\"} truncated content={props.eventDetails.categoryName} weight=\"bold\" size=\"smaller\" />\r\n                        <Text align={props.dir === \"rtl\" ? \"end\" : undefined} className={props.dir === \"rtl\" ? \"rtl-right-margin-small\" : \"\"} truncated content={props.eventDetails.name} title={props.eventDetails.name} weight=\"bold\" size=\"medium\" />\r\n                        <Flex className={props.dir === \"rtl\" ? \"event-date-and-venue-rtl event-date-and-venue\" : \"event-date-and-venue\"} vAlign=\"center\">\r\n                            <Icon iconName=\"Clock\" />\r\n                            <Flex.Item shrink={false}>\r\n                                <Text weight=\"semibold\" size=\"small\" content={formatEventDayAndTimeToShort(props.eventDetails.startDate, props.eventDetails.startTime!, props.eventDetails.endTime!)} />\r\n                            </Flex.Item>\r\n                            {renderEventVenue()}\r\n                        </Flex>\r\n                    </Flex>\r\n                </Flex>\r\n                <Flex className=\"event-participants\" gap=\"gap.small\">\r\n                    <Text size=\"small\" content={`${localize(\"participantsRegistered\")} : ${props.eventDetails.registeredAttendeesCount}`} />\r\n                    <Divider vertical />\r\n                    <Text size=\"small\" content={`${localize(\"availableSlots\")} : ${getAvailableSlots()}`} />\r\n                </Flex>\r\n                {renderFooter()}\r\n            </Flex>\r\n        </Flex>\r\n    );\r\n}\r\n\r\nexport default withTranslation()(withContext(EventCard));","// <copyright file=\"user-events-wrapper.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { Loader } from \"@fluentui/react-northstar\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport EventCard from \"../../components/event-card/event-card\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport \"../../components/user-events-wrapper/user-events-wrapper.css\"\r\n\r\ninterface IUserEventsProps {\r\n    key: string,\r\n    events: Array<IEvent>,\r\n    hasMoreEvents: boolean,\r\n    loadMoreEvents: (pageNumber: number) => void,\r\n    onClick: (eventDetails: IEvent) => void\r\n}\r\n\r\n/**\r\n * Renders the events for the user\r\n * @param props The props of type IUserEvents\r\n */\r\nconst UserEvents: React.FunctionComponent<IUserEventsProps> = props => {\r\n    /** Renders events details for every event */\r\n    const renderEvents = () => {\r\n        if (!props.events || props.events.length === 0) {\r\n            return \"No events available\";\r\n        }\r\n\r\n        let events = props.events.map((event: IEvent, index: number) => {\r\n            return <Col className=\"grid-column d-flex justify-content-center\" xl={4} lg={4} sm={6} md={4}><EventCard key={`event-${index}`} eventDetails={event} onClick={() => props.onClick(event)} /></Col>\r\n        });\r\n\r\n        return <Row data-testid=\"event_count\">{events}</Row>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"user-events\">\r\n            <div className=\"container-subdiv-cardview\">\r\n                <Container key={props.key} className=\"pagination-scroll-area\" fluid>\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        initialLoad={false}\r\n                        loader={<Loader />}\r\n                        useWindow={false}\r\n                        loadMore={props.loadMoreEvents}\r\n                        hasMore={props.hasMoreEvents}\r\n                    >\r\n                        {renderEvents()}\r\n                    </InfiniteScroll>\r\n                </Container>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserEvents;","// <copyright file=\"no-content-page.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from 'react';\r\nimport { Text } from \"@fluentui/react-northstar\";\r\nimport { EyeIcon } from \"@fluentui/react-icons-northstar\";\r\n\r\ninterface INoContentPage {\r\n    message: string\r\n}\r\n\r\nconst NoContent: React.FunctionComponent<INoContentPage> = props => {\r\n    return (\r\n        <div className=\"no-content-container\">\r\n            <div className=\"app-logo\">\r\n                <EyeIcon size=\"largest\" />\r\n            </div>\r\n            <div className=\"no-content-title\">\r\n                <Text content={props.message} weight=\"semibold\" />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NoContent;","// <copyright file=\"popup-menu-checkboxes-content.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Input, Button, Provider, Divider, Checkbox } from \"@fluentui/react-northstar\";\r\nimport { CloseIcon, SearchIcon } from \"@fluentui/react-icons-northstar\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ICheckBoxItem } from \"../../../models/ICheckBoxItem\";\r\nimport { LanguageDirection } from \"../../../models/language-direction\";\r\nimport { Fabric } from \"@fluentui/react\";\r\n\r\nimport \"./popup-menu.css\";\r\n\r\ninterface IPopupMenuCheckboxesContentProps {\r\n    showSearchBar: boolean,\r\n    content: any,\r\n    disableClear: boolean,\r\n    selectedCount: number,\r\n    onCheckboxStateChange: (checkboxState: Array<ICheckBoxItem>) => void,\r\n    dir: LanguageDirection\r\n}\r\n\r\nconst MaxItemsToShowInFilter: number = 50;\r\n\r\nconst PopupMenuCheckboxesContent: React.FunctionComponent<IPopupMenuCheckboxesContentProps> = props => {\r\n    const localize = useTranslation().t;\r\n    const [data, setCheckbox] = React.useState({ checkboxes: props.content.checkboxes });\r\n    const [filteredCheckboxes, setFilteredCheckboxes] = React.useState(props.content.checkboxes);\r\n    const [searchedString, setSearchString] = React.useState(\"\");\r\n    let [disableClear, setdisableClear] = React.useState(true);\r\n    let [checkBoxClicked, setcheckBoxClicked] = React.useState(false);\r\n\r\n    React.useEffect(() => {\r\n        setFilterCheckboxes(props.content.checkboxes);\r\n    }, []);\r\n\r\n    /**\r\n    *Updates particular checkbox's isChecked state and passes changed state back to parent component.\r\n    *@param key Unique key for checkbox which needs to be updated\r\n    *@param checked Boolean indicating checkbox current value\r\n    */\r\n    const onCheckboxValueChange = (key: string, checked: boolean) => {\r\n        let checkCount = 0;\r\n        setcheckBoxClicked(true);\r\n        let checkboxList = data.checkboxes.map((checkbox: ICheckBoxItem) => {\r\n            if (checkbox.key === key) {\r\n                checkbox.isChecked = checked;\r\n            }\r\n            return checkbox;\r\n        });\r\n\r\n        checkboxList.map((checkbox: ICheckBoxItem) => {\r\n            if (checkbox.isChecked) {\r\n                checkCount = checkCount + 1;\r\n            }\r\n        })\r\n\r\n        if (checkCount > 0) {\r\n            setdisableClear(false);\r\n        }\r\n        else {\r\n            setdisableClear(true);\r\n        }\r\n\r\n        if (searchedString.trim().length) {\r\n            let filteredItems = checkboxList.filter((item: ICheckBoxItem) => {\r\n                return item.title.toLowerCase().includes(searchedString.toLowerCase());\r\n            })\r\n\r\n            setFilterCheckboxes(filteredItems);\r\n        }\r\n        else {\r\n            setFilterCheckboxes(checkboxList);\r\n        }\r\n\r\n        props.onCheckboxStateChange(checkboxList);\r\n    }\r\n\r\n    /**\r\n    *Sets all checkbox's isChecked to false to unselect all and passes changed state back to parent component.\r\n    */\r\n    const deSelectAll = () => {\r\n        let checkboxList = data.checkboxes.map((checkbox: ICheckBoxItem) => {\r\n                checkbox.isChecked = false\r\n                return checkbox;\r\n        });\r\n\r\n        let filteredItems = checkboxList;\r\n\r\n        if (searchedString.trim().length) {\r\n            filteredItems = checkboxList.filter((item: ICheckBoxItem) => {\r\n                return item.title.toLowerCase().includes(searchedString.toLowerCase());\r\n            });\r\n        }\r\n\r\n        setFilterCheckboxes(filteredItems);\r\n        props.onCheckboxStateChange(checkboxList);\r\n        setdisableClear(true);\r\n        setcheckBoxClicked(true);\r\n    }\r\n\r\n    const onSearchChange = (text: string) => {\r\n        setSearchString(text);\r\n        if (text.trim().length > 0) {\r\n            let filteredItems = data.checkboxes.filter((item: ICheckBoxItem) => {\r\n                return item.title.toLowerCase().includes(text.toLowerCase());\r\n            });\r\n\r\n            setFilterCheckboxes(filteredItems);\r\n        }\r\n        else {\r\n            setFilterCheckboxes(data.checkboxes);\r\n        }\r\n    }\r\n\r\n    const getSelectedCountString = () => {\r\n        return props.selectedCount.toString();\r\n    }\r\n\r\n    const setFilterCheckboxes = (filterItems: any) => {\r\n        if (filterItems && filterItems.length > 0) {\r\n            let items = [...filterItems];\r\n            let itemsToRender = items.slice(0, MaxItemsToShowInFilter);\r\n            setFilteredCheckboxes(itemsToRender);\r\n        }\r\n        else {\r\n            setFilteredCheckboxes([]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fabric dir={props.dir}>\r\n            <Provider>\r\n                <div className=\"content-items-wrapper\">\r\n                    {props.showSearchBar && <div className=\"content-items-headerfooter\">\r\n                        <Input icon={<SearchIcon />} iconPosition={props.dir === \"rtl\" ? \"start\" : \"end\" } placeholder={localize(\"searchPlaceholder\")} value={searchedString} fluid onChange={(event: any) => onSearchChange(event.target.value)} />\r\n                    </div>}\r\n                    <Divider className=\"filter-popup-menu-divider\" />\r\n                    <div className=\"content-items-headerfooter\">\r\n                        <Flex gap=\"gap.small\" vAlign=\"center\" hAlign=\"end\">\r\n                            <Flex.Item push>\r\n                                <div></div>\r\n                            </Flex.Item>\r\n                            <Button disabled={checkBoxClicked ? disableClear : props.disableClear} className={props.selectedCount === 0 ? \"clear-button \": \"clear-button enable-clear\"} size=\"small\" text onClick={() => deSelectAll()} content={props.selectedCount > 0 ? localize(\"clear\") + \"(\" + getSelectedCountString() + \")\" : localize(\"clear\") } />\r\n                        </Flex>\r\n                    </div>\r\n                    <div className=\"content-items-body\">\r\n                        {\r\n                            filteredCheckboxes.map((checkbox: ICheckBoxItem) => {\r\n                                if (checkbox.title.trim().length) {\r\n                                    return (\r\n                                        <Flex gap=\"gap.small\">\r\n                                            <Checkbox data-testid={checkbox.key + \"_categoryCheckbox_item\"} className=\"checkbox-wrapper\" label={checkbox.checkboxLabel} key={checkbox.key} checked={checkbox.isChecked} onChange={(key, data: any) => onCheckboxValueChange(checkbox.key, data.checked)} />\r\n                                        </Flex>\r\n                                    );\r\n                                }\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </Provider>\r\n        </Fabric>\r\n    );\r\n}\r\n\r\nexport default React.memo(PopupMenuCheckboxesContent);","// <copyright file=\"popup-menu-radiogroup-content.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, RadioGroup } from \"@fluentui/react-northstar\";\r\nimport { Fabric } from \"@fluentui/react\";\r\nimport { LanguageDirection } from \"../../../models/language-direction\";\r\n\r\nimport \"./popup-menu.css\";\r\n\r\ninterface IPopupMenuRadiogroupContentProps {\r\n    content: any,\r\n    selectedValue: number,\r\n    onRadiogroupStateChange: (selectedValue: number) => void,\r\n    dir: LanguageDirection\r\n}\r\n\r\nconst PopupMenuRadiogroupContent: React.FunctionComponent<IPopupMenuRadiogroupContentProps> = props => {\r\n\r\n    return (\r\n        <Fabric dir={props.dir}>\r\n            <div className=\"content-items-wrapper radio-popup-content\">\r\n                <div className=\"content-items-body\">\r\n                    {   \r\n                        <Flex gap=\"gap.small\">\r\n\t\t\t\t            <RadioGroup\r\n\t\t\t\t\t            defaultCheckedValue={props.selectedValue}\r\n\t\t\t\t\t            vertical\r\n\t\t\t\t\t            items={props.content.radioGroupItems}\r\n                                onCheckedValueChange={(event, data: any) => props.onRadiogroupStateChange(data.value)}\r\n                                data-testid={\"radioGroup_items\"}\r\n\t\t\t\t            />\r\n\t\t\t            </Flex>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </Fabric>\r\n    );\r\n}\r\n\r\nexport default React.memo(PopupMenuRadiogroupContent);","// <copyright file=\"popup-menu-wrapper.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Popup, Button, Text } from \"@fluentui/react-northstar\";\r\nimport { ChevronDownIcon } from \"@fluentui/react-icons-northstar\";\r\nimport PopupMenuCheckboxesContent from \"./popup-menu-checkboxes-content\";\r\nimport PopupMenuRadiogroupContent from \"./popup-menu-radiogroup-content\";\r\nimport { ICheckBoxItem } from \"../../../models/ICheckBoxItem\";\r\nimport { LanguageDirection } from \"../../../models/language-direction\";\r\n\r\nimport \"./popup-menu.css\";\r\n\r\ninterface IPopupMenuWrapperProps {\r\n    checkboxes?: Array<any>,\r\n    radioGroup?: Array<any>,\r\n    title: string,\r\n    selectedSortBy?: number,\r\n    showSearchBar?: boolean,\r\n    selectedCount: number,\r\n    onCheckboxStateChange: (typeState: Array<any>) => void,\r\n    onRadiogroupStateChange: (selectedValue: number) => void,\r\n    onOpenChange: (isOpen: boolean) => void,\r\n    dir: LanguageDirection\r\n}\r\n\r\nconst PopupMenuWrapper: React.FunctionComponent<IPopupMenuWrapperProps> = props => {\r\n    const [popup, onOpenChange] = React.useState({ isOpen: false });\r\n    let [disableClear, setdisableClear] = React.useState(true);\r\n\r\n    const onFilterClick = () => {\r\n        let checkCount = 0;\r\n        let checkBox = props.checkboxes!;\r\n        checkBox.map((checkbox: ICheckBoxItem) => {\r\n            if (checkbox.isChecked) {\r\n                checkCount = checkCount + 1;\r\n            }\r\n        });\r\n        if (checkCount > 0) {\r\n            setdisableClear(false);\r\n        }\r\n        else {\r\n            setdisableClear(true);\r\n        }\r\n    }\r\n\r\n    const onPopupOpenChange = (isOpen: boolean) => {\r\n        onOpenChange({ isOpen: isOpen });\r\n        props.onOpenChange(isOpen);\r\n    }\r\n\r\n    if (props.checkboxes) {\r\n        return (\r\n            <Popup\r\n                className=\"popup-container\"\r\n                open={popup.isOpen}\r\n                align=\"end\"\r\n                position=\"below\"\r\n                onOpenChange={(e, { open }: any) => onPopupOpenChange(open)}\r\n                trigger={<Button data-testid={props.checkboxes.length > 0 ? props.checkboxes[0].title + \"_CheckboxButton\" : \"dummyTitle_CheckboxButton\"} className=\"filter-button\" onClick={() => onFilterClick()} content={< Text content={props.title} className={props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}/>} iconPosition=\"after\" icon = {< ChevronDownIcon />} text />}\r\n                content={<PopupMenuCheckboxesContent dir={props.dir} disableClear={disableClear} selectedCount={props.selectedCount} showSearchBar={props.showSearchBar!} content={{ checkboxes: props.checkboxes, title: props.title }} onCheckboxStateChange={props.onCheckboxStateChange} />}\r\n                trapFocus\r\n            />\r\n        );\r\n    }\r\n    else if (props.radioGroup) {\r\n        return (\r\n            <Popup\r\n                open={popup.isOpen}\r\n                align=\"end\"\r\n                position=\"below\"\r\n                onOpenChange={(e, { open }: any) => onPopupOpenChange(open)}\r\n                trigger={<Button data-testid={props.radioGroup.length > 0 ? props.radioGroup[0].name + \"_RadioGroupButton\" : \"dummyName_RadioGroupButton\"} icon={< ChevronDownIcon />} className=\"filter-button\" iconPosition=\"after\" content={< Text content={props.title} className={props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}/>} text />}\r\n                content={<PopupMenuRadiogroupContent dir={props.dir} selectedValue={props.selectedSortBy!} content={{ radioGroupItems: props.radioGroup, title: props.title }} onRadiogroupStateChange={props.onRadiogroupStateChange} />}\r\n                trapFocus\r\n            />\r\n        );\r\n    }\r\n    else {\r\n        return (<></>);\r\n    }\r\n}\r\n\r\nexport default React.memo(PopupMenuWrapper);","/*\r\n\t<copyright file=\"resources.ts\" company=\"Microsoft\">\r\n\tCopyright (c) Microsoft. All rights reserved.\r\n\t</copyright>\r\n*/\r\n\r\nimport { EventAudience } from \"../models/event-audience\";\r\nimport { EventType } from \"../models/event-type\";\r\nimport { IPostType } from \"../models/IPostType\";\r\nimport { SortBy } from \"../models/sort-by\";\r\n\r\nexport interface IConstantDropdownItem {\r\n\tname: string;\r\n\tid: number;\r\n}\r\n\r\nexport interface ITimeZonesItem {\r\n\tdisplayName: string;\r\n\tid: string;\r\n}\r\n\r\nexport default class Resources {\r\n\tpublic static readonly dark: string = \"dark\";\r\n\tpublic static readonly contrast: string = \"contrast\";\r\n\tpublic static readonly eventNameMaxLength: number = 100;\r\n\tpublic static readonly eventDescriptionMaxLength: number = 1000;\r\n\tpublic static readonly eventVenueMaxLength: number = 200;\r\n\tpublic static readonly userEventsMobileFilteredCategoriesLocalStorageKey: string = \"user-events-filtered-categories\";\r\n\tpublic static readonly userEventsMobileFilteredUsersLocalStorageKey: string = \"user-events-filtered-users\";\r\n\tpublic static readonly userEventsMobileSortByFilterLocalStorageKey: string = \"user-events-sortby\";\r\n\tpublic static readonly validUrlRegExp: RegExp = /^http(s)?:\\/\\/(www\\.)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$/;\r\n\r\n\t/** Color codes used while creating an event */\r\n\tpublic static readonly colorCells = [\r\n\t\t{ id: 'a', label: 'Wild blue yonder', color: '#A4A8CB' },\r\n\t\t{ id: 'b', label: 'Jasmine', color: '#FFDE85' },\r\n\t\t{ id: 'c', label: 'Sky blue', color: '#A0EAF8' },\r\n\t\t{ id: 'd', label: 'Nadeshiko pink', color: '#F1A7B9' },\r\n\t\t{ id: 'e', label: 'Lavender blue', color: '#E3D7FF' },\r\n\t];\r\n\r\n\t/** Color codes used while creating an event */\r\n\tpublic static readonly audienceType: Array<IConstantDropdownItem> = [\r\n\t\t{ name: \"Public\", id: EventAudience.Public },\r\n\t\t{ name: \"Private\", id: EventAudience.Private },\r\n\t];\r\n\r\n\t/** Sort by values for filter */\r\n\tpublic static readonly sortBy: Array<IPostType> = [\r\n\t\t{ name: \"Newest\", id: SortBy.Recent, color: \"\" },\r\n\t\t{ name: \"Popularity\", id: SortBy.Popularity, color: \"\" }\r\n\t];\r\n\r\n\t/** Event type values */\r\n\tpublic static readonly eventType: Array<IConstantDropdownItem> = [\r\n\t\t{ name: \"In person\", id: EventType.InPerson },\r\n\t\t{ name: \"Teams\", id: EventType.Teams },\r\n\t\t{ name: \"Live event\", id: EventType.LiveEvent },\r\n\t];\r\n}","// <copyright file=\"localized-constants.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport { EventAudience } from \"../models/event-audience\";\r\nimport { EventType } from \"../models/event-type\";\r\nimport { IConstantDropdownItem } from \"../constants/resources\";\r\nimport Resources from \"../constants/resources\";\r\nimport { TFunction } from \"i18next\";\r\nimport { IPostType } from \"../models/IPostType\";\r\nimport { SortBy } from \"../models/sort-by\";\r\n\r\n/**\r\n* Get localized audience types.\r\n* @param localize i18n TFunction received from props.\r\n*/\r\nexport const getLocalizedAudienceTypes = (localize: TFunction): Array<IConstantDropdownItem> => {\r\n    return Resources.audienceType.map((value: IConstantDropdownItem) => {\r\n        switch (value.id) {\r\n            case EventAudience.Public:\r\n                value.name = localize(\"publicAudience\");\r\n                return value;\r\n\r\n            case EventAudience.Private:\r\n                value.name = localize(\"privateAudience\");\r\n                return value;\r\n\r\n            default:\r\n                return value;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n* Get localized event types.\r\n* @param localize i18n TFunction received from props.\r\n*/\r\nexport const getLocalizedEventTypes = (localize: TFunction): Array<IConstantDropdownItem> => {\r\n    return Resources.eventType.map((value: IConstantDropdownItem) => {\r\n        switch (value.id) {\r\n            case EventType.InPerson:\r\n                value.name = localize(\"inPersonEvent\");\r\n                return value;\r\n\r\n            case EventType.Teams:\r\n                value.name = localize(\"teamsEvent\");\r\n                return value;\r\n\r\n            case EventType.LiveEvent:\r\n                value.name = localize(\"liveEvent\");\r\n                return value;\r\n\r\n            default:\r\n                return value;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n* Get localized sort by filters.\r\n* @param localize i18n TFunction received from props.\r\n*/\r\nexport const getLocalizedSortBy = (localize: TFunction): Array<IPostType> => {\r\n    return Resources.sortBy.map((value: IPostType) => {\r\n        switch (value.id) {\r\n            case SortBy.Recent:\r\n                value.name = localize(\"sortByNewest\");\r\n                return value;\r\n\r\n            case SortBy.Popularity:\r\n                value.name = localize(\"sortByPopularity\");\r\n                return value;\r\n\r\n            default:\r\n                return value;\r\n        }\r\n    });\r\n}","// <copyright file=\"activity-status.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\n/** Contains the values which shows status for an activity */\r\nexport enum ActivityStatus {\r\n    /** Indicates no activity */\r\n    None,\r\n\r\n    /** Indicates that the activity completed successfully */\r\n    Success,\r\n\r\n    /** Indicates that the activity failed to execute */\r\n    Error\r\n}","// <copyright file=\"filter-bar.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Text } from \"@fluentui/react-northstar\";\r\nimport { CloseIcon } from \"@fluentui/react-icons-northstar\";\r\nimport { initializeIcons } from \"@uifabric/icons\";\r\nimport PopupMenuWrapper from \"../../components/common/popup-menu/popup-menu-wrapper\";\r\nimport { ICheckBoxItem } from \"../../models/ICheckBoxItem\";\r\nimport { IRadioGroupItem } from \"../../models/IRadioGroupItem\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { getLocalizedSortBy } from \"../../helpers/localized-constants\";\r\nimport { ICategory } from \"../../models/ICategory\";\r\nimport { ITeamsChannelMember } from \"../../models/ITeamsChannelMember\";\r\nimport { SortBy } from \"../../models/sort-by\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport { Fabric } from \"@fluentui/react\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\nimport \"./filter-bar.css\";\r\n\r\ninterface IFilterBarProps extends WithTranslation, IWithContext {\r\n    isVisible: boolean,\r\n    isReset: boolean,\r\n    categoryList: Array<ICategory>,\r\n    createdByList: Array<ITeamsChannelMember>,\r\n    onFilterBarCloseClick: (isFilterStateChanged: boolean) => void,\r\n    onFilterChange: (selectedCategories: Array<string>, selectedUsers: Array<string>, sortBy: number) => void\r\n}\r\n\r\ninterface IFilterBarState {\r\n    categoryList: Array<ICheckBoxItem>;\r\n    createdByList: Array<ICheckBoxItem>;\r\n    sortBy: Array<IRadioGroupItem>;\r\n    selectedSortBy: number;\r\n    screenWidth: number;\r\n    createdBySelectedCount: number;\r\n    categorySelectedCount: number;\r\n}\r\n\r\ninterface IPostType {\r\n    name: string;\r\n    id: number;\r\n    color: string;\r\n}\r\n\r\nclass FilterBar extends React.Component<IFilterBarProps, IFilterBarState> {\r\n    localize: TFunction;\r\n    isFilterStateChanged: boolean;\r\n\r\n    constructor(props: IFilterBarProps) {\r\n        super(props);\r\n\r\n        initializeIcons();\r\n        this.localize = this.props.t;\r\n        this.isFilterStateChanged = false;\r\n\r\n        const sortBy: Array<IRadioGroupItem> = getLocalizedSortBy(this.localize).map((sortBy: IPostType) => { return { key: sortBy.id, label: sortBy.name, value: sortBy.id, name: sortBy.name } });\r\n\r\n        this.state = {\r\n            selectedSortBy: sortBy[0].value,\r\n            categoryList: [],\r\n            createdByList: [],\r\n            sortBy: sortBy,\r\n            screenWidth: 800,\r\n            createdBySelectedCount: 0,\r\n            categorySelectedCount: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.resize.bind(this));\r\n        this.resize();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.resize.bind(this));\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: IFilterBarProps) {\r\n        if (nextProps.isReset) {\r\n            let categoryList = this.state.categoryList ? [...this.state.categoryList] : [];\r\n            let createdByList = this.state.createdByList ? [...this.state.createdByList] : [];\r\n\r\n            this.isFilterStateChanged = false;\r\n\r\n            this.setState({\r\n                categoryList: categoryList.map((value: ICheckBoxItem) => {\r\n                    value.isChecked = false;\r\n                    return value;\r\n                }),\r\n                categorySelectedCount: 0,\r\n                createdByList: createdByList.map((value: ICheckBoxItem) => {\r\n                    value.isChecked = false;\r\n                    return value;\r\n                }),\r\n                createdBySelectedCount: 0,\r\n                selectedSortBy: SortBy.Recent\r\n            });\r\n        }\r\n\r\n        if (nextProps.categoryList && nextProps.categoryList !== this.props.categoryList) {\r\n            this.setState({\r\n                categoryList: nextProps.categoryList.map((value: ICategory) => {\r\n                    return { isChecked: false, key: value.categoryId, title: value.name, checkboxLabel: <Text content={value.name} /> };\r\n                })\r\n            });\r\n        }\r\n\r\n        if (nextProps.createdByList && nextProps.createdByList !== this.props.createdByList) {\r\n            this.setState({\r\n                createdByList: nextProps.createdByList.map((value: ITeamsChannelMember) => {\r\n                    return { isChecked: false, key: value.aadObjectId, title: value.name, checkboxLabel: <Text content={value.name} /> };\r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    resize = () => {\r\n        if (window.innerWidth !== this.state.screenWidth) {\r\n            this.setState({ screenWidth: window.innerWidth });\r\n        }\r\n    }\r\n\r\n\t/**\r\n\t*Sets state of 'Category list' filter item when checkbox value changes.\r\n\t*@param categoryValues Array of 'category' checkboxes with updated user selection\r\n    */\r\n    onCategoryStateChange = (categoryValues: Array<ICheckBoxItem>) => {\r\n        let selectedCategories = categoryValues?.filter((value: ICheckBoxItem) => {\r\n            return value.isChecked;\r\n        });\r\n\r\n        this.isFilterStateChanged = true;\r\n        this.setState({ categoryList: categoryValues, categorySelectedCount: selectedCategories ? selectedCategories.length : 0 });\r\n    }\r\n\r\n\t/**\r\n\t*Sets state of 'Created by' filter item when checkbox value changes.\r\n\t*@param createdByValues Array of 'created by' checkboxes with updated user selection\r\n    */\r\n    onCreatedByStateChange = (createdByValues: Array<ICheckBoxItem>) => {\r\n        let selectedUsers = createdByValues?.filter((value: ICheckBoxItem) => {\r\n            return value.isChecked;\r\n        });\r\n\r\n        this.isFilterStateChanged = true;\r\n        this.setState({ createdByList: createdByValues, createdBySelectedCount: selectedUsers ? selectedUsers.length : 0 });\r\n    }\r\n\r\n\t/**\r\n\t*Sets state of selected sort by item.\r\n\t*@param selectedSortBy Selected 'sort by' value\r\n    */\r\n    onSortByStateChange = (selectedSortBy: number) => {\r\n        this.isFilterStateChanged = true;\r\n        this.setState({ selectedSortBy: selectedSortBy });\r\n    }\r\n\r\n\t/**\r\n\t*Removes all filters and hides filter bar.\r\n\t*@param event Event object for input\r\n    */\r\n    onCloseIconClick = (event: any) => {\r\n        this.props.onFilterBarCloseClick(this.state.categorySelectedCount > 0 || this.state.createdBySelectedCount > 0 || this.state.selectedSortBy !== SortBy.Recent );\r\n        this.isFilterStateChanged = false;\r\n    }\r\n\r\n    onFilterChange = (isFilterItemOpen: boolean) => {\r\n        if (!isFilterItemOpen && this.isFilterStateChanged) {\r\n            let categories: Array<ICheckBoxItem> = this.state.categoryList ? [...this.state.categoryList] : [];\r\n            let users: Array<ICheckBoxItem> = this.state.createdByList ? [...this.state.createdByList] : [];\r\n\r\n            let selectedCategories = categories.filter((category: ICheckBoxItem) => {\r\n                return category.isChecked;\r\n            });\r\n\r\n            let selectedUsers = users.filter((user: ICheckBoxItem) => {\r\n                return user.isChecked;\r\n            });\r\n\r\n            let filteredCategories = selectedCategories.map((category: ICheckBoxItem) => {\r\n                return category.key;\r\n            });\r\n\r\n            let filteredUsers = selectedUsers.map((user: ICheckBoxItem) => {\r\n                return user.key;\r\n            });\r\n\r\n            this.isFilterStateChanged = false;\r\n            this.props.onFilterChange(filteredCategories, filteredUsers, this.state.selectedSortBy);\r\n        }\r\n        else {\r\n            this.isFilterStateChanged = false;\r\n        }\r\n    }\r\n\r\n\t/**\r\n\t* Renders the component\r\n\t*/\r\n    public render(): JSX.Element {\r\n        if (this.props.isVisible) {\r\n            return (\r\n                <Fabric dir={this.props.dir}>\r\n                    <Flex className=\"filter-bar\" data-testid=\"filterbar\">\r\n                        {this.state.screenWidth > 750 &&\r\n                            <Flex gap=\"gap.small\" vAlign=\"center\" className=\"filter-bar-wrapper\" space=\"between\">\r\n                                <div className=\"filter-bar-item-container\">\r\n                                    <Text content={this.localize(\"category\")} weight=\"semibold\" className=\"title-text\"/>\r\n                                    <PopupMenuWrapper dir={this.props.dir} title={this.state.categorySelectedCount > 0 ? this.state.categorySelectedCount + \" \" + this.localize(\"selected\") : this.localize(\"selectHere\")} showSearchBar={true} selectedSortBy={this.state.selectedSortBy!} selectedCount={this.state.categorySelectedCount} checkboxes={this.state.categoryList} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCategoryStateChange} onOpenChange={this.onFilterChange} />\r\n                                        <Text content={this.localize(\"createdBy\")} weight=\"semibold\" className=\"title-text\"/>\r\n                                    <PopupMenuWrapper dir={this.props.dir} title={this.state.createdBySelectedCount > 0 ? this.state.createdBySelectedCount + \" \" + this.localize(\"selected\") : this.localize(\"selectHere\")} showSearchBar={true} selectedSortBy={this.state.selectedSortBy!} checkboxes={this.state.createdByList} selectedCount={this.state.createdBySelectedCount} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCreatedByStateChange} onOpenChange={this.onFilterChange} />\r\n                                        <Text content={this.localize(\"sortBy\")} weight=\"semibold\" className=\"title-text\"/>\r\n                                    <PopupMenuWrapper dir={this.props.dir} title={this.state.sortBy[this.state.selectedSortBy!].name} selectedSortBy={this.state.selectedSortBy!} selectedCount={this.state.createdBySelectedCount} radioGroup={this.state.sortBy} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCreatedByStateChange} onOpenChange={this.onFilterChange} />\r\n                                </div>\r\n                            <Flex.Item push={this.props.dir === LanguageDirection.Ltr}>\r\n                                <CloseIcon onClick={this.onCloseIconClick} className={this.props.dir === LanguageDirection.Rtl ? \"close-icon rtl-left-margin-small\" : \"close-icon\"} />\r\n                                </Flex.Item>\r\n                            </Flex>}\r\n\r\n                        {this.state.screenWidth <= 750 && <Flex gap=\"gap.small\" vAlign=\"start\" className=\"filter-bar-wrapper\">\r\n                            <Flex.Item grow>\r\n                                <Flex column gap=\"gap.small\" vAlign=\"stretch\">\r\n                                    <Flex className=\"mobile-filterbar-wrapper\">\r\n                                        <PopupMenuWrapper dir={this.props.dir} title={this.state.categorySelectedCount > 0 ? this.state.categorySelectedCount + \" \" + this.localize(\"selected\") : this.localize(\"selectHere\")} showSearchBar={true} selectedSortBy={this.state.selectedSortBy!} selectedCount={this.state.categorySelectedCount} checkboxes={this.state.categoryList} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCategoryStateChange} onOpenChange={this.onFilterChange} />\r\n                                        <PopupMenuWrapper dir={this.props.dir} title={this.state.createdBySelectedCount > 0 ? this.state.createdBySelectedCount + \" \" + this.localize(\"selected\") : this.localize(\"selectHere\")} showSearchBar={true} selectedSortBy={this.state.selectedSortBy!} selectedCount={this.state.createdBySelectedCount} checkboxes={this.state.createdByList} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCreatedByStateChange} onOpenChange={this.onFilterChange} />\r\n                                        <PopupMenuWrapper dir={this.props.dir} title={this.state.sortBy[this.state.selectedSortBy!].name} selectedCount={this.state.createdBySelectedCount} selectedSortBy={this.state.selectedSortBy!} radioGroup={this.state.sortBy} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCreatedByStateChange} onOpenChange={this.onFilterChange} />\r\n                                    </Flex>\r\n                                </Flex>\r\n                            </Flex.Item>\r\n                        </Flex>}\r\n                    </Flex>\r\n                </Fabric>\r\n            );\r\n        }\r\n        else {\r\n            return (<></>);\r\n        }\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(FilterBar))","// <copyright file=\"tab-menu.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Menu, MenuProps } from \"@fluentui/react-northstar\";\r\nimport \"./tab-menu.css\";\r\n\r\ninterface ITabMenuProps {\r\n    defaultTabIndex: number,\r\n    tabItems: Array<any>,\r\n    activeTabIndex: string | number,\r\n    onTabIndexChange: (tabEvent: MenuProps | undefined) => void\r\n}\r\n\r\n/**\r\n * Renders tab menu\r\n * @param props The props of type ITabMenuProps\r\n */\r\nconst TabMenu: React.FunctionComponent<ITabMenuProps> = props => {\r\n    return (\r\n        <Flex className=\"tab-menu\">\r\n            <Menu primary items={props.tabItems} defaultActiveIndex={props.defaultTabIndex} activeIndex={props.activeTabIndex} onActiveIndexChange={(event, tabEventDetails: MenuProps | undefined) => props.onTabIndexChange(tabEventDetails)} />\r\n        </Flex>\r\n    );\r\n}\r\n\r\nexport default TabMenu;","// <copyright file=\"toast-notification.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { IToastNotification } from \"../../models/IToastNotification\";\r\nimport { ActivityStatus } from \"../../models/activity-status\";\r\nimport { Toast } from \"react-bootstrap\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\nimport \"./toast-notification.css\";\r\n\r\ninterface IToastNotificationProps extends WithTranslation {\r\n    notification: IToastNotification,\r\n    dir: LanguageDirection\r\n}\r\n\r\ninterface IToastNotificationState {\r\n    isShowNotification: boolean\r\n}\r\n\r\n/**\r\n * The toast notification which shows the recent status messages\r\n * @param props The props of type IToastNotificationProps\r\n */\r\nclass ToastNotification extends React.Component<IToastNotificationProps, IToastNotificationState> {\r\n    readonly localize: TFunction;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.localize = this.props.t;\r\n\r\n        this.state = {\r\n            isShowNotification: false\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: IToastNotificationProps) {\r\n        if (nextProps.notification.id !== this.props.notification.id && nextProps.notification.message?.length && nextProps.notification.type !== ActivityStatus.None) {\r\n            this.setState({ isShowNotification: true });\r\n        }\r\n    }\r\n\r\n    onClose = () => {\r\n        this.setState({ isShowNotification: false });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Toast\r\n                className={`notification-toast ${this.props.notification.type === ActivityStatus.Success ? \"success\" : \"error\"}`}\r\n                autohide\r\n                delay={4000}\r\n                show={this.state.isShowNotification}\r\n                onClose={this.onClose}>\r\n                <Toast.Body className={this.props.dir === LanguageDirection.Ltr ? \"notification\" : \"rtl-notification\"}>\r\n                    <strong>{this.props.notification.message}</strong>\r\n                </Toast.Body>\r\n            </Toast>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(ToastNotification);","// <copyright file=\"LnD-team-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\n\r\nlet baseAxiosUrl = window.location.origin + '/api';\r\n\r\n/**\r\n* Gets all LnD teams' members\r\n*/\r\nexport const getAllLnDTeamMembersAsync = async (): Promise<any> => {\r\n    let url = `${baseAxiosUrl}/LnDTeam`;\r\n    return await axios.get(url);\r\n}","// <copyright file=\"mobile-filter-helper.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport Resources from \"../constants/resources\";\r\n\r\n/** Clears the local storage data saved for mobile filter */\r\nexport const clearMobileFilterLocalStorage = () => {\r\n    localStorage.removeItem(Resources.userEventsMobileFilteredCategoriesLocalStorageKey);\r\n    localStorage.removeItem(Resources.userEventsMobileFilteredUsersLocalStorageKey);\r\n    localStorage.removeItem(Resources.userEventsMobileSortByFilterLocalStorageKey);\r\n}","// <copyright file=\"discover-events.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Button, Flex, Input, Loader, MenuButton, MenuProps, Provider, SearchIcon, CloseIcon } from \"@fluentui/react-northstar\";\r\nimport { Fabric } from \"@fluentui/react\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { EventSearchType } from \"../../models/event-search-type\";\r\nimport Constants, { ResponseStatus } from \"../../constants/constants\";\r\nimport { SortBy } from \"../../models/sort-by\";\r\nimport { ICategory } from \"../../models/ICategory\";\r\nimport UserEvents from \"../user-events-wrapper/user-events-wrapper\";\r\nimport NoContent from \"../no-content-page/no-content-page\"\r\nimport FilterBar from \"../filter-bar/filter-bar\";\r\nimport TabMenu from \"../tab-menu/tab-menu\"\r\nimport { getEventsAsync } from \"../../api/user-events-api\";\r\nimport { Icon } from '@fluentui/react';\r\nimport { ITeamsChannelMember } from \"../../models/ITeamsChannelMember\";\r\nimport ToastNotification from \"../toast-notification/toast-notification\";\r\nimport { ActivityStatus } from \"../../models/activity-status\";\r\nimport { IToastNotification } from \"../../models/IToastNotification\";\r\nimport { getEventCategoriesAsync } from \"../../api/create-event-api\";\r\nimport { getAllLnDTeamMembersAsync } from \"../../api/LnD-team-api\";\r\nimport { EventOperationType } from \"../../models/event-operation-type\";\r\nimport Resources from \"../../constants/resources\";\r\nimport { clearMobileFilterLocalStorage } from \"../../helpers/mobile-filter-helper\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\nimport \"./discover-events.css\";\r\n\r\ninterface IDiscoverEventsState {\r\n    mandatoryEvents: Array<IEvent>,\r\n    allEvents: Array<IEvent>,\r\n    hasMoreEvents: boolean,\r\n    userEventsContainerKey: number,\r\n    isLoadingEvents: boolean,\r\n    activeTabIndex: number | string | undefined,\r\n    isFilterOpen: boolean,\r\n    searchText: string,\r\n    filteredCategories: string,\r\n    filteredUsers: string,\r\n    sortByFilter: number,\r\n    categoriesInFilter: Array<ICategory>,\r\n    lnDTeamMembersInFilter: Array<ITeamsChannelMember>,\r\n    isResetFilter: boolean,\r\n    notification: IToastNotification,\r\n    isMobileView: boolean,\r\n    isMobileSearchBoxOpen: boolean\r\n}\r\n\r\ninterface IDiscoverEventsProps extends WithTranslation, IWithContext {\r\n}\r\n\r\n/** The tab index for 'Mandatory events' tab */\r\nconst MandatoryEventsTabIndex: number = 0;\r\n\r\n/** The tab index for 'All events' */\r\nconst AllEventsTabIndex: number = 1;\r\n\r\n/** Renders all events for user created by LnD team */\r\nclass DiscoverEvents extends React.Component<IDiscoverEventsProps, IDiscoverEventsState> {\r\n    localize: TFunction;\r\n    searchText: string;\r\n    timeout: number | null;\r\n    mandatoryEventsCount: number;\r\n    allEventsCount: number;\r\n\r\n    constructor(props: IDiscoverEventsProps) {\r\n        super(props);\r\n\r\n        this.searchText = \"\";\r\n        this.localize = this.props.t;\r\n        this.timeout = null;\r\n        this.mandatoryEventsCount = -1;\r\n        this.allEventsCount = -1;\r\n\r\n        this.state = {\r\n            mandatoryEvents: [],\r\n            allEvents: [],\r\n            hasMoreEvents: false,\r\n            userEventsContainerKey: 0,\r\n            isLoadingEvents: true,\r\n            activeTabIndex: MandatoryEventsTabIndex,\r\n            isFilterOpen: false,\r\n            searchText: \"\",\r\n            filteredCategories: \"\",\r\n            filteredUsers: \"\",\r\n            sortByFilter: SortBy.Recent,\r\n            categoriesInFilter: [],\r\n            lnDTeamMembersInFilter: [],\r\n            isResetFilter: false,\r\n            notification: { id: 0, message: \"\", type: ActivityStatus.None },\r\n            isMobileView: false,\r\n            isMobileSearchBoxOpen: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.screenResize.bind(this));\r\n        this.screenResize();\r\n\r\n        this.loadEventCategories();\r\n        this.loadAllLnDTeamMembers();\r\n\r\n        clearMobileFilterLocalStorage();\r\n\r\n        let mandatoryEvents = this.getEventsAsync(EventSearchType.MandatoryEventsForUser);\r\n        let allEvents = this.getEventsAsync(EventSearchType.AllPublicPrivateEventsForUser);\r\n\r\n        Promise.all([mandatoryEvents, allEvents])\r\n            .then((results) => {\r\n                this.setTotalEventsCount(EventSearchType.MandatoryEventsForUser, results[0].length);\r\n                this.setTotalEventsCount(EventSearchType.AllPublicPrivateEventsForUser, results[1].length);\r\n            })\r\n            .finally(() => {\r\n                this.getEvents();\r\n            });\r\n    }\r\n\r\n    screenResize = () => {\r\n        this.setState({ isMobileView: window.innerWidth <= Constants.maxWidthForMobileView });\r\n    }\r\n\r\n    /** Get all event categories and load in filter */\r\n    loadEventCategories = async () => {\r\n        let response = await getEventCategoriesAsync();\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n            this.setState({ categoriesInFilter: response.data });\r\n        }\r\n    }\r\n\r\n    /** Get all LnD teams' members and load in filter */\r\n    loadAllLnDTeamMembers = async () => {\r\n        let response = await getAllLnDTeamMembersAsync();\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n            this.setState({ lnDTeamMembersInFilter: response.data });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all events for specified page number\r\n     * @param eventSearchType The type of user events to get\r\n     * @param pageNumber The page number of which events to get\r\n     */\r\n    getEventsAsync = async (eventSearchType: EventSearchType, pageNumber: number = 0) => {\r\n        let response: any;\r\n\r\n        if (eventSearchType === EventSearchType.MandatoryEventsForUser) {\r\n            response = await getEventsAsync(\r\n                this.state.searchText,\r\n                pageNumber,\r\n                EventSearchType.MandatoryEventsForUser,\r\n                this.state.filteredUsers,\r\n                this.state.filteredCategories,\r\n                this.state.sortByFilter);\r\n        }\r\n        else {\r\n            response = await getEventsAsync(this.state.searchText,\r\n                pageNumber,\r\n                EventSearchType.AllPublicPrivateEventsForUser,\r\n                this.state.filteredUsers,\r\n                this.state.filteredCategories,\r\n                this.state.sortByFilter);\r\n        }\r\n\r\n        let result: Array<IEvent> = [];\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n            result = response.data;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets all events for specified page number\r\n     * @param eventSearchType The type of user events to get\r\n     * @param pageNumber The page number of which events to get\r\n     */\r\n    loadEvents = async (eventSearchType: EventSearchType, pageNumber: number = 0) => {\r\n        let events: Array<IEvent> = await this.getEventsAsync(eventSearchType, pageNumber);\r\n\r\n        if (events) {\r\n            switch (eventSearchType) {\r\n                case EventSearchType.MandatoryEventsForUser:\r\n                    if (pageNumber > 0) {\r\n                        let response = [...events];\r\n                        let mandatoryEvents = [...this.state.mandatoryEvents];\r\n\r\n                        let updatedEventResponse = response.filter((event: IEvent) =>\r\n                            mandatoryEvents.findIndex((eventDetails: IEvent) => eventDetails.eventId === event.eventId) === -1\r\n                        );\r\n\r\n                        this.setState({\r\n                            mandatoryEvents: mandatoryEvents.concat(updatedEventResponse),\r\n                            hasMoreEvents: events.length < Constants.lazyLoadEventsCount ? false : true\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.setTotalEventsCount(EventSearchType.MandatoryEventsForUser, events.length);\r\n\r\n                        this.setState({\r\n                            mandatoryEvents: [...events],\r\n                            hasMoreEvents: events.length < Constants.lazyLoadEventsCount ? false : true\r\n                        });\r\n                    }\r\n\r\n                    break;\r\n\r\n                case EventSearchType.AllPublicPrivateEventsForUser:\r\n                    if (pageNumber > 0) {\r\n                        let response = [...events];\r\n                        let allEvents = [...this.state.allEvents];\r\n\r\n                        let updatedEventResponse = response.filter((event: IEvent) =>\r\n                            allEvents.findIndex((eventDetails: IEvent) => eventDetails.eventId === event.eventId) === -1);\r\n\r\n                        this.setState({\r\n                            allEvents: allEvents.concat(updatedEventResponse),\r\n                            hasMoreEvents: events.length < Constants.lazyLoadEventsCount ? false : true\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.setTotalEventsCount(EventSearchType.AllPublicPrivateEventsForUser, events.length);\r\n\r\n                        this.setState({\r\n                            allEvents: [...events],\r\n                            hasMoreEvents: events.length < Constants.lazyLoadEventsCount ? false : true\r\n                        });\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            if (pageNumber === 0) {\r\n                this.setTotalEventsCount(eventSearchType, 0);\r\n\r\n                if (eventSearchType === EventSearchType.MandatoryEventsForUser) {\r\n                    this.setState({ mandatoryEvents: [], hasMoreEvents: false });\r\n                }\r\n                else {\r\n                    this.setState({ allEvents: [], hasMoreEvents: false });\r\n                }\r\n            }\r\n            else {\r\n                this.setState({ hasMoreEvents: false });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the total event count for selected tab\r\n     * @param count The total count to set\r\n     */\r\n    setTotalEventsCount = (eventSeatchType: EventSearchType, count: number) => {\r\n        if ((!this.state.searchText || this.state.searchText.trim() === \"\") && !this.state.filteredCategories?.length && !this.state.filteredUsers?.length) {\r\n            switch (eventSeatchType) {\r\n                case EventSearchType.MandatoryEventsForUser:\r\n                    this.mandatoryEventsCount = count;\r\n                    break;\r\n\r\n                case EventSearchType.AllPublicPrivateEventsForUser:\r\n                    this.allEventsCount = count;\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when click on event\r\n     * @param eventDetails The event details\r\n     */\r\n    onEventClick = (eventDetails: IEvent) => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            url: `${window.location.origin}/register-remove?eventId=${eventDetails.eventId}&teamId=${eventDetails.teamId}&isMobileView=${this.state.isMobileView}`,\r\n            height: 746,\r\n            width: 600,\r\n            title: this.localize(\"eventDetailsStep1\"),\r\n        }, (error:any, result:any) => {\r\n                if (result) {\r\n                    let events: Array<IEvent> = this.state.activeTabIndex === MandatoryEventsTabIndex ? [...this.state.mandatoryEvents] : [...this.state.allEvents];\r\n                    let eventAtIndex: number = events?.findIndex((event: IEvent) => event.eventId === eventDetails.eventId);\r\n\r\n                    let eventToUpdate: IEvent = events[eventAtIndex];\r\n                    eventToUpdate.registeredAttendeesCount = result.type === EventOperationType.Register ? eventToUpdate.registeredAttendeesCount + 1 : eventToUpdate.registeredAttendeesCount - 1;\r\n\r\n                    if (this.state.activeTabIndex === MandatoryEventsTabIndex) {\r\n                        this.setState((prevState: IDiscoverEventsState) => (\r\n                            {\r\n                                mandatoryEvents: events,\r\n                                notification: {\r\n                                    id: prevState.notification.id + 1,\r\n                                    message: result.type === EventOperationType.Register ? this.localize(\"eventRegistrationSuccessfulMessage\") : this.localize(\"eventUnregistrationSuccessfulMessage\"),\r\n                                    type: ActivityStatus.Success\r\n                                }\r\n                            }\r\n                        ));\r\n                    }\r\n                    else {\r\n                        this.setState((prevState: IDiscoverEventsState) => (\r\n                            {\r\n                                allEvents: events,\r\n                                notification: {\r\n                                    id: prevState.notification.id + 1,\r\n                                    message: result.type === EventOperationType.Register ? this.localize(\"eventRegistrationSuccessfulMessage\") : this.localize(\"eventUnregistrationSuccessfulMessage\"),\r\n                                    type: ActivityStatus.Success\r\n                                }\r\n                            }\r\n                        ));\r\n                    }\r\n                }\r\n        });\r\n    }\r\n\r\n    /** Get called when tab selection change */\r\n    onTabIndexChange = (event: MenuProps | undefined) => {\r\n        if (this.timeout) {\r\n            window.clearTimeout(this.timeout);\r\n        }\r\n\r\n        clearMobileFilterLocalStorage();\r\n\r\n        this.setState({ isLoadingEvents: true, activeTabIndex: event?.activeIndex!, searchText: \"\", filteredCategories: \"\", filteredUsers: \"\", sortByFilter: SortBy.Recent, isResetFilter: true }, () => {\r\n            this.timeout = window.setTimeout(async () => {\r\n                if (event) {\r\n                    this.getEvents();\r\n                }\r\n            }, 700);\r\n        });\r\n    }\r\n\r\n    /** Get called when 'Enter' key pressed in 'Search events' textbox */\r\n    onSearchEvents = (event: any) => {\r\n        if (event.keyCode === 13 && this.state.searchText.trim() !== \"\") {\r\n            this.getEvents();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when search text gets changed\r\n     * @param event The input event object\r\n     */\r\n    onSearchTextChange = (event: any) => {\r\n        if (!event.target.value.length) {\r\n            this.setState({ searchText: \"\" }, () => {\r\n                this.getEvents();\r\n            });\r\n        }\r\n        else {\r\n            this.setState({ searchText: event.target.value });\r\n        }\r\n    }\r\n\r\n    /** The event handler to toggle the state of filter bar */\r\n    onFilterBarToggle = () => {\r\n        this.setState((prevState) => ({\r\n            isFilterOpen: !prevState.isFilterOpen,\r\n            isResetFilter: false\r\n        }));\r\n    }\r\n\r\n    /** The event handler called when click on filter icon and mobile mode is ON */\r\n    onMobileFilterButtonClick = () => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            url: `${window.location.origin}/mobile-filter`,\r\n            height: 746,\r\n            width: 600,\r\n            title: this.localize(\"mobileFilterTitle\"),\r\n        }, (error: any, result: any) => {\r\n                if (result && result.isFilterStateChanged) {\r\n                    let filteredCategories = localStorage.getItem(Resources.userEventsMobileFilteredCategoriesLocalStorageKey);\r\n                    let filteredUsers = localStorage.getItem(Resources.userEventsMobileFilteredUsersLocalStorageKey);\r\n                    let sortBy = localStorage.getItem(Resources.userEventsMobileSortByFilterLocalStorageKey);\r\n\r\n                    this.setState({\r\n                        filteredCategories: filteredCategories ? filteredCategories : \"\",\r\n                        filteredUsers: filteredUsers ? filteredUsers : \"\",\r\n                        sortByFilter: sortBy ? sortBy as unknown as number : 0\r\n                    }, () => this.getEvents());\r\n                }\r\n        });\r\n    }\r\n\r\n    /** Event handler called when click on close filter bar which closes it and clears all filters those were applied */\r\n    onFilterBarClose = (isFilterStateChanged: boolean) => {\r\n        this.setState((prevState) => ({\r\n            isFilterOpen: !prevState.isFilterOpen,\r\n            filteredCategories: \"\",\r\n            filteredUsers: \"\",\r\n            sortByFilter: SortBy.Recent,\r\n            isResetFilter: true\r\n        }), () => {\r\n                if (isFilterStateChanged) {\r\n                    this.getEvents();\r\n                }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The event handler called when to get events based on filtered values\r\n     * @param selectedCategories The selected categories in filter bar\r\n     * @param selectedUsers The selected users in filter bar\r\n     * @param sortBy The selected sort by value in filter bar\r\n     */\r\n    onFilterChange = (selectedCategories: Array<string>, selectedUsers: Array<string>, sortBy: number) => {\r\n        let filteredCategories: Array<string> = selectedCategories ? selectedCategories : [];\r\n        let filteredUsers: Array<string> = selectedUsers ? selectedUsers : [];\r\n\r\n        this.setState({\r\n            filteredCategories: filteredCategories.join(\";\"),\r\n            filteredUsers: filteredUsers.join(\";\"),\r\n            sortByFilter: sortBy\r\n        }, () => {\r\n            this.getEvents();\r\n        });\r\n    }\r\n\r\n    /** The event handler called when mobile search box get closed */\r\n    onMobileSearchBoxClose = () => {\r\n        this.setState({ isMobileSearchBoxOpen: !this.state.isMobileSearchBoxOpen });\r\n\r\n        /** If search box do not have the search text, then-\r\n         - No need to call get events as it was already called when user explicitly makes search box empty\r\n         - No need to call get events if user simply open and closes the search box\r\n         */\r\n        if (this.state.searchText?.trim().length) {\r\n            this.setState({ searchText: \"\" }, () => this.getEvents());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get events based on current tab selection\r\n     * @param pageNumber The page number of which events to get\r\n     */\r\n    getEvents = (pageNumber: number = 0) => {\r\n        if (pageNumber === 0) {\r\n            this.setState((prevState: IDiscoverEventsState) =>\r\n                ({ isLoadingEvents: true, hasMoreEvents: false, userEventsContainerKey: prevState.userEventsContainerKey + 1, isResetFilter: false }));\r\n        }\r\n\r\n        switch (this.state.activeTabIndex) {\r\n            case MandatoryEventsTabIndex:\r\n                this.loadEvents(EventSearchType.MandatoryEventsForUser, pageNumber)\r\n                    .finally(() => {\r\n                        this.setState({ isLoadingEvents: false });\r\n                    });\r\n                break;\r\n\r\n            case AllEventsTabIndex:\r\n                this.loadEvents(EventSearchType.AllPublicPrivateEventsForUser, pageNumber)\r\n                    .finally(() => {\r\n                        this.setState({ isLoadingEvents: false });\r\n                    });\r\n                break;\r\n\r\n            default:\r\n                this.setState({ isLoadingEvents: false });\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Formats events count to show on tab items\r\n     * @param count The count of events\r\n     */\r\n    formatEventsCount = (count: number) => {\r\n        if (count === -1) {\r\n            return \"\";\r\n        }\r\n        else if (count < Constants.lazyLoadEventsCount) {\r\n            return `(${count})`;\r\n        }\r\n        else {\r\n            return `(${Constants.lazyLoadEventsCount}+)`;\r\n        }\r\n    }\r\n\r\n    /** Gets tab menu items */\r\n    renderTabMenuItems = () => {\r\n        return (\r\n            [\r\n                {\r\n                    key: \"mandatory-user-events\",\r\n                    content: `${this.localize(\"mandatoryEventsTab\")} ${this.formatEventsCount(this.mandatoryEventsCount)}`\r\n                },\r\n                {\r\n                    key: \"all-user-events\",\r\n                    content: `${this.localize(\"allEventsTab\")} ${this.formatEventsCount(this.allEventsCount)}`\r\n                },\r\n            ]\r\n        );\r\n    }\r\n\r\n    /** Renders user events */\r\n    renderEvents = () => {\r\n        if (this.state.isLoadingEvents) {\r\n            return <Provider><Loader className=\"loader\" /></Provider>;\r\n        }\r\n\r\n        let events: Array<IEvent> = [];\r\n\r\n        if (this.state.activeTabIndex === MandatoryEventsTabIndex) {\r\n            events = [...this.state.mandatoryEvents];\r\n        }\r\n        else if (this.state.activeTabIndex === AllEventsTabIndex) {\r\n            events = [...this.state.allEvents];\r\n        }\r\n\r\n        if (!events || events.length === 0) {\r\n            return (\r\n                <NoContent message={this.localize(\"eventsNotAvailable\")} />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Flex className={this.state.isFilterOpen ? \"filter-open\" : undefined}>\r\n                <UserEvents\r\n                    key={`discover-events-${this.state.userEventsContainerKey}`}\r\n                    events={events}\r\n                    hasMoreEvents={this.state.hasMoreEvents}\r\n                    loadMoreEvents={this.getEvents}\r\n                    onClick={this.onEventClick}\r\n                />\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    renderFilterButtonIcon = () => {\r\n        if ((this.state.filteredCategories && this.state.filteredCategories.length > 0)\r\n            || (this.state.filteredUsers && this.state.filteredUsers.length > 0)) {\r\n            return <Icon iconName=\"FilterSolid\" />\r\n        }\r\n        else {\r\n            return <Icon iconName=\"Filter\" />\r\n        }\r\n    }\r\n\r\n    /** Renders the desktop view */\r\n    renderDesktopView = () => {\r\n        return (\r\n            <Fabric dir={this.props.dir}>\r\n                <Flex column>\r\n                    <Flex space=\"between\" vAlign=\"center\">\r\n                        <TabMenu defaultTabIndex={MandatoryEventsTabIndex} activeTabIndex={this.state.activeTabIndex!} tabItems={this.renderTabMenuItems()} onTabIndexChange={this.onTabIndexChange} />\r\n                        <Flex.Item push={this.props.dir === LanguageDirection.Ltr}>\r\n                            <Flex gap=\"gap.medium\" vAlign=\"center\">\r\n                                <MenuButton\r\n                                    className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-medium\" : \"\"}\r\n                                    trigger={\r\n                                        <Button icon={this.renderFilterButtonIcon()}\r\n                                            content={this.localize(\"filterButtonText\")}\r\n                                            onClick={this.onFilterBarToggle}\r\n                                            data-testid=\"filterbutton\"\r\n                                        />}\r\n                            />\r\n                                <Input\r\n                                    inverted\r\n                                    value={this.state.searchText}\r\n                                    icon={<SearchIcon />}\r\n                                    iconPosition={this.props.dir === LanguageDirection.Rtl ? \"start\" : \"end\"}\r\n                                    placeholder={this.localize(\"searchForEventsPlaceholder\")}\r\n                                    input={{ design: { minWidth: \"20rem\", maxWidth: \"20rem\" } }}\r\n                                    onKeyUp={this.onSearchEvents}\r\n                                    onChange={this.onSearchTextChange}\r\n                                    data-testid=\"search_input\"\r\n                                />\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <FilterBar\r\n                        isVisible={this.state.isFilterOpen}\r\n                        isReset={this.state.isResetFilter}\r\n                        categoryList={this.state.categoriesInFilter}\r\n                        createdByList={this.state.lnDTeamMembersInFilter}\r\n                        onFilterBarCloseClick={this.onFilterBarClose}\r\n                        onFilterChange={this.onFilterChange}\r\n                    />\r\n                </Flex>\r\n                {this.renderEvents()}\r\n            </Fabric>\r\n        );\r\n    }\r\n\r\n    /** Renders the mobile view */\r\n    renderMobileView = () => {\r\n        return (\r\n            <Fabric dir={this.props.dir}>\r\n                <Flex column>\r\n                    <Flex space=\"between\">\r\n                        <TabMenu defaultTabIndex={MandatoryEventsTabIndex} activeTabIndex={this.state.activeTabIndex!} tabItems={this.renderTabMenuItems()} onTabIndexChange={this.onTabIndexChange} />\r\n                        <Flex.Item push>\r\n                            <Flex gap=\"gap.medium\" vAlign=\"center\">\r\n                                <MenuButton\r\n                                    trigger={\r\n                                        <Button\r\n                                            text\r\n                                            iconOnly\r\n                                            icon={this.renderFilterButtonIcon()}\r\n                                            onClick={this.onMobileFilterButtonClick}\r\n                                        />}\r\n                                />\r\n                                <SearchIcon onClick={() => this.setState({ isMobileSearchBoxOpen: !this.state.isMobileSearchBoxOpen })} />\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    {this.state.isMobileSearchBoxOpen && !this.state.isFilterOpen &&\r\n                        <Flex className=\"search-box\" vAlign=\"center\" gap=\"gap.small\">\r\n                            <Input\r\n                                inverted\r\n                                fluid\r\n                                value={this.state.searchText}\r\n                                placeholder={this.localize(\"searchForEventsPlaceholder\")}\r\n                                input={{ design: { minWidth: \"20rem\", width: \"100rem\" } }}\r\n                                onKeyUp={this.onSearchEvents}\r\n                                onChange={this.onSearchTextChange}\r\n                            />\r\n                            <Flex.Item push>\r\n                                <CloseIcon className=\"close-searchbox-icon\" onClick={this.onMobileSearchBoxClose} />\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                    }\r\n                </Flex>\r\n                {!this.state.isFilterOpen && this.renderEvents()}\r\n            </Fabric>\r\n        );\r\n    }\r\n\r\n    /** Renders component */\r\n    render() {\r\n        return (\r\n            <div className=\"container-div\">\r\n                <div className=\"discover-events-container\">\r\n                    {this.state.isMobileView ? this.renderMobileView() : this.renderDesktopView()}\r\n                    <ToastNotification dir={this.props.dir} notification={this.state.notification} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(DiscoverEvents));","// <copyright file=\"my-events.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Button, Flex, Input, Loader, MenuButton, MenuProps, Provider, SearchIcon, CloseIcon } from \"@fluentui/react-northstar\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { SortBy } from \"../../models/sort-by\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { EventSearchType } from \"../../models/event-search-type\";\r\nimport Constants, { ResponseStatus } from \"../../constants/constants\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport UserEvents from \"../user-events-wrapper/user-events-wrapper\";\r\nimport NoContent from \"../no-content-page/no-content-page\"\r\nimport FilterBar from \"../filter-bar/filter-bar\";\r\nimport TabMenu from \"../tab-menu/tab-menu\"\r\nimport { getEventsAsync } from \"../../api/user-events-api\";\r\nimport { Fabric, Icon } from 'office-ui-fabric-react';\r\nimport { getEventCategoriesAsync } from \"../../api/create-event-api\";\r\nimport { getAllLnDTeamMembersAsync } from \"../../api/LnD-team-api\";\r\nimport { ICategory } from \"../../models/ICategory\";\r\nimport { IToastNotification } from \"../../models/IToastNotification\";\r\nimport { ITeamsChannelMember } from \"../../models/ITeamsChannelMember\";\r\nimport ToastNotification from \"../toast-notification/toast-notification\";\r\nimport { ActivityStatus } from \"../../models/activity-status\";\r\nimport { EventOperationType } from \"../../models/event-operation-type\";\r\nimport { clearMobileFilterLocalStorage } from \"../../helpers/mobile-filter-helper\";\r\nimport Resources from \"../../constants/resources\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\nimport \"./my-events.css\";\r\n\r\ninterface IMyEventsState {\r\n    registeredEvents: Array<IEvent>,\r\n    completedEvents: Array<IEvent>,\r\n    hasMoreEvents: boolean,\r\n    userEventsContainerKey: number,\r\n    isLoadingEvents: boolean,\r\n    activeTabIndex: number | string | undefined,\r\n    isFilterOpen: boolean,\r\n    searchText: string,\r\n    filteredCategories: string,\r\n    filteredUsers: string,\r\n    sortByFilter: number,\r\n    categoriesInFilter: Array<ICategory>,\r\n    lnDTeamMembersInFilter: Array<ITeamsChannelMember>,\r\n    isResetFilter: boolean,\r\n    notification: IToastNotification,\r\n    isMobileView: boolean,\r\n    isMobileSearchBoxOpen: boolean\r\n}\r\n\r\ninterface IMyEventsProps extends WithTranslation, IWithContext {\r\n}\r\n\r\n/** The tab index for 'Registered events' tab */\r\nconst RegisteredEventsTabIndex: number = 0;\r\n\r\n/** The tab index for 'Completed events' */\r\nconst CompletedEventsTabIndex: number = 1;\r\n\r\n/** Renders all events for user created by LnD team */\r\nclass MyEvents extends React.Component<IMyEventsProps, IMyEventsState> {\r\n    teamId: string;\r\n    localize: TFunction;\r\n    searchText: string;\r\n    timeout: number | null;\r\n    registeredEventsCount: number;\r\n    completedEventsCount: number;\r\n\r\n    constructor(props: IMyEventsProps) {\r\n        super(props);\r\n\r\n        this.teamId = \"\";\r\n        this.searchText = \"\";\r\n        this.localize = this.props.t;\r\n        this.timeout = null;\r\n        this.registeredEventsCount = -1;\r\n        this.completedEventsCount = -1;\r\n\r\n        this.state = {\r\n            registeredEvents: [],\r\n            completedEvents: [],\r\n            hasMoreEvents: false,\r\n            userEventsContainerKey: 0,\r\n            isLoadingEvents: true,\r\n            activeTabIndex: RegisteredEventsTabIndex,\r\n            isFilterOpen: false,\r\n            searchText: \"\",\r\n            filteredCategories: \"\",\r\n            filteredUsers: \"\",\r\n            sortByFilter: SortBy.Recent,\r\n            categoriesInFilter: [],\r\n            lnDTeamMembersInFilter: [],\r\n            isResetFilter: false,\r\n            notification: { id: 0, message: \"\", type: ActivityStatus.None },\r\n            isMobileView: false,\r\n            isMobileSearchBoxOpen: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.resize.bind(this));\r\n        this.resize();\r\n\r\n        this.loadEventCategories();\r\n        this.loadAllLnDTeamMembers();\r\n\r\n        clearMobileFilterLocalStorage();\r\n\r\n        let registeredEvents = this.getEventsAsync(EventSearchType.RegisteredEventsForUser);\r\n        let completedEvents = this.getEventsAsync(EventSearchType.CompletedEventsForUser);\r\n\r\n        Promise.all([registeredEvents, completedEvents])\r\n            .then((results) => {\r\n                this.setTotalEventsCount(EventSearchType.RegisteredEventsForUser, results[0].length);\r\n                this.setTotalEventsCount(EventSearchType.CompletedEventsForUser, results[1].length);\r\n            })\r\n            .finally(() => {\r\n                this.getEvents();\r\n            });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.resize.bind(this));\r\n    }\r\n\r\n    resize = () => {\r\n        this.setState({ isMobileView: window.innerWidth <= Constants.maxWidthForMobileView });\r\n    }\r\n\r\n    /** Get all event categories and load in filter */\r\n    loadEventCategories = async () => {\r\n        let response = await getEventCategoriesAsync();\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n            this.setState({ categoriesInFilter: response.data });\r\n        }\r\n    }\r\n\r\n    /** Get all LnD teams' members and load in filter */\r\n    loadAllLnDTeamMembers = async () => {\r\n        let response = await getAllLnDTeamMembersAsync();\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n            this.setState({ lnDTeamMembersInFilter: response.data });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all events for specified page number\r\n     * @param eventSearchType The type of user events to get\r\n     * @param pageNumber The page number of which events to get\r\n     */\r\n    getEventsAsync = async (eventSearchType: EventSearchType, pageNumber: number = 0) => {\r\n        let response: any;\r\n\r\n        if (eventSearchType === EventSearchType.RegisteredEventsForUser) {\r\n            response = await getEventsAsync(\r\n                this.state.searchText,\r\n                pageNumber,\r\n                EventSearchType.RegisteredEventsForUser,\r\n                this.state.filteredUsers,\r\n                this.state.filteredCategories,\r\n                this.state.sortByFilter);\r\n        }\r\n        else {\r\n            response = await getEventsAsync(\r\n                this.state.searchText,\r\n                pageNumber,\r\n                EventSearchType.CompletedEventsForUser,\r\n                this.state.filteredUsers,\r\n                this.state.filteredCategories,\r\n                this.state.sortByFilter);\r\n        }\r\n\r\n        let result: Array<IEvent> = [];\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n            result = response.data;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets and loads the events details on UI \r\n     * @param eventSearchType The type of user events to load\r\n     * @param pageNumber The page number of which events to get\r\n     */\r\n    loadEvents = async (eventSearchType: EventSearchType, pageNumber: number = 0) => {\r\n        let events: Array<IEvent> = await this.getEventsAsync(eventSearchType, pageNumber);\r\n\r\n        if (events) {\r\n            switch (eventSearchType) {\r\n                case EventSearchType.RegisteredEventsForUser:\r\n                    if (pageNumber > 0) {\r\n                        let response = [...events];\r\n                        let registeredEvents = [...this.state.registeredEvents];\r\n\r\n                        let updatedEventResponse = response.filter((event: IEvent) =>\r\n                            registeredEvents.findIndex((eventDetails: IEvent) => eventDetails.eventId === event.eventId) === -1);\r\n\r\n                        this.setState({\r\n                            registeredEvents: registeredEvents.concat(updatedEventResponse),\r\n                            hasMoreEvents: events.length < Constants.lazyLoadEventsCount ? false : true\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.setTotalEventsCount(EventSearchType.RegisteredEventsForUser, events.length);\r\n\r\n                        this.setState({\r\n                            registeredEvents: [...events],\r\n                            hasMoreEvents: events.length < Constants.lazyLoadEventsCount ? false : true\r\n                        });\r\n                    }\r\n\r\n                    break;\r\n\r\n                case EventSearchType.CompletedEventsForUser:\r\n                    if (pageNumber > 0) {\r\n                        let response = [...events];\r\n                        let completedEvents = [...this.state.completedEvents];\r\n\r\n                        let updatedEventResponse = response.filter((event: IEvent) =>\r\n                            completedEvents.findIndex((eventDetails: IEvent) => eventDetails.eventId === event.eventId) === -1);\r\n\r\n                        this.setState({\r\n                            completedEvents: completedEvents.concat(updatedEventResponse),\r\n                            hasMoreEvents: events.length < Constants.lazyLoadEventsCount ? false : true\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.setTotalEventsCount(EventSearchType.CompletedEventsForUser, events.length);\r\n\r\n                        this.setState({\r\n                            completedEvents: [...events],\r\n                            hasMoreEvents: events.length < Constants.lazyLoadEventsCount ? false : true\r\n                        });\r\n                    }\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            if (pageNumber === 0) {\r\n                this.setTotalEventsCount(eventSearchType, 0);\r\n\r\n                if (eventSearchType === EventSearchType.RegisteredEventsForUser) {\r\n                    this.setState({ registeredEvents: [], hasMoreEvents: false });\r\n                }\r\n                else {\r\n                    this.setState({ completedEvents: [], hasMoreEvents: false });\r\n                }\r\n            }\r\n            else {\r\n                this.setState({ hasMoreEvents: false });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the total event count for selected tab\r\n     * @param count The total count to set\r\n     */\r\n    setTotalEventsCount = (eventSeatchType: EventSearchType, count: number) => {\r\n        if ((!this.state.searchText || this.state.searchText.trim() === \"\") && !this.state.filteredCategories?.length && !this.state.filteredUsers?.length) {\r\n            switch (eventSeatchType) {\r\n                case EventSearchType.RegisteredEventsForUser:\r\n                    this.registeredEventsCount = count;\r\n                    break;\r\n\r\n                case EventSearchType.CompletedEventsForUser:\r\n                    this.completedEventsCount = count;\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when click on event\r\n     * @param eventDetails The event details\r\n     */\r\n    onEventClick = (eventDetails: IEvent) => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            url: `${window.location.origin}/register-remove?eventId=${eventDetails.eventId}&teamId=${eventDetails.teamId}&isMobileView=${this.state.isMobileView}`,\r\n            height: 746,\r\n            width: 600,\r\n            title: this.localize(\"eventDetailsStep1\"),\r\n        }, (error: any, result: any) => {\r\n                if (result && result.isSuccess) {\r\n                    let events: Array<IEvent> = this.state.registeredEvents ? [...this.state.registeredEvents] : [];\r\n\r\n                    let updatedRegisteredEvents: Array<IEvent> = events.filter((event: IEvent) => event.eventId !== eventDetails.eventId);\r\n                    this.registeredEventsCount -= 1;\r\n\r\n                    this.setState((prevState: IMyEventsState) => (\r\n                        {\r\n                            registeredEvents: updatedRegisteredEvents,\r\n                            notification: {\r\n                                id: prevState.notification.id + 1,\r\n                                message: result.type === EventOperationType.Register ? this.localize(\"eventRegistrationSuccessfulMessage\") : this.localize(\"eventUnregistrationSuccessfulMessage\"),\r\n                                type: ActivityStatus.Success\r\n                            }\r\n                        }\r\n                    ));\r\n                }\r\n        });\r\n    }\r\n\r\n    /** Get called when tab selection change */\r\n    onTabIndexChange = (event: MenuProps | undefined) => {\r\n        if (this.timeout) {\r\n            window.clearTimeout(this.timeout);\r\n        }\r\n\r\n        clearMobileFilterLocalStorage();\r\n\r\n        this.setState({ isLoadingEvents: true, activeTabIndex: event?.activeIndex!, searchText: \"\", filteredCategories: \"\", filteredUsers: \"\", sortByFilter: SortBy.Recent, isResetFilter: true }, () => {\r\n            this.timeout = window.setTimeout(async () => {\r\n                if (event) {\r\n                    this.getEvents();\r\n                }\r\n            }, 700);\r\n        });\r\n    }\r\n\r\n    /** Get called when 'Enter' key pressed in 'Search events' textbox */\r\n    onSearchEvents = (event: any) => {\r\n        if (event.keyCode === 13 && this.state.searchText.trim() !== \"\") {\r\n            this.getEvents();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when search text gets changed\r\n     * @param event The input event object\r\n     */\r\n    onSearchTextChange = (event: any) => {\r\n        if (!event.target.value.length) {\r\n            this.setState({ searchText: \"\" }, () => {\r\n                this.getEvents();\r\n            });\r\n        }\r\n        else {\r\n            this.setState({ searchText: event.target.value });\r\n        }\r\n    }\r\n\r\n    /** The event handler to toggle the state of filter bar */\r\n    onFilterBarToggle = () => {\r\n        this.setState((prevState) => ({\r\n            isFilterOpen: !prevState.isFilterOpen,\r\n            isResetFilter: false\r\n        }));\r\n    }\r\n\r\n    /** The event handler called when click on filter icon and mobile mode is ON */\r\n    onMobileFilterButtonClick = () => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            url: `${window.location.origin}/mobile-filter`,\r\n            height: 746,\r\n            width: 600,\r\n            title: this.localize(\"mobileFilterTitle\"),\r\n        }, (error: any, result: any) => {\r\n            if (result && result.isFilterStateChanged) {\r\n                let filteredCategories = localStorage.getItem(Resources.userEventsMobileFilteredCategoriesLocalStorageKey);\r\n                let filteredUsers = localStorage.getItem(Resources.userEventsMobileFilteredUsersLocalStorageKey);\r\n                let sortBy = localStorage.getItem(Resources.userEventsMobileSortByFilterLocalStorageKey);\r\n\r\n                this.setState({\r\n                    filteredCategories: filteredCategories ? filteredCategories : \"\",\r\n                    filteredUsers: filteredUsers ? filteredUsers : \"\",\r\n                    sortByFilter: sortBy ? sortBy as unknown as number : 0\r\n                }, () => this.getEvents());\r\n            }\r\n        });\r\n    }\r\n\r\n    /** Event handler called when click on close filter bar which closes it and clears all filters those were applied */\r\n    onFilterBarClose = (isFilterStateChanged: boolean) => {\r\n        this.setState((prevState) => ({\r\n            isFilterOpen: !prevState.isFilterOpen,\r\n            filteredCategories: \"\",\r\n            filteredUsers: \"\",\r\n            sortByFilter: SortBy.Recent,\r\n            isResetFilter: true\r\n        }), () => {\r\n                if (isFilterStateChanged) {\r\n                    this.getEvents();\r\n                }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The event handler called when to get events based on filtered values\r\n     * @param selectedCategories The selected categories in filter bar\r\n     * @param selectedUsers The selected users in filter bar\r\n     * @param sortBy The selected sort by value in filter bar\r\n     */\r\n    onFilterChange = (selectedCategories: Array<string>, selectedUsers: Array<string>, sortBy: number) => {\r\n        let filteredCategories: Array<string> = selectedCategories ? selectedCategories : [];\r\n        let filteredUsers: Array<string> = selectedUsers ? selectedUsers : [];\r\n\r\n        this.setState({\r\n            filteredCategories: filteredCategories.join(\";\"),\r\n            filteredUsers: filteredUsers.join(\";\"),\r\n            sortByFilter: sortBy\r\n        }, () => {\r\n            this.getEvents();\r\n        });\r\n    }\r\n\r\n    /** The event handler called when mobile search box get closed */\r\n    onMobileSearchBoxClose = () => {\r\n        this.setState({ isMobileSearchBoxOpen: !this.state.isMobileSearchBoxOpen });\r\n\r\n        /** If search box do not have the search text, then-\r\n         - No need to call get events as it was already called when user explicitly makes search box empty\r\n         - No need to call get events if user simply open and closes the search box\r\n         */\r\n        if (this.state.searchText?.trim().length) {\r\n            this.setState({ searchText: \"\" }, () => this.getEvents());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get events based on current tab selection\r\n     * @param pageNumber The page number of which events to get\r\n     */\r\n    getEvents = (pageNumber: number = 0) => {\r\n        if (pageNumber === 0) {\r\n            this.setState((prevState: IMyEventsState) =>\r\n                ({ isLoadingEvents: true, hasMoreEvents: false, userEventsContainerKey: prevState.userEventsContainerKey + 1, isResetFilter: false }));\r\n        }\r\n\r\n        switch (this.state.activeTabIndex) {\r\n            case RegisteredEventsTabIndex:\r\n                this.loadEvents(EventSearchType.RegisteredEventsForUser, pageNumber)\r\n                    .finally(() => {\r\n                        this.setState({ isLoadingEvents: false });\r\n                    });\r\n                break;\r\n\r\n            case CompletedEventsTabIndex:\r\n                this.loadEvents(EventSearchType.CompletedEventsForUser, pageNumber)\r\n                    .finally(() => {\r\n                        this.setState({ isLoadingEvents: false });\r\n                    });\r\n                break;\r\n\r\n            default:\r\n                this.setState({ isLoadingEvents: false });\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Formats events count to show on tab items\r\n     * @param count The count of events\r\n     */\r\n    formatEventsCount = (count: number) => {\r\n        if (count === -1) {\r\n            return \"\";\r\n        }\r\n        else if (count < Constants.lazyLoadEventsCount) {\r\n            return `(${count})`;\r\n        }\r\n        else {\r\n            return `(${Constants.lazyLoadEventsCount}+)`;\r\n        }\r\n    }\r\n\r\n    /** Gets tab menu items */\r\n    renderTabMenuItems = () => {\r\n        return (\r\n            [\r\n                {\r\n                    key: \"registered-user-events\",\r\n                    content: `${this.localize(\"registeredEventsTab\")} ${this.formatEventsCount(this.registeredEventsCount)}`\r\n                },\r\n                {\r\n                    key: \"completed-user-events\",\r\n                    content: `${this.localize(\"completedEventsTab\")} ${this.formatEventsCount(this.completedEventsCount)}`\r\n                },\r\n            ]\r\n        );\r\n    }\r\n\r\n    /** Renders user events */\r\n    renderEvents = () => {\r\n        if (this.state.isLoadingEvents) {\r\n            return <Provider><Loader className=\"loader\" /></Provider>;\r\n        }\r\n\r\n        let events: Array<IEvent> = [];\r\n\r\n        if (this.state.activeTabIndex === RegisteredEventsTabIndex) {\r\n            events = [...this.state.registeredEvents];\r\n        }\r\n        else if (this.state.activeTabIndex === CompletedEventsTabIndex) {\r\n            events = [...this.state.completedEvents];\r\n        }\r\n\r\n        if (!events || events.length === 0) {\r\n            return (\r\n                <NoContent message={this.localize(\"eventsNotAvailable\")} />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Flex className={this.state.isFilterOpen ? \"filter-open\" : undefined}>\r\n                <UserEvents\r\n                    key={`my-events-${this.state.userEventsContainerKey}`}\r\n                    events={events}\r\n                    hasMoreEvents={this.state.hasMoreEvents}\r\n                    loadMoreEvents={this.getEvents}\r\n                    onClick={this.onEventClick}\r\n                />\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    renderFilterButtonIcon = () => {\r\n        if ((this.state.filteredCategories && this.state.filteredCategories.length > 0)\r\n            || (this.state.filteredUsers && this.state.filteredUsers.length > 0)) {\r\n            return <Icon iconName=\"FilterSolid\" />\r\n        }\r\n        else {\r\n            return <Icon iconName=\"Filter\" />\r\n        }\r\n    }\r\n\r\n    /** Renders the desktop view */\r\n    renderDesktopView = () => {\r\n        return (\r\n            <Fabric dir={this.props.dir}>\r\n                <Flex column>\r\n                    <Flex space=\"between\" vAlign=\"center\">\r\n                        <TabMenu defaultTabIndex={RegisteredEventsTabIndex} activeTabIndex={this.state.activeTabIndex!} tabItems={this.renderTabMenuItems()} onTabIndexChange={this.onTabIndexChange} />\r\n                        <Flex.Item push={this.props.dir === LanguageDirection.Ltr}>\r\n                            <Flex gap=\"gap.medium\" vAlign=\"center\">\r\n                                <MenuButton\r\n                                    className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-medium\" : \"\"}\r\n                                    trigger={\r\n                                        <Button icon={this.renderFilterButtonIcon()}\r\n                                            content={this.localize(\"filterButtonText\")}\r\n                                            onClick={this.onFilterBarToggle}\r\n                                            data-testid=\"filterbutton\"\r\n                                        />}\r\n                                />\r\n                                <Input\r\n                                    inverted\r\n                                    value={this.state.searchText}\r\n                                    icon={<SearchIcon />}\r\n                                    iconPosition={this.props.dir === LanguageDirection.Rtl ? \"start\" : \"end\"}\r\n                                    placeholder={this.localize(\"searchForEventsPlaceholder\")}\r\n                                    input={{ design: { minWidth: \"20rem\", maxWidth: \"20rem\" } }}\r\n                                    onKeyUp={this.onSearchEvents}\r\n                                    onChange={this.onSearchTextChange}\r\n                                    data-testid=\"search_input\"\r\n                                />\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <FilterBar\r\n                        isVisible={this.state.isFilterOpen}\r\n                        isReset={this.state.isResetFilter}\r\n                        categoryList={this.state.categoriesInFilter}\r\n                        createdByList={this.state.lnDTeamMembersInFilter}\r\n                        onFilterBarCloseClick={this.onFilterBarClose}\r\n                        onFilterChange={this.onFilterChange}\r\n                    />\r\n                </Flex>\r\n                {this.renderEvents()}\r\n            </Fabric>\r\n        );\r\n    }\r\n\r\n    /** Renders the mobile view */\r\n    renderMobileView = () => {\r\n        return (\r\n            <Fabric dir={this.props.dir}>\r\n                <Flex column>\r\n                    <Flex space=\"between\">\r\n                        <TabMenu defaultTabIndex={RegisteredEventsTabIndex} activeTabIndex={this.state.activeTabIndex!} tabItems={this.renderTabMenuItems()} onTabIndexChange={this.onTabIndexChange} />\r\n                        <Flex.Item push>\r\n                            <Flex gap=\"gap.medium\" vAlign=\"center\">\r\n                                <MenuButton\r\n                                    trigger={\r\n                                        <Button\r\n                                            text\r\n                                            iconOnly\r\n                                            icon={this.renderFilterButtonIcon()}\r\n                                            onClick={this.onMobileFilterButtonClick}\r\n                                        />\r\n                                    }\r\n                                />\r\n                                <SearchIcon onClick={() => this.setState({ isMobileSearchBoxOpen: !this.state.isMobileSearchBoxOpen })} />\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    {this.state.isMobileSearchBoxOpen && !this.state.isFilterOpen &&\r\n                        <Flex className=\"search-box\" vAlign=\"center\" gap=\"gap.small\">\r\n                            <Input\r\n                                inverted\r\n                                fluid\r\n                                value={this.state.searchText}\r\n                                placeholder={this.localize(\"searchForEventsPlaceholder\")}\r\n                                input={{ design: { minWidth: \"20rem\", width: \"100rem\" } }}\r\n                                onKeyUp={this.onSearchEvents}\r\n                                onChange={this.onSearchTextChange}\r\n                            />\r\n                            <Flex.Item push>\r\n                                <CloseIcon className=\"close-searchbox-icon\" onClick={this.onMobileSearchBoxClose} />\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                    }\r\n                </Flex>\r\n                {!this.state.isFilterOpen && this.renderEvents()}\r\n            </Fabric>\r\n        );\r\n    }\r\n\r\n    /** Renders component */\r\n    render() {\r\n        return (\r\n            <div className=\"container-div\">\r\n                <div className=\"my-events-container\">\r\n                    {this.state.isMobileView ? this.renderMobileView() : this.renderDesktopView()}\r\n                    <ToastNotification dir={this.props.dir} notification={this.state.notification} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(MyEvents));","// <copyright file=\"accordion-menu-checkboxes-content.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Input, Button, Provider, Divider, Checkbox } from \"@fluentui/react-northstar\";\r\nimport { SearchIcon } from \"@fluentui/react-icons-northstar\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ICheckBoxItem } from \"../../../models/ICheckBoxItem\";\r\n\r\nimport \"./accordion-menu.css\";\r\n\r\ninterface IAccordionMenuCheckboxesContentProps {\r\n    isOpen: boolean,\r\n    showSearchBar: boolean,\r\n    content: any,\r\n    disableClear: boolean,\r\n    selectedCount: number;\r\n    onCheckboxStateChange: (checkboxState: Array<ICheckBoxItem>) => void\r\n}\r\n\r\nconst MaxItemsToShowInFilter: number = 50;\r\n\r\nconst AccordionCheckboxesContent: React.FunctionComponent<IAccordionMenuCheckboxesContentProps> = props => {\r\n    const localize = useTranslation().t;\r\n    const [data, setCheckbox] = React.useState({ checkboxes: props.content.checkboxes });\r\n    const [filteredCheckboxes, setFilteredCheckboxes] = React.useState(props.content.checkboxes);\r\n    const [searchedString, setSearchString] = React.useState(\"\");\r\n    let [disableClear, setdisableClear] = React.useState(true);\r\n    let [checkBoxClicked, setcheckBoxClicked] = React.useState(false);\r\n\r\n    React.useEffect(() => {\r\n        setFilterCheckboxes(props.content.checkboxes);\r\n    }, []);\r\n\r\n    /**\r\n    *Updates particular checkbox's isChecked state and passes changed state back to parent component.\r\n    *@param key Unique key for checkbox which needs to be updated\r\n    *@param checked Boolean indicating checkbox current value\r\n    */\r\n    const onCheckboxValueChange = (key: string, checked: boolean) => {\r\n        setcheckBoxClicked(true);\r\n\r\n        let checkboxList = data.checkboxes.map((checkbox: ICheckBoxItem) => {\r\n            if (checkbox.key === key) {\r\n                checkbox.isChecked = checked;\r\n            }\r\n            return checkbox;\r\n        });\r\n\r\n        let checkCount: number = checkboxList.reduce((accumulator: number, checkbox: ICheckBoxItem) => {\r\n            return checkbox.isChecked ? accumulator + 1 : accumulator;\r\n        }, 0);\r\n\r\n        setdisableClear(checkCount <= 0);\r\n\r\n        let filteredItems = checkboxList;\r\n\r\n        if (searchedString.trim().length) {\r\n            filteredItems = checkboxList.filter((item: ICheckBoxItem) => {\r\n                return item.title.toLowerCase().includes(searchedString.toLowerCase());\r\n            });\r\n        }\r\n\r\n        setFilterCheckboxes(filteredItems);\r\n        props.onCheckboxStateChange(checkboxList);\r\n    }\r\n\r\n    const setFilterCheckboxes = (filterItems: any) => {\r\n        if (!filterItems) {\r\n            filterItems = [];\r\n        }\r\n\r\n        let items = [...filterItems];\r\n        let itemsToRender = items.slice(0, MaxItemsToShowInFilter);\r\n        setFilteredCheckboxes(itemsToRender);\r\n    }\r\n\r\n    /**\r\n    *Sets all checkbox's isChecked to false to unselect all and passes changed state back to parent component.\r\n    */\r\n    const deSelectAll = () => {\r\n        let checkboxList = data.checkboxes.map((checkbox: ICheckBoxItem) => {\r\n            checkbox.isChecked = false\r\n            return checkbox;\r\n        });\r\n\r\n        let filteredItems = checkboxList;\r\n\r\n        if (searchedString.trim().length) {\r\n            filteredItems = checkboxList.filter((item: ICheckBoxItem) => {\r\n                return item.title.toLowerCase().includes(searchedString.toLowerCase());\r\n            });\r\n        }\r\n\r\n        setFilterCheckboxes(filteredItems);\r\n        props.onCheckboxStateChange(checkboxList);\r\n        setdisableClear(true);\r\n        setcheckBoxClicked(true);\r\n    }\r\n\r\n    const onSearchChange = (text: string) => {\r\n        setSearchString(text);\r\n\r\n        if (text.trim().length > 0) {\r\n            let filteredItems = data.checkboxes.filter((item: ICheckBoxItem) => {\r\n                return item.title.toLowerCase().includes(text.toLowerCase()) === true;\r\n            });\r\n\r\n            setFilterCheckboxes(filteredItems);\r\n        }\r\n        else {\r\n            setFilterCheckboxes(data.checkboxes);\r\n        }\r\n    }\r\n\r\n    const getSelectedCountString = () => {\r\n            return props.selectedCount.toString();\r\n    }\r\n\r\n    return (\r\n        props.isOpen ? \r\n            <Provider>\r\n                <div className=\"accordion-content-items-wrapper\">\r\n                    {props.showSearchBar && <div className=\"accordion-content-items-headerfooter\">\r\n                        <Input icon={<SearchIcon />} placeholder={localize(\"searchPlaceholder\")} value={searchedString} fluid onChange={(event: any) => onSearchChange(event.target.value)} />\r\n                    </div>}\r\n                    <Divider className=\"accordion-filter-popup-menu-divider\" />\r\n                    <div className=\"accordion-content-items-headerfooter\">\r\n                        <Flex gap=\"gap.small\" vAlign=\"center\" hAlign=\"end\">\r\n                            <Flex.Item push>\r\n                                <div></div>\r\n                            </Flex.Item>\r\n                            <Button disabled={checkBoxClicked ? disableClear : props.disableClear} className={props.selectedCount === 0 ? \"clear-button \" : \"clear-button enable-clear\"} size=\"small\" text onClick={() => deSelectAll()} content={props.selectedCount > 0 ? localize(\"clear\") + \"(\" + getSelectedCountString() + \")\" : localize(\"clear\")} />\r\n                        </Flex>\r\n                    </div>\r\n                    <div className=\"accordion-content-items-body\">\r\n                        {\r\n                            filteredCheckboxes.map((checkbox: ICheckBoxItem) => {\r\n                                if (checkbox.title.trim().length) {\r\n                                    return (\r\n                                        <Flex gap=\"gap.small\">\r\n                                            <Checkbox className=\"checkbox-wrapper\" label={checkbox.checkboxLabel} key={checkbox.key} checked={checkbox.isChecked} onChange={(key, data: any) => onCheckboxValueChange(checkbox.key, data.checked)} />\r\n                                        </Flex>\r\n                                    );\r\n                                }\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </Provider>\r\n            : <></>\r\n    );\r\n}\r\n\r\nexport default React.memo(AccordionCheckboxesContent);","// <copyright file=\"popup-menu-radiogroup-content.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, RadioGroup } from \"@fluentui/react-northstar\";\r\n\r\nimport \"./accordion-menu.css\";\r\n\r\ninterface IAccordionMenuRadiogroupContentProps {\r\n    isOpen: boolean,\r\n    content: any,\r\n    selectedValue: number,\r\n    onRadiogroupStateChange: (selectedValue: number) => void\r\n}\r\n\r\nconst AccordionRadiogroupContent: React.FunctionComponent<IAccordionMenuRadiogroupContentProps> = props => {\r\n\r\n    return (\r\n        props.isOpen ?\r\n        <>\r\n            <div className=\"accordion-content-items-wrapper radio-popup-content\">\r\n                <div className=\"accordion-content-items-body\">\r\n                    {   \r\n                        <Flex gap=\"gap.small\">\r\n\t\t\t\t            <RadioGroup\r\n\t\t\t\t\t            defaultCheckedValue={props.selectedValue}\r\n\t\t\t\t\t            vertical\r\n\t\t\t\t\t            items={props.content.radioGroupItems}\r\n\t\t\t\t\t            onCheckedValueChange={(event, data: any) => props.onRadiogroupStateChange(data.value)}\r\n\t\t\t\t            />\r\n\t\t\t            </Flex>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n        : <></>\r\n    );\r\n}\r\n\r\nexport default React.memo(AccordionRadiogroupContent);","// <copyright file=\"accordion-menu-wrapper.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Text, Flex } from \"@fluentui/react-northstar\";\r\nimport { ChevronDownIcon } from \"@fluentui/react-icons-northstar\";\r\nimport AccordionCheckboxesContent from \"./accordion-menu-checkboxes-content\";\r\nimport AccordionRadiogroupContent from \"./accordion-menu-radiogroup-content\";\r\n\r\nimport \"./accordion-menu.css\";\r\n\r\ninterface IAccordionMenuWrapperProps {\r\n    isFilterOpen: boolean,\r\n    checkboxes?: Array<any>,\r\n    radioGroup?: Array<any>,\r\n    title: string,\r\n    selectedSortBy?: number,\r\n    showSearchBar?: boolean,\r\n    selectedCount: number;\r\n    onCheckboxStateChange: (typeState: Array<any>) => void,\r\n    onRadiogroupStateChange: (selectedValue: number) => void,\r\n    onFilterOpenChange: (isOpen: boolean) => void\r\n}\r\n\r\nconst AccordionMenuWrapper: React.FunctionComponent<IAccordionMenuWrapperProps> = props => {\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const onAccordionOpenChange = () => {\r\n        setOpen(!open);\r\n        props.onFilterOpenChange(!open);\r\n    }\r\n\r\n    if (props.checkboxes) {\r\n        return (\r\n            <div className=\"accordion-container\">\r\n                <div className=\"accordion-main\" onClick={() => onAccordionOpenChange()}>\r\n                    <Flex><Flex.Item><Text content={props.title} /></Flex.Item><Flex.Item push><ChevronDownIcon /></Flex.Item></Flex>\r\n                </div>\r\n                <AccordionCheckboxesContent isOpen={props.isFilterOpen} disableClear={props.selectedCount === 0} selectedCount={props.selectedCount} showSearchBar={props.showSearchBar!} content={{ checkboxes: props.checkboxes, title: props.title }} onCheckboxStateChange={props.onCheckboxStateChange} />\r\n            </div>\r\n        );\r\n    }\r\n    else if (props.radioGroup) {\r\n        return (\r\n            <div className=\"accordion-container\">\r\n                <div className=\"accordion-main\" onClick={() => onAccordionOpenChange()}>\r\n                    <Flex><Flex.Item><Text content={props.title} /></Flex.Item><Flex.Item push><ChevronDownIcon /></Flex.Item></Flex>\r\n                </div>\r\n                <AccordionRadiogroupContent isOpen={props.isFilterOpen} selectedValue={props.selectedSortBy!} content={{ radioGroupItems: props.radioGroup, title: props.title }} onRadiogroupStateChange={props.onRadiogroupStateChange} />\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        return (<></>);\r\n    }\r\n}\r\n\r\nexport default React.memo(AccordionMenuWrapper);","// <copyright file=\"filter-bar.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Text, Provider, Loader, Button } from \"@fluentui/react-northstar\";\r\nimport { initializeIcons } from \"@uifabric/icons\";\r\nimport AccordionMenuWrapper from \"../../components/common/accordion-menu/accordion-menu-wrapper\";\r\nimport { ICheckBoxItem } from \"../../models/ICheckBoxItem\";\r\nimport { IRadioGroupItem } from \"../../models/IRadioGroupItem\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport { TFunction } from \"i18next\";\r\nimport { getLocalizedSortBy } from \"../../helpers/localized-constants\";\r\nimport { ICategory } from \"../../models/ICategory\";\r\nimport { ITeamsChannelMember } from \"../../models/ITeamsChannelMember\";\r\nimport Resources from \"../../constants/resources\";\r\nimport { ResponseStatus } from \"../../constants/constants\";\r\nimport { getEventCategoriesAsync } from \"../../api/create-event-api\";\r\nimport { getAllLnDTeamMembersAsync } from \"../../api/LnD-team-api\";\r\nimport { SortBy } from \"../../models/sort-by\";\r\n\r\nimport \"./mobile-filter-bar.css\";\r\n\r\ninterface IMobileFilterBarState {\r\n    categoryList: Array<ICheckBoxItem>;\r\n    createdByList: Array<ICheckBoxItem>;\r\n    selectedSortBy: number;\r\n    searchText: string;\r\n    screenWidth: number;\r\n    createdBySelectedCount: number;\r\n    categorySelectedCount: number;\r\n    isLoading: boolean;\r\n    isCategoriesFilterOpen: boolean,\r\n    isCreatedByFilterOpen: boolean,\r\n    isSortByFilterOpen: boolean\r\n}\r\n\r\ninterface IMobileFilterBarProps extends WithTranslation, IWithContext  {\r\n}\r\n\r\ninterface IPostType {\r\n    name: string;\r\n    id: number;\r\n    color: string;\r\n}\r\n\r\nclass MobileFilterBar extends React.Component<IMobileFilterBarProps, IMobileFilterBarState> {\r\n    localize: TFunction;\r\n    readonly sortByList: Array<IRadioGroupItem> = [];\r\n    isFilterStateChanged: boolean;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        initializeIcons();\r\n        this.localize = this.props.t;\r\n        this.sortByList = getLocalizedSortBy(this.localize).map((sortBy: IPostType) => { return { key: sortBy.id, label: sortBy.name, value: sortBy.id, name: sortBy.name } });\r\n        this.isFilterStateChanged = false;\r\n\r\n        this.state = {\r\n            selectedSortBy: this.sortByList[0].value,\r\n            categoryList: [],\r\n            createdByList: [],\r\n            searchText: \"\",\r\n            screenWidth: 800,\r\n            createdBySelectedCount: 0,\r\n            categorySelectedCount: 0,\r\n            isLoading: true,\r\n            isCategoriesFilterOpen: false,\r\n            isCreatedByFilterOpen: false,\r\n            isSortByFilterOpen: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadFilterItems();\r\n\r\n        window.addEventListener(\"resize\", this.resize.bind(this));\r\n        this.resize();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.resize.bind(this));\r\n    }\r\n\r\n    /** Get all event categories and load in filter */\r\n    loadEventCategories = async () => {\r\n        let response = await getEventCategoriesAsync();\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n            if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n                this.setState({\r\n                    categoryList: response.data.map((value: ICategory) => {\r\n                        return { isChecked: false, key: value.categoryId, title: value.name, checkboxLabel: <Text content={value.name} /> };\r\n                    })\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Get all LnD teams' members and load in filter */\r\n    loadAllLnDTeamMembers = async () => {\r\n        let response = await getAllLnDTeamMembersAsync();\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n            if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n                this.setState({\r\n                    createdByList: response.data.map((value: ITeamsChannelMember) => {\r\n                        return { isChecked: false, key: value.aadObjectId, title: value.name, checkboxLabel: <Text content={value.name} /> };\r\n                    })\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Populates the filter items */\r\n    loadFilterItems = async () => {\r\n        let eventCategories = this.loadEventCategories();\r\n        let lndTeamMembers = this.loadAllLnDTeamMembers();\r\n\r\n        Promise.all([eventCategories, lndTeamMembers])\r\n            .finally(() => {\r\n                let filteredCategories = localStorage.getItem(Resources.userEventsMobileFilteredCategoriesLocalStorageKey);\r\n                let filteredUsers = localStorage.getItem(Resources.userEventsMobileFilteredUsersLocalStorageKey);\r\n                let sortBy = localStorage.getItem(Resources.userEventsMobileSortByFilterLocalStorageKey);\r\n\r\n                let categoryList = [...this.state.categoryList];\r\n                let categorySelectedCount: number = 0;\r\n\r\n                if (filteredCategories?.trim().length && categoryList?.length > 0) {\r\n                    let categories = categoryList.filter((category: ICheckBoxItem) => filteredCategories && filteredCategories.indexOf(category.key) > -1);\r\n\r\n                    for (let i = 0; i < categories.length; i++) {\r\n                        categories[i].isChecked = true;\r\n                        categorySelectedCount += 1;\r\n                    }\r\n                }\r\n\r\n                let createdByList = [...this.state.createdByList];\r\n                let createdBySelectedCount: number = 0;\r\n\r\n                if (filteredUsers?.trim().length && createdByList?.length > 0) {\r\n                    let users = createdByList.filter((user: ICheckBoxItem) => filteredUsers && filteredUsers.indexOf(user.key) > -1);\r\n\r\n                    for (let i = 0; i < users.length; i++) {\r\n                        users[i].isChecked = true;\r\n                        createdBySelectedCount += 1;\r\n                    }\r\n                }\r\n\r\n                let sortByFilter = this.state.selectedSortBy;\r\n\r\n                if (sortBy?.trim().length) {\r\n                    let sortByValue = this.sortByList?.find((sortByItem: IRadioGroupItem) => sortByItem.key.toString() === sortBy?.trim());\r\n\r\n                    if (sortByValue) {\r\n                        sortByFilter = sortByValue.key;\r\n                    }\r\n                }\r\n\r\n                this.setState({\r\n                    categoryList,\r\n                    categorySelectedCount,\r\n                    createdByList,\r\n                    createdBySelectedCount,\r\n                    selectedSortBy: sortByFilter,\r\n                    isLoading: false\r\n                });\r\n            });\r\n    }\r\n\r\n    resize = () => {\r\n        if (window.innerWidth !== this.state.screenWidth) {\r\n            this.setState({ screenWidth: window.innerWidth });\r\n        }\r\n    }\r\n\r\n\t/**\r\n\t*Sets state of 'Category list' filter item when checkbox value changes.\r\n\t*@param categoryValues Array of 'category' checkboxes with updated user selection\r\n    */\r\n    onCategoryStateChange = (categoryValues: Array<ICheckBoxItem>) => {\r\n        let selectedCategories = categoryValues?.filter((value: ICheckBoxItem) => {\r\n            return value.isChecked;\r\n        });\r\n\r\n        this.setState({\r\n            categoryList: categoryValues,\r\n            categorySelectedCount: selectedCategories && selectedCategories.length\r\n        }, () => this.isFilterStateChanged = true);\r\n    }\r\n\r\n\t/**\r\n\t*Sets state of 'Created by' filter item when checkbox value changes.\r\n\t*@param createdByValues Array of 'created by' checkboxes with updated user selection\r\n    */\r\n    onCreatedByStateChange = (createdByValues: Array<ICheckBoxItem>) => {\r\n        let selectedUsers = createdByValues?.filter((value: ICheckBoxItem) => {\r\n            return value.isChecked;\r\n        });\r\n\r\n        this.setState({\r\n            createdByList: createdByValues,\r\n            createdBySelectedCount: selectedUsers ? selectedUsers.length : 0\r\n        }, () => this.isFilterStateChanged = true);\r\n    }\r\n\r\n\t/**\r\n\t*Sets state of selected sort by item.\r\n\t*@param selectedSortBy Selected 'sort by' value\r\n    */\r\n    onSortByStateChange = (selectedSortBy: number) => {\r\n        this.setState({ selectedSortBy: selectedSortBy }, () => this.isFilterStateChanged = true);\r\n    }\r\n\r\n\t/**\r\n\t*Removes all filters and hides filter bar.\r\n\t*@param event Event object for input\r\n    */\r\n    onCloseIconClick = () => {\r\n        if (this.state.searchText.trim().length > 0) {\r\n            this.setState({ searchText: \"\" });\r\n        }\r\n\r\n        if (this.state.categoryList.filter((sharedBy: ICheckBoxItem) => { return sharedBy.isChecked }).length) {\r\n            let updatedList = this.state.categoryList.map((sharedBy: ICheckBoxItem) => { sharedBy.isChecked = false; return sharedBy; });\r\n            this.setState({ categoryList: updatedList });\r\n        }\r\n\r\n        if (this.state.createdByList.filter((tag: ICheckBoxItem) => { return tag.isChecked }).length) {\r\n            let updatedList = this.state.createdByList.map((tag: ICheckBoxItem) => { tag.isChecked = false; return tag; });\r\n            this.setState({ createdByList: updatedList });\r\n        }\r\n\r\n        this.setState({ selectedSortBy: this.sortByList[0].value });\r\n    }\r\n\r\n    onCategoriesFilterOpenStateChange = (isOpen: boolean) => {\r\n        if (isOpen) {\r\n            this.setState({ isCategoriesFilterOpen: true, isCreatedByFilterOpen: false, isSortByFilterOpen: false });\r\n        }\r\n        else {\r\n            this.setState({ isCategoriesFilterOpen: false });\r\n        }\r\n    }\r\n\r\n    onCreatedByFilterOpenStateChange = (isOpen: boolean) => {\r\n        if (isOpen) {\r\n            this.setState({ isCategoriesFilterOpen: false, isCreatedByFilterOpen: true, isSortByFilterOpen: false });\r\n        }\r\n        else {\r\n            this.setState({ isCreatedByFilterOpen: false });\r\n        }\r\n    }\r\n\r\n    onSortByFilterOpenStateChange = (isOpen: boolean) => {\r\n        if (isOpen) {\r\n            this.setState({ isCategoriesFilterOpen: false, isCreatedByFilterOpen: false, isSortByFilterOpen: true });\r\n        }\r\n        else {\r\n            this.setState({ isSortByFilterOpen: false });\r\n        }\r\n    }\r\n\r\n    onClearFilter = () => {\r\n        let categoryList = this.state.categoryList ? [...this.state.categoryList] : [];\r\n        let createdByList = this.state.createdByList ? [...this.state.createdByList] : [];\r\n\r\n        this.setState({\r\n            categoryList: categoryList.map((value: ICheckBoxItem) => {\r\n                value.isChecked = false;\r\n                return value;\r\n            }),\r\n            categorySelectedCount: 0,\r\n            createdByList: createdByList.map((value: ICheckBoxItem) => {\r\n                value.isChecked = false;\r\n                return value;\r\n            }),\r\n            createdBySelectedCount: 0,\r\n            selectedSortBy: SortBy.Recent\r\n        }, () => {\r\n            this.isFilterStateChanged = true;\r\n        });\r\n    }\r\n\r\n    onApplyFilter = () => {\r\n        let categories: Array<ICheckBoxItem> = this.state.categoryList ? [...this.state.categoryList] : [];\r\n\r\n        let selectedCategories = categories.filter((category: ICheckBoxItem) => {\r\n            return category.isChecked;\r\n        });\r\n\r\n        let selectedCategoryIds: Array<string> = selectedCategories.map((category: ICheckBoxItem) => { return category.key });\r\n        localStorage.setItem(Resources.userEventsMobileFilteredCategoriesLocalStorageKey, selectedCategoryIds.join(\";\"));\r\n\r\n        let users: Array<ICheckBoxItem> = this.state.createdByList ? [...this.state.createdByList] : [];\r\n\r\n        let selectedUsers = users.filter((user: ICheckBoxItem) => {\r\n            return user.isChecked;\r\n        });\r\n\r\n        let selectedUserIds: Array<string> = selectedUsers.map((user: ICheckBoxItem) => { return user.key });\r\n        localStorage.setItem(Resources.userEventsMobileFilteredUsersLocalStorageKey, selectedUserIds.join(\";\"));\r\n\r\n        localStorage.setItem(Resources.userEventsMobileSortByFilterLocalStorageKey, this.state.selectedSortBy.toString());\r\n\r\n        this.props.microsoftTeams.tasks.submitTask({ isFilterStateChanged: this.isFilterStateChanged });\r\n    }\r\n\r\n\t/**\r\n\t* Renders the component\r\n\t*/\r\n    public render(): JSX.Element {\r\n        if (this.state.isLoading) {\r\n            return <Provider><Loader className=\"loader\" /></Provider>\r\n        }\r\n\r\n        return (\r\n            <Provider className=\"mobile-filter-bar-container\">\r\n                <Flex className=\"mobile-filter-buttons\">\r\n                    <Flex.Item push>\r\n                        <Flex gap=\"gap.small\" vAlign=\"center\">\r\n                            <Button content={this.localize(\"mobileFilterClearButtonText\")} onClick={this.onClearFilter} />\r\n                            <Button primary content={this.localize(\"mobileFilterApplyButtonText\")} onClick={this.onApplyFilter} />\r\n                        </Flex>\r\n                    </Flex.Item>\r\n                </Flex>\r\n                <Flex className=\"filter-bar mobile-filter-wrapper\">\r\n                    <div className=\"menu-wrapper\">\r\n                        <AccordionMenuWrapper isFilterOpen={this.state.isCategoriesFilterOpen} title={`${this.localize(\"category\")} ${this.state.categorySelectedCount > 0 ? `(${this.state.categorySelectedCount} ${this.localize(\"selected\")})` : \"\"}`} showSearchBar={true} selectedSortBy={this.state.selectedSortBy!} selectedCount={this.state.categorySelectedCount} checkboxes={this.state.categoryList} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCategoryStateChange} onFilterOpenChange={this.onCategoriesFilterOpenStateChange} />\r\n                        <AccordionMenuWrapper isFilterOpen={this.state.isCreatedByFilterOpen} title={`${this.localize(\"createdBy\")} ${this.state.createdBySelectedCount > 0 ? `(${this.state.createdBySelectedCount} ${this.localize(\"selected\")})` : \"\"}`} showSearchBar={true} selectedSortBy={this.state.selectedSortBy!} selectedCount={this.state.createdBySelectedCount} checkboxes={this.state.createdByList} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCreatedByStateChange} onFilterOpenChange={this.onCreatedByFilterOpenStateChange} />\r\n                        <AccordionMenuWrapper isFilterOpen={this.state.isSortByFilterOpen} title={this.sortByList[this.state.selectedSortBy!].name} selectedCount={this.state.createdBySelectedCount} selectedSortBy={this.state.selectedSortBy!} radioGroup={this.sortByList} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCreatedByStateChange} onFilterOpenChange={this.onSortByFilterOpenStateChange} />\r\n                    </div>\r\n                </Flex>\r\n            </Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(MobileFilterBar));","// <copyright file=\"manage-events-menu.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { EventStatus } from \"../../models/event-status\";\r\nimport { MenuButton, Button, MenuItemProps, MenuShorthandKinds, ShorthandCollection, BellIcon } from \"@fluentui/react-northstar\";\r\nimport { UserFriendsIcon, EditIcon, ArrowDownIcon, CloseIcon, MoreIcon } from \"@fluentui/react-northstar\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport moment from \"moment\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\ninterface IManageEventsMenuProps extends WithTranslation {\r\n    eventDetails: IEvent,\r\n    onCloseRegistration: (eventId: string) => void,\r\n    onEditEvent: (eventId: string) => void,\r\n    onExportDetails: (eventId: string, eventName: string) => void,\r\n    onSendReminder: (eventId: string) => void,\r\n    onCancelEvent: (eventId: string) => void,\r\n    onDeleteDraftEvent: (eventId: string, eventName: string) => void,\r\n    dir: LanguageDirection\r\n}\r\n\r\n/**\r\n * This component renders menu based on event status\r\n * @param props The props of type IManageEventsMenu\r\n */\r\nconst ManageEventsMenu: React.FunctionComponent<IManageEventsMenuProps> = props => {\r\n    const localize: TFunction = props.t;\r\n\r\n    /** Gets menu items for active events */\r\n    const getActiveEventsMenu: ShorthandCollection<MenuItemProps, MenuShorthandKinds> = [\r\n        {\r\n            icon: <EditIcon outline />,\r\n            content: localize(\"editEventInformation\"),\r\n            onClick: () => props.onEditEvent(props.eventDetails.eventId)\r\n        },\r\n        {\r\n            icon: <ArrowDownIcon />,\r\n            content: localize(\"exportRegistrationDetails\"),\r\n            onClick: () => props.onExportDetails(props.eventDetails.eventId, props.eventDetails.name)\r\n        },\r\n        {\r\n            icon: <BellIcon outline />,\r\n            content: localize(\"sendReminder\"),\r\n            onClick: () => props.onSendReminder(props.eventDetails.eventId)\r\n        },\r\n        {\r\n            kind: \"divider\"\r\n        },\r\n        {\r\n            icon: <CloseIcon outline />,\r\n            content: localize(\"cancelEvent\"),\r\n            onClick: () => props.onCancelEvent(props.eventDetails.eventId)\r\n        }\r\n    ]\r\n\r\n    /** Gets menu items for draft events */\r\n    const getDraftEventsMenu: ShorthandCollection<MenuItemProps, MenuShorthandKinds> = [\r\n        {\r\n            icon: <EditIcon outline />,\r\n            content: localize(\"editEventInformation\"),\r\n            onClick: () => props.onEditEvent(props.eventDetails.eventId)\r\n        },\r\n        {\r\n            kind: \"divider\"\r\n        },\r\n        {\r\n            icon: <CloseIcon outline />,\r\n            content: localize(\"deleteDraft\"),\r\n            onClick: () => props.onDeleteDraftEvent(props.eventDetails.eventId, props.eventDetails.name)\r\n        }\r\n    ]\r\n\r\n    /** Gets menu items for completed events */\r\n    const getCompletedEventsMenu: ShorthandCollection<MenuItemProps, MenuShorthandKinds> = [\r\n        {\r\n            icon: <ArrowDownIcon />,\r\n            content: localize(\"exportRegistrationDetails\"),\r\n            onClick: () => props.onExportDetails(props.eventDetails.eventId, props.eventDetails.name)\r\n        }\r\n    ]\r\n\r\n    /** Gets menu based on event status */\r\n    const getMenuItems = () => {\r\n        switch (props.eventDetails.status) {\r\n            case EventStatus.Draft:\r\n                return getDraftEventsMenu;\r\n\r\n            case EventStatus.Active:\r\n                if (new Date() < moment.utc(props.eventDetails.endDate).local().toDate()) {\r\n                    if (props.eventDetails.isRegistrationClosed) {\r\n                        return getActiveEventsMenu;\r\n                    }\r\n\r\n                    getActiveEventsMenu.unshift(\r\n                        {\r\n                            icon: <UserFriendsIcon outline />,\r\n                            content: localize(\"closeRegistration\"),\r\n                            onClick: () => props.onCloseRegistration(props.eventDetails.eventId)\r\n                        });\r\n\r\n                    return getActiveEventsMenu;\r\n                }\r\n\r\n                return getCompletedEventsMenu;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <MenuButton\r\n            trigger={<Button text iconOnly icon={<MoreIcon />} />}\r\n            menu={{\r\n                items: getMenuItems()\r\n            }}\r\n            position=\"before\"\r\n            className={ props.dir === LanguageDirection.Rtl ? \"ltr-direction\" : \"\"}\r\n        />\r\n    );\r\n}\r\n\r\nexport default withTranslation()(ManageEventsMenu);","// <copyright file=\"manage-events-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\nimport { AxiosRequestConfig } from \"axios\";\r\nimport Constants from \"../constants/constants\";\r\nimport { getAPIRequestConfigParams } from \"../helpers/api-helper\";\r\n\r\n/**\r\n * Gets LnD team events\r\n * @param searchString The events to load with matching search text\r\n * @param pageCount The page count of which events to be fetched\r\n * @param eventSearchType The events of particular status type that need to be retrieved\r\n * @param teamId The LnD team ID\r\n */\r\nexport const getEventsAsync = async (searchString: string, pageCount: number, eventSearchType: number, teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/EventWorkflow`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({\r\n        searchString: encodeURIComponent(searchString),\r\n        eventSearchType: eventSearchType,\r\n        teamId: teamId,\r\n        pageCount: pageCount\r\n    });\r\n\r\n    return await axios.get(url, config);\r\n}\r\n\r\n/**\r\n * Gets event details\r\n * @param eventId The event ID of which details need to be retrieved\r\n * @param teamId The LnD team ID\r\n */\r\nexport const getEventAsync = async (eventId: string, teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/Event`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ eventId: eventId, teamId: teamId });\r\n\r\n    return await axios.get(url, config);\r\n}\r\n\r\n/**\r\n * Closes the event registrations\r\n * @param teamId The LnD team ID\r\n * @param eventId The event ID of which registrations needs to be closed\r\n */\r\nexport const closeEventRegistrationsAsync = async (teamId: string, eventId: string) => {\r\n    let url = `${Constants.apiBaseURL}/EventWorkflow/CloseEventRegistrations`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ eventId: eventId, teamId: teamId });\r\n\r\n    return await axios.patch(url, null, config);\r\n}\r\n\r\n/**\r\n * Cancels an event to occur \r\n * @param teamId The LnD team ID\r\n * @param eventId The event ID that needs to be cancelled\r\n */\r\nexport const cancelEventAsync = async (teamId: string, eventId: string) => {\r\n    let url = `${Constants.apiBaseURL}/EventWorkflow/CancelEvent`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ eventId: eventId, teamId: teamId });\r\n\r\n    return await axios.patch(url, null, config);\r\n}\r\n\r\n/**\r\n * \r\n * @param teamId The LnD team ID\r\n * @param eventId The draft event ID that needs to be deleted\r\n */\r\nexport const deleteDraftEventAsync = async (teamId: string, eventId: string) => {\r\n    let url = `${Constants.apiBaseURL}/EventWorkflow/delete-draft`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ eventId: eventId, teamId: teamId });\r\n\r\n    return await axios.delete(url, config);\r\n}\r\n\r\n/**\r\n * Exports event details to CSV file\r\n * @param teamId The LnD team ID\r\n * @param eventId The event ID that of which details needs to be exported\r\n */\r\nexport const exportEventDetailsToCSV = async (teamId: string, eventId: string) => {\r\n    let url = `${Constants.apiBaseURL}/eventfiles/ExportEventDetailsToCSV`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ eventId: eventId, teamId: teamId });\r\n\r\n    return await axios.get(url, config);\r\n}\r\n\r\n/**\r\n * Sends reminder to the users registered for the event\r\n * @param teamId The LnD team ID\r\n * @param eventId The event ID\r\n */\r\nexport const sendReminder = async (teamId: string, eventId: string) => {\r\n    let url = `${Constants.apiBaseURL}/EventWorkflow/SendReminder`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ eventId: eventId, teamId: teamId });\r\n\r\n    return await axios.post(url, null, config);\r\n}","// <copyright file=\"manage-events.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport moment from \"moment\";\r\nimport { Flex, Table, Button, Input, Text, TableRowProps, Loader, SplitButton, MenuItemProps, List, CloseIcon } from \"@fluentui/react-northstar\";\r\nimport { AddIcon, SearchIcon, MoreIcon } from \"@fluentui/react-northstar\";\r\nimport TabMenu from \"../tab-menu/tab-menu\";\r\nimport ManageEventsMenu from \"./manage-events-menu\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { EventSearchType } from \"../../models/event-search-type\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { getEventsAsync, exportEventDetailsToCSV, sendReminder } from \"../../api/manage-events-api\";\r\nimport Constants, { ResponseStatus } from \"../../constants/constants\";\r\nimport NoContent from \"../no-content-page/no-content-page\"\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { EventType } from \"../../models/event-type\";\r\nimport { EventStatus } from \"../../models/event-status\";\r\nimport { IToastNotification } from \"../../models/IToastNotification\";\r\nimport ToastNotification from \"../toast-notification/toast-notification\";\r\nimport { ActivityStatus } from \"../../models/activity-status\";\r\nimport { EventOperationType } from \"../../models/event-operation-type\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport { Fabric } from \"@fluentui/react\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\nimport \"../manage-events/manage-events.css\";\r\n\r\nconst DraftEventsTabIndex: number = 0;\r\nconst ActiveEventsTabIndex: number = 1;\r\nconst CompletedEventsTabIndex: number = 2;\r\n\r\ninterface IManageEventsState {\r\n    activeTabIndex: number | string,\r\n    draftEvents: Array<IEvent>,\r\n    activeEvents: Array<IEvent>,\r\n    completedEvents: Array<IEvent>,\r\n    isLoading: boolean,\r\n    infiniteScrollKey: number,\r\n    loadMoreEvents: boolean,\r\n    isInitialLoadComplete: boolean,\r\n    isMobileView: boolean,\r\n    notification: IToastNotification,\r\n    searchText: string,\r\n    isMobileSearchBoxOpen: boolean\r\n}\r\n\r\ninterface IManageEventsProps extends WithTranslation, IWithContext {\r\n}\r\n\r\n/** This class manages all the events created by LnD team */\r\nclass ManageEvents extends React.Component<IManageEventsProps, IManageEventsState> {\r\n    readonly localize: TFunction;\r\n    draftEventsCount: number;\r\n    completedEventsCount: number;\r\n    activeEventsCount: number;\r\n    teamId: string;\r\n    timeout: number | null;\r\n    eventsScrollAreaRef: any;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.localize = this.props.t;\r\n        this.teamId = \"\";\r\n        this.timeout = null;\r\n        this.draftEventsCount = -1;\r\n        this.completedEventsCount = -1;\r\n        this.activeEventsCount = -1;\r\n        this.eventsScrollAreaRef = null;\r\n\r\n        this.state = {\r\n            activeTabIndex: ActiveEventsTabIndex,\r\n            draftEvents: [],\r\n            activeEvents: [],\r\n            completedEvents: [],\r\n            isLoading: true,\r\n            infiniteScrollKey: 0,\r\n            loadMoreEvents: false,\r\n            isInitialLoadComplete: false,\r\n            isMobileView: false,\r\n            notification: { id: 0, message: \"\", type: ActivityStatus.None },\r\n            searchText: \"\",\r\n            isMobileSearchBoxOpen: false\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets teams context from HOC as props\r\n     */\r\n    componentWillReceiveProps= async (nextProps: IManageEventsProps) => {\r\n        if (this.props.teamsContext !== nextProps.teamsContext) {\r\n            if (nextProps.teamsContext) {\r\n                this.teamId = nextProps.teamsContext.teamId!;\r\n\r\n                if (this.activeEventsCount === -1 && this.draftEventsCount === -1 && this.completedEventsCount === -1) {\r\n                    this.activeEventsCount = this.draftEventsCount = this.completedEventsCount = 0;\r\n\r\n                    let activeEvents = await this.getEventsAsync(0, EventSearchType.ActiveEventsForTeam);\r\n                    let draftEvents = await this.getEventsAsync(0, EventSearchType.DraftEventsForTeam);\r\n                    let completedEvents = await this.getEventsAsync(0, EventSearchType.CompletedEventsForTeam);\r\n\r\n                    this.setTotalEventsCount(EventSearchType.ActiveEventsForTeam, activeEvents.length);\r\n                    this.setTotalEventsCount(EventSearchType.DraftEventsForTeam, draftEvents.length);\r\n                    this.setTotalEventsCount(EventSearchType.CompletedEventsForTeam, completedEvents.length);\r\n\r\n                    this.getEvents();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.onScreenSizeChange.bind(this));\r\n        this.onScreenSizeChange();\r\n    }\r\n\r\n    /** The HTTP GET call to get events of LnD team based on event status */\r\n    getEventsAsync = async (pageNumber: number, eventSearchType: EventSearchType) => {\r\n        let response = await getEventsAsync(this.state.searchText, pageNumber, eventSearchType, this.teamId);\r\n\r\n        let events: Array<IEvent> = [];\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data) {\r\n            events = response.data;\r\n        }\r\n\r\n        return events;\r\n    }\r\n\r\n    /** Loads the events details on UI */\r\n    loadEvents = async (pageNumber: number, eventSearchType: EventSearchType) => {\r\n        let events: Array<IEvent> = await this.getEventsAsync(pageNumber, eventSearchType);\r\n\r\n        if (events) {\r\n            let loadMoreEvents: boolean = events.length < Constants.lazyLoadEventsCount ? false : true;\r\n\r\n            switch (eventSearchType) {\r\n                case EventSearchType.DraftEventsForTeam:\r\n                    if (pageNumber === 0) {\r\n                        this.setTotalEventsCount(EventSearchType.DraftEventsForTeam, events.length);\r\n                        this.setState({ draftEvents: [...events], loadMoreEvents });\r\n                    }\r\n                    else {\r\n                        let draftEvents = [...this.state.draftEvents];\r\n                        this.setState({ draftEvents: [...draftEvents, ...events], loadMoreEvents });\r\n                    }\r\n                    break;\r\n\r\n                case EventSearchType.CompletedEventsForTeam:\r\n                    if (pageNumber === 0) {\r\n                        this.setTotalEventsCount(EventSearchType.CompletedEventsForTeam, events.length);\r\n                        this.setState({ completedEvents: [...events], loadMoreEvents });\r\n                    }\r\n                    else {\r\n                        let completedEvents = [...this.state.completedEvents];\r\n                        this.setState({ completedEvents: [...completedEvents, ...events], loadMoreEvents });\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    if (pageNumber === 0) {\r\n                        this.setTotalEventsCount(EventSearchType.ActiveEventsForTeam, events.length);\r\n                        this.setState({ activeEvents: [...events], loadMoreEvents });\r\n                    }\r\n                    else {\r\n                        let activeEvents = [...this.state.activeEvents];\r\n                        this.setState({ activeEvents: [...activeEvents, ...events], loadMoreEvents });\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            if (pageNumber === 0) {\r\n                this.setTotalEventsCount(eventSearchType, 0);\r\n            }\r\n\r\n            this.setState({ loadMoreEvents: false });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the total event count for selected tab\r\n     * @param count The total count to set\r\n     */\r\n    setTotalEventsCount = (eventSeatchType: EventSearchType, count: number) => {\r\n        if (!this.state.searchText || this.state.searchText.trim() === \"\") {\r\n            switch (eventSeatchType) {\r\n                case EventSearchType.DraftEventsForTeam:\r\n                    this.draftEventsCount = count;\r\n                    break;\r\n\r\n                case EventSearchType.CompletedEventsForTeam:\r\n                    this.completedEventsCount = count;\r\n                    break;\r\n\r\n                case EventSearchType.ActiveEventsForTeam:\r\n                    this.activeEventsCount = count;\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets events based on currently selected tab\r\n     * @param pageNumber The page number for which events to get\r\n     */\r\n    getEvents = (pageNumber: number = 0) => {\r\n        if (pageNumber === 0) {\r\n            this.setState((prevState: IManageEventsState) =>\r\n                ({ isLoading: true, loadMoreEvents: false, infiniteScrollKey: prevState.infiniteScrollKey + 1 }));\r\n        }\r\n\r\n        switch (this.state.activeTabIndex) {\r\n            case DraftEventsTabIndex:\r\n                this.loadEvents(pageNumber, EventSearchType.DraftEventsForTeam)\r\n                    .finally(() => {\r\n                        this.setState({ isLoading: false });\r\n                    });\r\n                break;\r\n\r\n            case CompletedEventsTabIndex:\r\n                this.loadEvents(pageNumber, EventSearchType.CompletedEventsForTeam)\r\n                    .finally(() => {\r\n                        this.setState({ isLoading: false });\r\n                    });\r\n                break;\r\n\r\n            default:\r\n                this.loadEvents(pageNumber, EventSearchType.ActiveEventsForTeam)\r\n                    .finally(() => {\r\n                        this.setState({ isLoading: false });\r\n                    });\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Formats evetn's date and time in the format- {Date} {Start Time}-{End Time} => 05 Jun 2020, 13:00 - 16:00\r\n     * @param eventDetails\r\n     */\r\n    formatEventDateAndTime = (eventDetails: IEvent) => {\r\n        if (eventDetails) {\r\n            let eventDayMonthYear = moment.utc(eventDetails.startDate).local().format(\"DD MMM YYYY\");\r\n            let eventStartTime = moment.utc(eventDetails.startTime).local().format(\"HH:mm\");\r\n            let eventEndTime = moment.utc(eventDetails.endTime).local().format(\"HH:mm\");\r\n\r\n            return `${eventDayMonthYear}, ${eventStartTime} - ${eventEndTime}`;\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when the event tab menu index gets changed\r\n     * @param event The event details\r\n     */\r\n    onTabMenuIndexChange = (event: any) => {\r\n        if (this.timeout) {\r\n            window.clearTimeout(this.timeout);\r\n        }\r\n\r\n        this.setState({\r\n            isLoading: true,\r\n            searchText: \"\",\r\n            activeTabIndex: this.state.isMobileView ? event?.index! : event?.activeIndex!\r\n        });\r\n\r\n        this.timeout = window.setTimeout(async () => {\r\n            if (event) {\r\n                this.getEvents();\r\n            }\r\n        }, 700);\r\n    }\r\n\r\n    /**\r\n     * The event handler called when click on 'Close Registration' menu item of event table\r\n     * @param eventId The event ID of which the registration need to be closed\r\n     */\r\n    onCloseRegistration = (eventId: string) => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            title: this.localize(\"closeRegistration\"),\r\n            height: 746,\r\n            width: 600,\r\n            url: `${window.location.origin}/close-or-cancel-event?operationType=${EventOperationType.CloseRegistration}&eventId=${eventId}&teamId=${this.teamId}&isMobileView=${this.state.isMobileView}`\r\n        }, (error: any, result: any) => {\r\n            if (result) {\r\n                this.setState((prevState: IManageEventsState) => (\r\n                    {\r\n                        notification: {\r\n                            id: prevState.notification.id + 1,\r\n                            message: this.localize(\"closeRegistrationSuccessfulMessage\"),\r\n                            type: ActivityStatus.Success\r\n                        }\r\n                    }));\r\n            }\r\n        });\r\n    }\r\n\r\n    onEditEvent = (eventId: string) => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            title: this.localize(\"editEvent\"),\r\n            height: 746,\r\n            width: 600,\r\n            url: `${window.location.origin}/create-event?eventId=${eventId}&isDraft=${this.state.activeTabIndex === 0 ? true : false}`,\r\n        }, (error: any, result: any) => {\r\n            if (result) {\r\n                if (result.isSuccess) {\r\n                    this.setState((prevState: IManageEventsState) =>\r\n                        ({\r\n                            notification: {\r\n                                id: prevState.notification.id + 1,\r\n                                message: this.localize(\"updateEventSuccessfulMessage\"),\r\n                                type: ActivityStatus.Success\r\n                            },\r\n                            activeTabIndex: result.isCreateEvent ? ActiveEventsTabIndex : prevState.activeTabIndex\r\n                        }), () => {\r\n                            window.setTimeout(() => this.getEvents(), 2000);\r\n                        });\r\n                }\r\n                else {\r\n                    this.setState((prevState: IManageEventsState) =>\r\n                        ({\r\n                            notification: {\r\n                                id: prevState.notification.id + 1,\r\n                                message: this.localize(\"updateEventFailureMessage\"),\r\n                                type: ActivityStatus.Error\r\n                            }\r\n                        }));\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The event handler called when sending reminder to the users of an event\r\n     * @param eventId The event ID\r\n     */\r\n    onSendReminder = async (eventId: string) => {\r\n        let response = await sendReminder(this.teamId, eventId);\r\n\r\n        if (response.status === ResponseStatus.OK) {\r\n            this.setState((prevState: IManageEventsState) =>\r\n                ({\r\n                    notification: {\r\n                        id: prevState.notification.id + 1,\r\n                        message: this.localize(\"sendReminderSuccessfulMessage\"),\r\n                        type: ActivityStatus.Success\r\n                    }\r\n                }));\r\n        }\r\n        else {\r\n            this.setState((prevState: IManageEventsState) =>\r\n                ({\r\n                    notification: {\r\n                        id: prevState.notification.id + 1,\r\n                        message: this.localize(\"sendReminderFailureMessage\"),\r\n                        type: ActivityStatus.Error\r\n                    }\r\n                }));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when click on 'Cancel Event' menu item of event table\r\n     * @param eventId The event ID that need to be cancelled\r\n     */\r\n    onCancelEvent = (eventId: string) => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            title: this.localize(\"cancelEvent\"),\r\n            height: 746,\r\n            width: 600,\r\n            url: `${window.location.origin}/close-or-cancel-event?operationType=${EventOperationType.CancelEvent}&eventId=${eventId}&teamId=${this.teamId}&isMobileView=${this.state.isMobileView}`\r\n        }, (error: any, result: any) => {\r\n            if (result) {\r\n                let activeEvents = this.state.activeEvents ? [...this.state.activeEvents] : [];\r\n                let updatedActiveEvents: Array<IEvent> = activeEvents.filter((event: IEvent) => event.eventId !== eventId);\r\n\r\n                this.activeEventsCount -= 1;\r\n\r\n                this.setState((prevState: IManageEventsState) => (\r\n                    {\r\n                        activeEvents: updatedActiveEvents,\r\n                        notification: {\r\n                            id: prevState.notification.id + 1,\r\n                            message: this.localize(\"cancelEventSuccessfulMessage\"),\r\n                            type: ActivityStatus.Success,\r\n                        }\r\n                    }));\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The event handler called when deleting draft event\r\n     * @param eventId The draft event ID that needs to be deleted\r\n     */\r\n    onDeleteDraftEvent = (eventId: string, eventName: string) => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            title: this.localize(\"deleteEvent\"),\r\n            height: 200,\r\n            width: 400,\r\n            url: `${window.location.origin}/delete-draft?eventId=${eventId}&teamId=${this.teamId}`\r\n        }, (error: any, result: any) => {\r\n            if (result) {\r\n                let draftEvents = this.state.draftEvents ? [...this.state.draftEvents] : [];\r\n                let updatedDraftEvents: Array<IEvent> = draftEvents.filter((event: IEvent) => event.eventId !== eventId);\r\n\r\n                this.draftEventsCount -= 1;\r\n\r\n                this.setState((prevState: IManageEventsState) => ({\r\n                    draftEvents: updatedDraftEvents,\r\n                    notification: {\r\n                        id: prevState.notification.id + 1,\r\n                        message: this.localize(\"deleteDraftEvent\"),\r\n                        type: ActivityStatus.Success\r\n                    }\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    onExportDetails = async (eventId: string, eventName: string) => {\r\n        let response = await exportEventDetailsToCSV(this.teamId, eventId);\r\n\r\n        if (response.status === ResponseStatus.OK) {\r\n            const url = window.URL.createObjectURL(new Blob([\"\\ufeff\", response.data], {type: 'text/csv;charset=utf-8'}));\r\n            const downloadLink = document.createElement('a');\r\n            downloadLink.href = url;\r\n            downloadLink.setAttribute('download', `${eventName}.csv`);\r\n            downloadLink.click();\r\n\r\n            this.setState((prevState: IManageEventsState) => ({\r\n                notification: {\r\n                    id: prevState.notification.id + 1,\r\n                    message: this.localize(\"exportDetailsSuccessfulMessage\"),\r\n                    type: ActivityStatus.Success\r\n                }\r\n            }));\r\n        }\r\n        else {\r\n            this.setState((prevState: IManageEventsState) => ({\r\n                notification: {\r\n                    id: prevState.notification.id + 1,\r\n                    message: this.localize(\"exportDetailsFailureMessage\"),\r\n                    type: ActivityStatus.Error\r\n                }\r\n            }));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called after 'Enter' key press while searching events\r\n     * @param event\r\n     */\r\n    onSearchEvents = (event: any) => {\r\n        if (event.keyCode === 13 && this.state.searchText?.length && this.state.searchText.trim() !== \"\") {\r\n            this.getEvents();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when search text gets changed\r\n     * @param event The input event object\r\n     */\r\n    onSearchTextChange = (event: any) => {\r\n        if (!event.target.value.length) {\r\n            this.setState({ searchText: \"\" }, () => {\r\n                this.getEvents();\r\n            });\r\n        }\r\n        else {\r\n            this.setState({ searchText: event.target.value });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Formats events count to show on tab items\r\n     * @param count The count of events\r\n     */\r\n    formatEventsCount = (count: number) => {\r\n        if (count === -1) {\r\n            return \"\";\r\n        }\r\n        else if (count < Constants.lazyLoadEventsCount) {\r\n            return `(${count})`;\r\n        }\r\n        else {\r\n            return `(${Constants.lazyLoadEventsCount}+)`;\r\n        }\r\n    }\r\n\r\n    /** Gets tab menu items */\r\n    getTabMenuItems = () => {\r\n        return (\r\n            [\r\n                {\r\n                    key: \"draft-events\",\r\n                    content: `${this.localize(\"draftEvents\")} ${this.formatEventsCount(this.draftEventsCount)}`\r\n                },\r\n                {\r\n                    key: \"active-events\",\r\n                    content: `${this.localize(\"activeEvents\")} ${this.formatEventsCount(this.activeEventsCount)}`\r\n                },\r\n                {\r\n                    key: \"completed-events\",\r\n                    content: `${this.localize(\"completedEvents\")} ${this.formatEventsCount(this.completedEventsCount)}`\r\n                }\r\n            ]\r\n        );\r\n    }\r\n\r\n    onEventCreated = (err: any, result: any) => {\r\n        if (result) {\r\n            if (result.isSuccess) {\r\n                this.setState((prevState: IManageEventsState) =>\r\n                    ({\r\n                        notification: {\r\n                            id: prevState.notification.id + 1,\r\n                            message: result.isDraft ? this.localize(\"createDraftSuccessfulMessage\") : this.localize(\"createEventSuccessfulMessage\"),\r\n                            type: ActivityStatus.Success\r\n                        },\r\n                        activeTabIndex: result.isDraft ? DraftEventsTabIndex : ActiveEventsTabIndex\r\n                    }), () => {\r\n                        window.setTimeout(() => this.getEvents(), 2000);\r\n                    });\r\n            }\r\n            else {\r\n                this.setState((prevState: IManageEventsState) =>\r\n                    ({\r\n                        notification: {\r\n                            id: prevState.notification.id + 1,\r\n                            message: result.isDraft ? this.localize(\"createDraftFailureMessage\") : this.localize(\"createEventFailureMessage\"),\r\n                            type: ActivityStatus.Error\r\n                        }\r\n                    }));\r\n            }\r\n        }\r\n\r\n        this.props.microsoftTeams?.getContext((context: microsoftTeams.Context) => {\r\n            this.teamId = context.teamId!;\r\n        });\r\n    }\r\n\r\n    /** Open task module for manage categories */\r\n    onManageCategoriesClick = () => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            title: this.localize(\"manageCategories\"),\r\n            height: 600,\r\n            width: 900,\r\n            url: `${window.location.origin}/manage-categories`,\r\n        }, () => { });\r\n    }\r\n\r\n    /** Open task module for create event */\r\n    onCreateEventsClick = () => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            title: this.localize(\"createEvent\"),\r\n            height: 746,\r\n            width: 600,\r\n            url: `${window.location.origin}/create-event`,\r\n        }, this.onEventCreated);\r\n    }\r\n\r\n    /** Called when screen size gets updated; which sets the state to indicate whether mobile view enabled */\r\n    onScreenSizeChange() {\r\n        this.setState({ isMobileView: window.innerWidth <= Constants.maxWidthForMobileView });\r\n    }\r\n\r\n    /** The event handler called when mobile search box get closed */\r\n    onMobileSearchBoxClose = () => {\r\n        this.setState({ isMobileSearchBoxOpen: !this.state.isMobileSearchBoxOpen });\r\n\r\n        /** If search box do not have the search text, then-\r\n         - No need to call get events as it was already called when user explicitly makes search box empty\r\n         - No need to call get events if user simply open and closes the search box\r\n         */\r\n        if (this.state.searchText?.trim().length) {\r\n            this.setState({\r\n                searchText: \"\",\r\n            }, () => this.getEvents());\r\n        }\r\n    }\r\n\r\n    /** Gets event table header */\r\n    getEventsTableHeader = () => {\r\n        return ({\r\n            items: [\r\n                {\r\n                    content: this.localize(\"eventTitle\")\r\n                },\r\n                {\r\n                    content: this.localize(\"dateAndTime\"),\r\n                    design: { minWidth: \"17vw\", maxWidth: \"17vw\" }\r\n                },\r\n                {\r\n                    content: this.localize(\"venue\"),\r\n                    design: { minWidth: \"17vw\", maxWidth: \"17vw\" }\r\n                },\r\n                {\r\n                    content: this.localize(\"noOfRegistrations\"),\r\n                    design: { minWidth: \"12vw\", maxWidth: \"12vw\" }\r\n                },\r\n                {\r\n                    content: this.localize(\"category\"),\r\n                    design: { minWidth: \"15vw\", maxWidth: \"15vw\" }\r\n                },\r\n                {\r\n                    design: { minWidth: \"5vw\", maxWidth: \"5vw\" }\r\n                }\r\n            ]\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the event type text in grid based on event type\r\n     * @param eventDetails The event details\r\n     */\r\n    getEventType = (eventDetails: IEvent) => {\r\n        if (eventDetails.type === EventType.InPerson) {\r\n            return eventDetails.venue;\r\n        }\r\n        else if (eventDetails.type === EventType.LiveEvent) {\r\n            return this.localize(\"liveEvent\");\r\n        }\r\n        else {\r\n            return this.localize(\"teamsMeeting\");\r\n        }\r\n    }\r\n\r\n    /** Renders events' table */\r\n    renderEvents() {\r\n        let events: Array<IEvent> = [];\r\n\r\n        if (this.state.activeTabIndex === DraftEventsTabIndex) {\r\n            events = [...this.state.draftEvents];\r\n        }\r\n        else if (this.state.activeTabIndex === CompletedEventsTabIndex) {\r\n            events = [...this.state.completedEvents];\r\n        }\r\n        else if (this.state.activeTabIndex === ActiveEventsTabIndex) {\r\n            events = [...this.state.activeEvents];\r\n        }\r\n\r\n        if (events?.length > 0) {\r\n            if (this.state.isMobileView) {\r\n                let items: Array<any> = events.map((event: IEvent, index: number) => {\r\n                    return {\r\n                        key: `event-${index}`,\r\n                        content:\r\n                            <div className=\"manage-events-list-item-container\">\r\n                                <Flex space=\"between\">\r\n                                    <Flex column>\r\n                                        <Text content={event.name} weight=\"bold\" className=\"list-header\" />\r\n                                        <Flex className=\"list-elements\" vAlign=\"center\">\r\n                                            <Text className=\"category-name\" content={event.categoryName} weight=\"semibold\" />\r\n                                            <Text content=\"|\" weight=\"semibold\" className=\"divider\" />\r\n                                            <Text content={event.type === EventType.InPerson ? event.venue : this.localize(\"teamsMeeting\")} weight=\"semibold\" />\r\n                                        </Flex>\r\n                                        <Text className=\"list-elements\" content={this.formatEventDateAndTime(event)} />\r\n                                        <Text className=\"list-elements\" content={`${this.localize(\"noOfRegistrations\")}: ${event.registeredAttendeesCount}/${event.maximumNumberOfParticipants}`} />\r\n                                    </Flex>\r\n                                    <Flex.Item push>\r\n                                        {\r\n                                            event.status === EventStatus.Cancelled ? <Button disabled text iconOnly icon={<MoreIcon />} /> :\r\n                                                <ManageEventsMenu\r\n                                                    eventDetails={event}\r\n                                                    onCancelEvent={this.onCancelEvent}\r\n                                                    onCloseRegistration={this.onCloseRegistration}\r\n                                                    onEditEvent={this.onEditEvent}\r\n                                                    onExportDetails={this.onExportDetails}\r\n                                                    onSendReminder={this.onSendReminder}\r\n                                                    onDeleteDraftEvent={this.onDeleteDraftEvent}\r\n                                                    dir={this.props.dir}\r\n                                                />\r\n                                        }\r\n                                    </Flex.Item>\r\n                                </Flex>\r\n                            </div>\r\n                    }\r\n                });\r\n\r\n                return (\r\n                    <List className=\"manage-events-mobile-list-view\" items={items} />\r\n                );\r\n            }\r\n            else {\r\n                let rows: Array<TableRowProps> = events.map((event: IEvent) => {\r\n                    let eventVenue: string = this.getEventType(event);\r\n                    let eventDateAndTime: string = this.formatEventDateAndTime(event);\r\n\r\n                    return {\r\n                        key: `row-${event.eventId}`,\r\n                        items: [\r\n                            {\r\n                                content: <Text error={event.status === EventStatus.Cancelled ? true : false} content={event.name + (event.status === EventStatus.Cancelled ? ` (${this.localize(\"cancelledStatus\")})` : \"\")} weight=\"bold\" />,\r\n                                truncateContent: true,\r\n                                title: event.name\r\n                            },\r\n                            {\r\n                                content: eventDateAndTime,\r\n                                truncateContent: true,\r\n                                title: eventDateAndTime,\r\n                                design: { minWidth: \"17vw\", maxWidth: \"17vw\" }\r\n                            },\r\n                            {\r\n                                content: eventVenue,\r\n                                truncateContent: true,\r\n                                title: eventVenue,\r\n                                design: { minWidth: \"17vw\", maxWidth: \"17vw\" }\r\n                            },\r\n                            {\r\n                                content: `${event.registeredAttendeesCount}/${event.maximumNumberOfParticipants}`,\r\n                                design: { minWidth: \"12vw\", maxWidth: \"12vw\" }\r\n                            },\r\n                            {\r\n                                content: event.categoryName,\r\n                                truncateContent: true,\r\n                                title: event.categoryName,\r\n                                design: { minWidth: \"15vw\", maxWidth: \"15vw\" }\r\n                            },\r\n                            {\r\n                                content: event.status === EventStatus.Cancelled ? <Button disabled text iconOnly icon={<MoreIcon />} /> :\r\n                                    <ManageEventsMenu\r\n                                        eventDetails={event}\r\n                                        onCancelEvent={this.onCancelEvent}\r\n                                        onCloseRegistration={this.onCloseRegistration}\r\n                                        onEditEvent={this.onEditEvent}\r\n                                        onExportDetails={this.onExportDetails}\r\n                                        onSendReminder={this.onSendReminder}\r\n                                        onDeleteDraftEvent={this.onDeleteDraftEvent}\r\n                                        dir={this.props.dir}\r\n                                    />,\r\n                                design: { minWidth: \"5vw\", maxWidth: \"5vw\" }\r\n                            }\r\n                        ]\r\n                    }\r\n                });\r\n\r\n                return (\r\n                    <Table className=\"manage-events-table\" header={this.getEventsTableHeader()} rows={rows} />\r\n                );\r\n            }\r\n        }\r\n        else {\r\n            return (\r\n                <NoContent message={this.localize(\"eventsNotAvailable\")} />\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Renders mobile view */\r\n    renderMobileView = () => {\r\n        return (\r\n            <div className=\"container-manage-events\">\r\n                <Flex>\r\n                    <Flex.Item push>\r\n                        <Flex gap=\"gap.small\">\r\n                            <Button primary content={this.localize(\"manageCategories\")} onClick={this.onManageCategoriesClick} />\r\n                            <Button primary content={this.localize(\"createEvent\")} onClick={this.onCreateEventsClick} />\r\n                        </Flex>\r\n                    </Flex.Item>\r\n                </Flex>\r\n                <Flex className=\"mobile-menu-manage-events\" space=\"between\" vAlign=\"center\">\r\n                    <SplitButton\r\n                        button={this.getTabMenuItems()[this.state.activeTabIndex]}\r\n                        menu={{ activeIndex: this.state.activeTabIndex, items: this.getTabMenuItems() }}\r\n                        onMenuItemClick={(event: any, data: MenuItemProps | undefined) => this.onTabMenuIndexChange(data)}\r\n                        style={{ \"width\": \"40rem !important\" }}\r\n                        className=\"split-button\"\r\n                    />\r\n                    <Flex.Item push>\r\n                        <SearchIcon onClick={this.onMobileSearchBoxClose} />\r\n                    </Flex.Item>\r\n                </Flex>\r\n                { this.state.isMobileSearchBoxOpen &&\r\n                    <Flex className=\"manage-events-mobile-search-box\" vAlign=\"center\" gap=\"gap.small\">\r\n                        <Input\r\n                            inverted\r\n                            fluid\r\n                            placeholder={this.localize(\"searchForEventsPlaceholder\")}\r\n                            input={{ design: { minWidth: \"20rem\", width: \"100rem\" } }}\r\n                            onKeyUp={this.onSearchEvents}\r\n                            onChange={this.onSearchTextChange}\r\n                        />\r\n                        <Flex.Item push>\r\n                            <CloseIcon onClick={this.onMobileSearchBoxClose} />\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                }\r\n                {\r\n                    this.state.isLoading\r\n                        ? <Loader className=\"loader\" />\r\n                        : <div key={this.state.infiniteScrollKey} className=\"manage-events-scroll-area-mobile\">\r\n                            <InfiniteScroll\r\n                                pageStart={0}\r\n                                loadMore={this.getEvents}\r\n                                hasMore={this.state.loadMoreEvents}\r\n                                initialLoad={false}\r\n                                loader={<div><Loader /></div>}\r\n                                useWindow={false}\r\n                            >\r\n                                {this.renderEvents()}\r\n                            </InfiniteScroll>\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /** Renders desktop view */\r\n    renderDesktopView = () => {\r\n        return (\r\n            <div className=\"container-manage-events\">\r\n                <Flex space=\"between\" vAlign=\"center\">\r\n                    <TabMenu\r\n                        tabItems={this.getTabMenuItems()}\r\n                        defaultTabIndex={ActiveEventsTabIndex}\r\n                        activeTabIndex={this.state.activeTabIndex!}\r\n                        onTabIndexChange={this.onTabMenuIndexChange}\r\n                    />\r\n                    <Flex.Item push={this.props.dir === LanguageDirection.Ltr}>\r\n                        <Flex gap=\"gap.medium\" vAlign=\"center\">\r\n                            <Input\r\n                                inverted\r\n                                value={this.state.searchText}\r\n                                icon={<SearchIcon />}\r\n                                iconPosition={this.props.dir === LanguageDirection.Rtl ? \"start\" : \"end\"}\r\n                                placeholder={this.localize(\"searchForEventsPlaceholder\")}\r\n                                input={{ design: { minWidth: \"20rem\", maxWidth: \"20rem\" } }}\r\n                                onKeyUp={this.onSearchEvents}\r\n                                onChange={this.onSearchTextChange}\r\n                            />\r\n                            <Flex gap=\"gap.small\">\r\n                                <Button content={this.localize(\"manageCategories\")} onClick={this.onManageCategoriesClick} />\r\n                                <Button\r\n                                    className={this.props.dir === LanguageDirection.Rtl ? \"rtl-right-margin-medium\" : \"\"}\r\n                                    icon={<AddIcon />}\r\n                                    primary\r\n                                    content={<Text className={this.props.dir === LanguageDirection.Rtl ? \"rtl-right-margin-small\" : \"\"} content={this.localize(\"createEvent\")} />}\r\n                                    onClick={this.onCreateEventsClick}\r\n                                />\r\n                            </Flex>\r\n                        </Flex>\r\n                    </Flex.Item>\r\n                </Flex>\r\n                {\r\n                    this.state.isLoading\r\n                        ? <Loader className=\"loader\" />\r\n                        : <div key={this.state.infiniteScrollKey} className=\"manage-events-scroll-area\">\r\n                            <InfiniteScroll\r\n                                pageStart={0}\r\n                                loadMore={this.getEvents}\r\n                                hasMore={this.state.loadMoreEvents}\r\n                                initialLoad={false}\r\n                                loader={<div><Loader /></div>}\r\n                                useWindow={false}\r\n                            >\r\n                                {this.renderEvents()}\r\n                            </InfiniteScroll>\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /** Renders component */\r\n    render() {\r\n        return (\r\n            <Fabric dir={this.props.dir}>\r\n                <div className=\"container-div\">\r\n                    { this.state.isMobileView ? this.renderMobileView() : this.renderDesktopView()}\r\n                    <ToastNotification dir={this.props.dir} notification={this.state.notification} />\r\n                </div>\r\n            </Fabric>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(ManageEvents));\r\n","// <copyright file=\"dark-customizations.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport {\r\n    createTheme,\r\n    ICustomizations,\r\n    IPalette,\r\n    ITheme,\r\n    IPersonaCoinStyleProps,\r\n    IPersonaCoinStyles,\r\n} from 'office-ui-fabric-react';\r\nimport { DatePickerStyles } from './date-picker-styles';\r\nimport { PeoplePickerItemStyles } from './people-picker-styles';\r\nimport { addVariants } from '@uifabric/variants';\r\n\r\nconst DarkDefaultPalette: Partial<IPalette> = {\r\n    themeDarker: '#82c7ff',\r\n    themeDark: '#6cb8f6',\r\n    themeDarkAlt: '#3aa0f3',\r\n    themePrimary: '#2899f5',\r\n    themeSecondary: '#0078d4',\r\n    themeTertiary: '#235a85',\r\n    themeLight: '#004c87',\r\n    themeLighter: '#043862',\r\n    themeLighterAlt: '#092c47',\r\n    black: '#ffffff',\r\n    neutralDark: '#faf9f8',\r\n    neutralPrimary: '#f3f2f1',\r\n    neutralPrimaryAlt: '#c8c6c4',\r\n    neutralSecondary: '#a19f9d',\r\n    neutralSecondaryAlt: '#979693',\r\n    neutralTertiary: '#797775',\r\n    neutralTertiaryAlt: '#484644',\r\n    neutralQuaternary: '#3b3a39',\r\n    neutralQuaternaryAlt: '#323130',\r\n    neutralLight: '#292827',\r\n    neutralLighter: '#252423',\r\n    neutralLighterAlt: '#201f1e',\r\n    white: '#1b1a19',\r\n    redDark: '#F1707B',\r\n};\r\n\r\nexport const DarkTheme: ITheme = createTheme({\r\n    palette: DarkDefaultPalette,\r\n    semanticColors: {\r\n        buttonText: DarkDefaultPalette.black,\r\n        buttonTextPressed: DarkDefaultPalette.neutralDark,\r\n        buttonTextHovered: DarkDefaultPalette.neutralPrimary,\r\n        disabledBackground: DarkDefaultPalette.neutralQuaternaryAlt,\r\n        inputBackgroundChecked: DarkDefaultPalette.themePrimary,\r\n        menuBackground: DarkDefaultPalette.neutralLighter,\r\n        menuItemBackgroundHovered: DarkDefaultPalette.neutralQuaternaryAlt,\r\n        menuItemBackgroundPressed: DarkDefaultPalette.neutralQuaternary,\r\n        menuDivider: DarkDefaultPalette.neutralTertiaryAlt,\r\n        menuIcon: DarkDefaultPalette.themeDarkAlt,\r\n        menuHeader: DarkDefaultPalette.black,\r\n        menuItemText: DarkDefaultPalette.neutralPrimary,\r\n        menuItemTextHovered: DarkDefaultPalette.neutralDark,\r\n    },\r\n    isInverted: true,\r\n});\r\n\r\nexport const PersonaCoinStyles = (props: IPersonaCoinStyleProps): Partial<IPersonaCoinStyles> => {\r\n    return {\r\n        initials: {\r\n            color: props.showUnknownPersonaCoin ? DarkTheme.palette.redDark : DarkTheme.palette.black,\r\n        },\r\n    };\r\n};\r\n\r\nexport const DarkCustomizations: ICustomizations = {\r\n    settings: {\r\n        theme: DarkTheme,\r\n    },\r\n    scopedSettings: {\r\n        Card: {\r\n            styles: {\r\n                root: {\r\n                    background: DarkTheme.palette.neutralLighter,\r\n                },\r\n            },\r\n        },\r\n        DatePicker: {\r\n            styles: DatePickerStyles,\r\n        },\r\n        DetailsList: {\r\n            styles: {\r\n                headerWrapper: {\r\n                    selectors: {\r\n                        '.ms-DetailsHeader': {\r\n                            borderColor: DarkTheme.palette.neutralQuaternary,\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        ActionButton: {\r\n            styles: {\r\n                root: {\r\n                    backgroundColor: DarkTheme.palette.white,\r\n                },\r\n                rootDisabled: {\r\n                    backgroundColor: DarkTheme.palette.neutralLighter,\r\n                },\r\n                rootHovered: {\r\n                    backgroundColor: DarkTheme.palette.neutralLight,\r\n                },\r\n                rootPressed: {\r\n                    backgroundColor: DarkTheme.palette.neutralQuaternaryAlt,\r\n                },\r\n            },\r\n        },\r\n        DetailsRow: {\r\n            styles: {\r\n                root: {\r\n                    selectors: {\r\n                        ':hover': {\r\n                            background: DarkTheme.palette.neutralLighter,\r\n                        },\r\n                    },\r\n                    borderColor: DarkTheme.palette.neutralQuaternaryAlt,\r\n                },\r\n            },\r\n        },\r\n        Modal: {\r\n            styles: {\r\n                main: {\r\n                    backgroundColor: DarkTheme.palette.neutralLighter,\r\n                },\r\n            },\r\n        },\r\n        Overlay: {\r\n            styles: {\r\n                root: {\r\n                    background: DarkTheme.palette.blackTranslucent40,\r\n                },\r\n            },\r\n        },\r\n        VerticalDivider: {\r\n            styles: {\r\n                divider: {\r\n                    backgroundColor: DarkTheme.palette.neutralQuaternaryAlt,\r\n                },\r\n                wrapper: {\r\n                    Backgroundcolor: DarkTheme.palette.green,\r\n                },\r\n            },\r\n        },\r\n        DocumentCard: {\r\n            styles: {\r\n                root: {\r\n                    border: `1px solid ${DarkTheme.palette.neutralQuaternaryAlt}`,\r\n                    selectors: {\r\n                        '.ms-DocumentCardPreview': {\r\n                            borderRight: `1px solid ${DarkTheme.palette.neutralQuaternaryAlt}`,\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        DocumentCardPreview: {\r\n            styles: {\r\n                root: {\r\n                    borderBottom: `1px solid ${DarkTheme.palette.neutralQuaternaryAlt}`,\r\n                    borderRight: `1px solid ${DarkTheme.palette.neutralQuaternaryAlt}`,\r\n                },\r\n            },\r\n        },\r\n        Panel: {\r\n            styles: {\r\n                main: {\r\n                    backgroundColor: DarkTheme.palette.neutralLighter,\r\n                },\r\n                closeButton: {\r\n                    color: DarkTheme.palette.neutralSecondary,\r\n                    selectors: {\r\n                        ':hover': {\r\n                            color: DarkTheme.palette.neutralPrimary,\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        PeoplePickerItem: {\r\n            styles: PeoplePickerItemStyles,\r\n        },\r\n        PersonaCoin: {\r\n            styles: PersonaCoinStyles,\r\n        },\r\n        Separator: {\r\n            styles: {\r\n                root: {\r\n                    selectors: {\r\n                        ':before': {\r\n                            backgroundColor: DarkTheme.palette.neutralQuaternaryAlt,\r\n                        },\r\n                        ':after': {\r\n                            backgroundColor: DarkTheme.palette.neutralQuaternaryAlt,\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        SpinButton: {\r\n            styles: {\r\n                inputTextSelected: {\r\n                    color: DarkTheme.palette.black,\r\n                    background: DarkTheme.palette.themePrimary,\r\n                },\r\n            },\r\n        },\r\n    },\r\n};\r\n\r\naddVariants(DarkCustomizations.settings.theme);\r\n","// <copyright file=\"date-picker-styles.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport { IDatePickerStyleProps, IDatePickerStyles } from 'office-ui-fabric-react';\r\nimport { DarkTheme } from './dark-customizations';\r\n\r\nexport const DatePickerStyles = (props: IDatePickerStyleProps): Partial<IDatePickerStyles> => {\r\n    const { disabled } = props;\r\n\r\n    const TextHoverStyle = () => {\r\n        return {\r\n            color: DarkTheme.palette.neutralPrimary,\r\n            backgroundColor: DarkTheme.palette.neutralQuaternary,\r\n        };\r\n    };\r\n    const TodayAndSelectedDayStyle = () => {\r\n        return {\r\n            '.ms-DatePicker-day-button.ms-DatePicker-day--today': {\r\n                backgroundColor: DarkTheme.palette.themePrimary,\r\n                color: DarkTheme.palette.neutralPrimary,\r\n            },\r\n            '.ms-DatePicker-day-button.ms-DatePicker-day--today:active': {\r\n                backgroundColor: DarkTheme.palette.themePrimary,\r\n            },\r\n            '.ms-DatePicker-day-button.ms-DatePicker-day--today:hover': {\r\n                color: DarkTheme.palette.neutralPrimary,\r\n            },\r\n            '.ms-DatePicker-day--highlighted': {\r\n                backgroundColor: DarkTheme.palette.themeSecondary,\r\n                color: DarkTheme.palette.neutralPrimary,\r\n            },\r\n            '.ms-DatePicker-day--highlighted > .ms-DatePicker-day-button': {\r\n                backgroundColor: DarkTheme.palette.themePrimary,\r\n            },\r\n            '.ms-DatePicker-day--highlighted > .ms-DatePicker-day--today': {\r\n                color: DarkTheme.palette.neutralPrimary,\r\n            },\r\n        };\r\n    };\r\n    const HoverStyles = () => {\r\n        return {\r\n            '.ms-DatePicker-day--highlighted:hover': {\r\n                backgroundColor: DarkTheme.semanticColors.listItemBackgroundChecked,\r\n                color: DarkTheme.palette.neutralPrimary,\r\n            },\r\n            '.ms-DatePicker-day--highlighted > .ms-DatePicker-day-button:hover': {\r\n                color: DarkTheme.palette.neutralPrimary,\r\n            },\r\n            '.ms-DatePicker-day--infocus:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-currentDecade:hover': { color: DarkTheme.palette.neutralPrimary },\r\n            '.ms-DatePicker-day--outfocus:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-monthAndYear:hover': { color: DarkTheme.palette.neutralPrimary },\r\n            '.ms-DatePicker-weekday:hover': { color: DarkTheme.palette.neutralPrimary },\r\n            '.ms-DatePicker-monthOption:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-header > .ms-DatePicker-currentYear:hover': { color: DarkTheme.palette.neutralPrimary },\r\n            '.ms-DatePicker-prevMonth:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-nextMonth:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-prevYear:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-nextYear:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-goToday:hover': {\r\n                color: DarkTheme.palette.neutralPrimary,\r\n                backgroundColor: DarkTheme.palette.themeSecondary,\r\n            },\r\n            '.ms-DatePicker-yearOption:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-prevDecade:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-nextDecade:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n        };\r\n    };\r\n    return {\r\n        callout: {\r\n            backgroundColor: DarkTheme.semanticColors.bodyBackground,\r\n            color: DarkTheme.palette.neutralPrimary,\r\n            selectors: {\r\n                '.ms-DatePicker-day--infocus': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-currentDecade': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-day--outfocus': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-monthAndYear': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-weekday': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-monthOption': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-currentYear': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-prevMonth': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-nextMonth': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-prevYear': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-nextYear': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-prevDecade': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-nextDecade': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-goToday': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-goToday[disabled]': { display: 'none' },\r\n                '.ms-DatePicker-yearOption': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-yearOption--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-monthOption--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-day--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-nextDecade--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-prevDecade--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-prevYear--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-nextYear--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-prevMonth--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-nextMonth--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                ...TodayAndSelectedDayStyle(),\r\n                ...HoverStyles(),\r\n            },\r\n        },\r\n        icon: [\r\n            {\r\n                color: DarkTheme.palette.neutralPrimary,\r\n            },\r\n            disabled && {\r\n                color: DarkTheme.semanticColors.disabledBodyText,\r\n            },\r\n        ],\r\n        root: [\r\n            disabled && {\r\n                color: DarkTheme.semanticColors.disabledBodyText,\r\n            },\r\n        ],\r\n    };\r\n};\r\n","// <copyright file=\"people-picker-styles.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport { IPeoplePickerItemSelectedStyleProps, IPeoplePickerItemSelectedStyles } from 'office-ui-fabric-react';\r\nimport { DarkTheme } from './dark-customizations';\r\n\r\nexport const PeoplePickerItemStyles = (\r\n    props: IPeoplePickerItemSelectedStyleProps,\r\n): Partial<IPeoplePickerItemSelectedStyles> => {\r\n    const { selected } = props;\r\n\r\n    return {\r\n        root: [\r\n            {\r\n                background: DarkTheme.palette.neutralQuaternaryAlt,\r\n                selectors: {\r\n                    ':hover': {\r\n                        background: DarkTheme.palette.neutralQuaternary,\r\n                    },\r\n                },\r\n            },\r\n            selected && {\r\n                backgroundColor: DarkTheme.palette.themeSecondary,\r\n                selectors: {\r\n                    ':hover': {\r\n                        background: DarkTheme.palette.themeSecondary,\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n        removeButton: [\r\n            {\r\n                background: DarkTheme.palette.neutralQuaternaryAlt,\r\n                color: DarkTheme.palette.neutralDark,\r\n                selectors: {\r\n                    ':hover': {\r\n                        background: DarkTheme.palette.neutralQuaternary,\r\n                        color: DarkTheme.palette.black,\r\n                    },\r\n                },\r\n            },\r\n            selected && {\r\n                background: DarkTheme.palette.themeSecondary,\r\n                selectors: {\r\n                    ':hover': {\r\n                        background: DarkTheme.palette.themeDark,\r\n                    },\r\n                    ':active': {\r\n                        color: DarkTheme.palette.black,\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n        subComponentStyles: {\r\n            persona: {\r\n                primaryText: [\r\n                    {\r\n                        color: DarkTheme.palette.neutralPrimary,\r\n                    },\r\n                    selected && {\r\n                        color: DarkTheme.palette.black,\r\n                        selectors: {\r\n                            ':hover': {\r\n                                color: DarkTheme.palette.black,\r\n                            },\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n        },\r\n    };\r\n};\r\n","// <copyright file=\"default-customizations.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport { createTheme, ICustomizations } from 'office-ui-fabric-react';\r\nimport { addVariants } from '@uifabric/variants';\r\n\r\nexport const DefaultCustomizations: ICustomizations = {\r\n    settings: {\r\n        theme: createTheme({}),\r\n    },\r\n    scopedSettings: {},\r\n};\r\n\r\naddVariants(DefaultCustomizations.settings.theme);\r\n","// <copyright file=\"date-picker.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport moment from \"moment\";\r\nimport { Flex } from '@fluentui/react-northstar';\r\nimport { useState } from \"react\";\r\nimport { DatePicker } from 'office-ui-fabric-react/lib/DatePicker';\r\nimport { Fabric, Customizer } from 'office-ui-fabric-react/lib';\r\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons';\r\nimport { DarkCustomizations } from \"../../../helpers/dark-customizations\";\r\nimport { DefaultCustomizations } from \"../../../helpers/default-customizations\";\r\nimport Constants from \"../../../constants/resources\";\r\nimport \"./date-picker.css\";\r\n\r\ninitializeIcons();\r\n\r\ninterface IDateePickerProps {\r\n    selectedDate: Date,\r\n    onDateSelect: (startDate: Date) => void,\r\n    theme: string,\r\n    screenWidth: number,\r\n    minDate: Date,\r\n    disableSelectionForPastDate: boolean\r\n}\r\n\r\nconst StartDate: React.FC<IDateePickerProps> = props => {\r\n    let bgcolor = \"\";\r\n    let theme = props.theme;\r\n    let datePickerTheme;\r\n\r\n    if (theme === Constants.dark) {\r\n        bgcolor = \"dark-datepicker\";\r\n        datePickerTheme = DarkCustomizations\r\n    }\r\n    else if (theme === Constants.contrast) {\r\n        bgcolor = \"dark-datepicker\";\r\n        datePickerTheme = DarkCustomizations\r\n    }\r\n    else {\r\n        bgcolor = \"default-datepicker\";\r\n        datePickerTheme = DefaultCustomizations\r\n    }\r\n\r\n    const [selectedDate, setDate] = useState<Date | null | undefined>(props.selectedDate);\r\n    const [minDate, setMinDate] = useState<Date | null | undefined>(props.minDate);\r\n\r\n    React.useEffect(() => {\r\n        setDate(props.selectedDate);\r\n    }, [props.selectedDate]);\r\n\r\n    React.useEffect(() => {\r\n        setMinDate(props.minDate);\r\n    }, [props.minDate]);\r\n\r\n    /**\r\n       * Handle change event for cycle start date picker.\r\n       * @param date | cycle start date.\r\n       */\r\n    const onSelectStartDate = (date: Date | null | undefined): void => {\r\n        let startCycle = moment(date)\r\n            .set('hour', moment().hour())\r\n            .set('minute', moment().minute())\r\n            .set('second', moment().second());\r\n        props.onDateSelect(startCycle.toDate()!);\r\n        setDate(startCycle.toDate());\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {\r\n                <Flex gap=\"gap.small\">\r\n                    <Fabric className=\"full-width\" dir=\"ltr\">\r\n                        <Customizer {...datePickerTheme}>\r\n                            <DatePicker\r\n                                className={bgcolor}\r\n                                label={''}\r\n                                showMonthPickerAsOverlay={true}\r\n                                minDate={minDate!}\r\n                                isMonthPickerVisible={true}\r\n                                value={selectedDate!}\r\n                                onSelectDate={onSelectStartDate}\r\n                                disabled={props.disableSelectionForPastDate}\r\n                            />\r\n                        </Customizer>\r\n                    </Fabric>\r\n                </Flex>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default StartDate;\r\n","// <copyright file=\"timepicker.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport React, { useState } from 'react';\r\nimport { Input, Popup, Flex, Dropdown, Text } from '@fluentui/react-northstar';\r\nimport { Icon } from '@fluentui/react/lib/Icon';\r\nimport { LanguageDirection } from '../../../models/language-direction';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport \"./timepicker.css\";\r\n\r\ninterface ITimePickerProps {\r\n    onPickerClose: (hours: number, minutes: number) => void,\r\n    hours?: number,\r\n    minutes?: number,\r\n    minHours?: number,\r\n    minMinutes?: number,\r\n    isDisabled: boolean,\r\n    dir: LanguageDirection\r\n}\r\n\r\nexport const TimePicker: React.FunctionComponent<ITimePickerProps> = props => {\r\n    const localize = useTranslation().t;\r\n    const [open, setOpen] = useState(false);\r\n    const [text, setText] = React.useState(props.hours!.toString().padStart(2, '0') + \":\" + props.minutes!.toString().padStart(2, '0'));\r\n    const [hours, setHour] = React.useState(props.hours!.toString().padStart(2, '0'));\r\n    const [minutes, setMinute] = React.useState(props.minutes!.toString().padStart(2, '0'));\r\n    const [minHours, setMinHour] = React.useState(props.minHours!);\r\n    const [minMinutes, setMinMinute] = React.useState(props.minMinutes!);\r\n\r\n    const hoursItems: Array<string> = [];\r\n    const minutesItems: Array<string> = [];\r\n\r\n    React.useEffect(() => {\r\n        setHour(props.hours!.toString().padStart(2, '0'));\r\n        setText(props.hours!.toString().padStart(2, '0') + \":\" + props.minutes!.toString().padStart(2, '0'));\r\n    }, [props.hours]);\r\n    React.useEffect(() => {\r\n        setMinute (props.minutes!.toString().padStart(2, '0'));\r\n        setText(props.hours!.toString().padStart(2, '0') + \":\" + props.minutes!.toString().padStart(2, '0'));\r\n    }, [props.minutes]);\r\n    React.useEffect(() => {\r\n        setMinHour(props.minHours!);\r\n    }, [props.minHours]);\r\n    React.useEffect(() => {\r\n        setMinMinute(props.minMinutes!);\r\n    }, [props.minMinutes]);\r\n\r\n    for (var i = minHours ? minHours : 0 ; i < 24; i++) {\r\n        hoursItems.push(i.toString().padStart(2, '0'));\r\n    }\r\n    for (var i = 0; i < 60; i++) {\r\n        minutesItems.push(i.toString().padStart(2, '0'));\r\n    }\r\n\r\n    const onHourChange = {\r\n        onAdd: item => {\r\n            if (item) {\r\n                setHour(item);\r\n            }\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    const onMinuteChange = {\r\n        onAdd: item => {\r\n            if (item) {\r\n                setMinute(item);\r\n            }\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    const onOpenChange = (e, { open }: any) => {\r\n        setOpen(open)\r\n        if (!open) {\r\n            setText(hours + \":\" + minutes);\r\n            props.onPickerClose(parseInt(hours), parseInt(minutes));\r\n        }\r\n    }\r\n\r\n    const popupContent = (\r\n        <div className=\"timepicker-popup-style\">\r\n            <Flex gap=\"gap.small\">\r\n                <Flex.Item size=\"size.half\">\r\n                    <Text size={props.dir === LanguageDirection.Rtl ? \"medium\" : \"small\"} content={localize(\"hourPlaceholder\")} />\r\n                </Flex.Item>\r\n                <Flex.Item size=\"size.half\" className={props.dir === LanguageDirection.Rtl ? \"rtl-right-margin-large\" : \"\"}>\r\n                    <Text size={props.dir === LanguageDirection.Rtl ? \"medium\" : \"small\"} content={localize(\"minutePlaceholder\")} />\r\n                </Flex.Item>\r\n            </Flex>\r\n            <Flex gap=\"gap.small\" styles={{marginTop:\"0.5rem\"}}>\r\n                <Flex.Item>\r\n                    <Dropdown\r\n                        className=\"timepicker-dropdown\"\r\n                        items={hoursItems}\r\n                        value={hours}\r\n                        placeholder={localize(\"hourPlaceholder\")}\r\n                        getA11ySelectionMessage={onHourChange}\r\n                    />\r\n                </Flex.Item>\r\n                <Flex.Item>\r\n                    <Dropdown\r\n                        className={props.dir === LanguageDirection.Rtl ? \"timepicker-dropdown rtl-right-margin-small\" : \"timepicker-dropdown\"}\r\n                        value={minutes}\r\n                        items={minutesItems}\r\n                        placeholder={localize(\"minutePlaceholder\")}\r\n                        getA11ySelectionMessage={onMinuteChange}\r\n                    />\r\n                </Flex.Item>\r\n            </Flex>\r\n        </div>\r\n    )\r\n    return (\r\n        <Popup\r\n            open={open}\r\n            trapFocus\r\n            onOpenChange={onOpenChange}\r\n            trigger={<Input\r\n                className={props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}\r\n                disabled={props.isDisabled} fluid value={text} icon={<Icon iconName=\"Clock\" />}\r\n                iconPosition={props.dir === LanguageDirection.Rtl ? \"start\" : \"end\"}\r\n            />}\r\n            content={popupContent}\r\n        />\r\n    )\r\n}\r\n\r\nTimePicker.defaultProps = {\r\n    hours: 0,\r\n    minutes: 0\r\n};","// <copyright file=\"color-picker.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport React from 'react';\r\nimport { SwatchColorPicker } from '@fluentui/react/lib';\r\nimport Resources from '../../../constants/resources';\r\nimport \"./color-picker.css\";\r\n\r\ninterface IColorPickerProps {\r\n    onColorChange: (id?: string, color?: string) => void,\r\n    selectedColor?: string,\r\n}\r\n\r\nexport const ColorPicker: React.FunctionComponent<IColorPickerProps> = props => {\r\n    const [selectedId, setSelectedId] = React.useState<string | undefined>();\r\n    const [divKey, setDivKey] = React.useState<number>(1);\r\n\r\n    React.useEffect(() => {\r\n        var selectedIdFound = Resources.colorCells.find(x => x.color === props.selectedColor);\r\n        setSelectedId(selectedIdFound?.id);\r\n        setDivKey(divKey! + 1);\r\n    }, [props.selectedColor]);\r\n\r\n    return (\r\n        <div className=\"color-picker\" key={divKey}>\r\n            <SwatchColorPicker columnCount={5} cellShape={'circle'} colorCells={Resources.colorCells} selectedId={selectedId} onColorChanged={props.onColorChange }/>\r\n        </div>\r\n    );\r\n}","// <copyright file=\"create-event-step1.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport { Button, Dropdown, ExclamationCircleIcon, FilesUploadIcon, Flex, Input, Text, TextArea, Image as FluentImage } from '@fluentui/react-northstar';\r\nimport moment from \"moment-timezone\";\r\nimport { TFunction } from \"i18next\";\r\nimport * as React from \"react\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { uploadEventImage, searchEventAsync } from \"../../api/create-event-api\";\r\nimport { ResponseStatus } from \"../../constants/constants\";\r\nimport Resources, { IConstantDropdownItem } from \"../../constants/resources\";\r\nimport { saveEventAsDraftAsync } from \"../../helpers/event-helper\";\r\nimport { getLocalizedEventTypes } from \"../../helpers/localized-constants\";\r\nimport { EventType } from \"../../models/event-type\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { ISelectedDropdownItem } from \"../../models/ISelectedDropdownItem\";\r\nimport StartDate from \"../common/date-picker/datepicker\";\r\nimport { TimePicker } from \"../common/time-picker/timepicker\";\r\nimport { ICreateEventState } from \"./create-event-wrapper\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport { ColorPicker } from \"../common/color-picker/color-picker\";\r\nimport { LanguageDirection } from '../../models/language-direction';\r\n\r\ninterface ICreateEventsStep1Props extends WithTranslation, IWithContext {\r\n    navigateToPage: (nextPage: number, stepEventState: ICreateEventState) => void;\r\n    eventPageState: ICreateEventState;\r\n}\r\n\r\ninterface ICreateEventsStep1State {\r\n    theme: string,\r\n    screenWidth: number,\r\n    projectStartDate: number,\r\n    isPhotoValid: boolean,\r\n    isColorValid: boolean,\r\n    isPhotoDimentionsValid: boolean,\r\n    isNameValid: boolean,\r\n    isEventNameExisting: boolean,\r\n    isMeetingLinkValid: boolean,\r\n    isDescriptionValid: boolean,\r\n    isVenueValid: boolean,\r\n    isEventTypeValid: boolean,\r\n    isEventCategoryValid: boolean,\r\n    isMaxNoofParticipantsValid: boolean,\r\n    isTimeValid: boolean,\r\n    eventDetails: IEvent,\r\n    eventTypes: Array<IConstantDropdownItem>,\r\n    categories: Array<IConstantDropdownItem>,\r\n    selectedEventType: ISelectedDropdownItem,\r\n    selectedCategory: ISelectedDropdownItem,\r\n    imageUploadLoader: boolean,\r\n    isLoading: boolean,\r\n    isValidatingStep1: boolean,\r\n    inputKey: number\r\n}\r\n\r\n/** This component adds a new event category */\r\nclass CreateEventStep1 extends React.Component<ICreateEventsStep1Props, ICreateEventsStep1State> {\r\n    readonly localize: TFunction;\r\n    // Create a reference to the hidden file input element\r\n    inputReference: any;\r\n    teamId: string;\r\n    timeZone: string;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n        let eventTypes = getLocalizedEventTypes(this.localize);\r\n        window.addEventListener(\"resize\", this.update);\r\n        this.inputReference = React.createRef();\r\n        let date = new Date();\r\n        this.teamId = \"\";\r\n        this.timeZone = moment.tz.guess();\r\n\r\n        this.state = {\r\n            imageUploadLoader: false,\r\n            inputKey: 1,\r\n            isLoading: false,\r\n            categories: this.props.eventPageState.categories.length > 0 ? this.props.eventPageState.categories : new Array<IConstantDropdownItem>(),\r\n            theme: \"\",\r\n            eventTypes: eventTypes,\r\n            screenWidth: window.innerWidth,\r\n            projectStartDate: date.setDate(date.getDate() + 1),\r\n            isPhotoValid: true,\r\n            isColorValid: true,\r\n            isEventNameExisting: false,\r\n            isPhotoDimentionsValid: true,\r\n            isNameValid: true,\r\n            isDescriptionValid: true,\r\n            isTimeValid: true,\r\n            isVenueValid: true,\r\n            isMeetingLinkValid: true,\r\n            isEventTypeValid: true,\r\n            isEventCategoryValid: true,\r\n            isMaxNoofParticipantsValid: true,\r\n            isValidatingStep1: false,\r\n            selectedEventType: this.props.eventPageState.eventDetails.type === undefined ? {\r\n                key: EventType.Teams.toString(), header: eventTypes.find((event) => event.id === EventType.Teams)!.name!\r\n            } : {\r\n                key: eventTypes.find((event) => event.id === this.props.eventPageState.eventDetails.type)!.id.toString(), header: eventTypes.find((event) => event.id === this.props.eventPageState.eventDetails.type)!.name!\r\n            },\r\n            selectedCategory: this.props.eventPageState.selectedCategory!,\r\n            eventDetails: { ...this.props.eventPageState.eventDetails }\r\n        }\r\n    }\r\n\r\n    UNSAFE_componentWillReceiveProps(nextProps: ICreateEventsStep1Props) {\r\n        if (nextProps.eventPageState.categories !== this.props.eventPageState.categories) {\r\n            this.setState({ categories: nextProps.eventPageState.categories });\r\n        }\r\n\r\n        if (nextProps.eventPageState.eventDetails !== this.props.eventPageState.eventDetails) {\r\n            this.setState({ eventDetails: { ...nextProps.eventPageState.eventDetails } });\r\n        }\r\n\r\n        if (nextProps.eventPageState.selectedCategory !== this.props.eventPageState.selectedCategory) {\r\n            this.setState({ selectedCategory: nextProps.eventPageState.selectedCategory! });\r\n        }\r\n\r\n        if (nextProps.teamsContext && nextProps.teamsContext !== this.props.teamsContext) {\r\n            this.setState({ theme: nextProps.teamsContext.theme! });\r\n            this.teamId = nextProps.teamsContext.teamId!;\r\n        }\r\n    }\r\n\r\n    /** Update the screen width for screen resize */\r\n    update = () => {\r\n        this.setState({\r\n            screenWidth: window.innerWidth\r\n        });\r\n    };\r\n\r\n    /**\r\n    * Function for applying validation on the fields for save as draft functionality\r\n    */\r\n    checkIfSaveAsDraftAllowed = () => {\r\n        let eventValidationStatus = { isPhotoValid: true, isColorValid: true, isNameValid: true, isDescriptionValid: true, isEventTypeValid: true, isEventCategoryValid: true, isVenueValid: true, isMaxNoofPartipantsValid: true, isMeetingLinkValid: true };\r\n\r\n        if (this.state.eventDetails.name == \"\" || this.state.eventDetails.name.length > Resources.eventNameMaxLength) {\r\n            eventValidationStatus.isNameValid = false;\r\n        }\r\n\r\n        this.setState({\r\n            isPhotoValid: eventValidationStatus.isPhotoValid,\r\n            isColorValid: eventValidationStatus.isColorValid,\r\n            isNameValid: eventValidationStatus.isNameValid,\r\n            isDescriptionValid: eventValidationStatus.isDescriptionValid,\r\n            isEventTypeValid: eventValidationStatus.isEventTypeValid,\r\n            isEventCategoryValid: eventValidationStatus.isEventCategoryValid,\r\n            isVenueValid: eventValidationStatus.isVenueValid,\r\n            isMaxNoofParticipantsValid: eventValidationStatus.isMaxNoofPartipantsValid,\r\n            isMeetingLinkValid: eventValidationStatus.isMeetingLinkValid\r\n        });\r\n\r\n        if (eventValidationStatus.isPhotoValid && eventValidationStatus.isColorValid && eventValidationStatus.isNameValid &&\r\n            eventValidationStatus.isDescriptionValid && eventValidationStatus.isEventTypeValid &&\r\n            eventValidationStatus.isEventCategoryValid && eventValidationStatus.isVenueValid &&\r\n            eventValidationStatus.isMaxNoofPartipantsValid && eventValidationStatus.isMeetingLinkValid &&\r\n            !this.state.isEventNameExisting) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Function for applying validation on the fields before moving onto next step in event creation\r\n    */\r\n    checkIfNextAllowed = async () => {\r\n        let eventValidationStatus = { isTimeValid: true, isPhotoValid: true, isColorValid: true, isNameValid: true, isDescriptionValid: true, isEventTypeValid: true, isEventCategoryValid: true, isVenueValid: true, isMaxNoofPartipantsValid: true, isMeetingLinkValid: true };\r\n\r\n        if (!this.state.eventDetails.photo && !this.state.eventDetails.selectedColor) {\r\n            eventValidationStatus.isPhotoValid = false;\r\n            eventValidationStatus.isColorValid = false;\r\n        }\r\n\r\n        if (this.state.eventDetails.name.trim() == \"\" || this.state.eventDetails.name.length > Resources.eventNameMaxLength) {\r\n            eventValidationStatus.isNameValid = false;\r\n        }\r\n\r\n        let isEventNameAlreadyExists: boolean = false;\r\n\r\n        //if (eventValidationStatus.isNameValid) {\r\n        //    // Checking whether event name already exists-\r\n        //    // - creating a new event\r\n        //    // - updating a event after name changed\r\n        //    if (!this.props.eventPageState.isEdit || (this.props.eventPageState.eventDetails.name !== this.state.eventDetails.name.trim())) {\r\n        //        isEventNameAlreadyExists = await this.checkEventName();\r\n        //    }\r\n        //}\r\n\r\n        if (this.state.eventDetails.description.trim() == \"\" || this.state.eventDetails.description.length > Resources.eventDescriptionMaxLength) {\r\n            eventValidationStatus.isDescriptionValid = false;\r\n        }\r\n        if (!this.state.eventDetails.type) {\r\n            eventValidationStatus.isEventTypeValid = false;\r\n        }\r\n        if (!this.state.eventDetails.categoryId) {\r\n            eventValidationStatus.isEventCategoryValid = false;\r\n        }\r\n        if (this.state.eventDetails.type === EventType.InPerson && this.state.eventDetails.venue == \"\") {\r\n            eventValidationStatus.isVenueValid = false;\r\n        }\r\n        if (!this.state.eventDetails.maximumNumberOfParticipants) {\r\n            eventValidationStatus.isMaxNoofPartipantsValid = false;\r\n        }\r\n        if (this.state.eventDetails.type === EventType.LiveEvent && (this.state.eventDetails.meetingLink == \"\" || !this.state.eventDetails.meetingLink.match(Resources.validUrlRegExp))) {\r\n            eventValidationStatus.isMeetingLinkValid = false;\r\n        }\r\n\r\n        if (this.checkEventAlreadyStarted()) {\r\n            if ((!this.state.eventDetails!.startTime || !this.state.eventDetails!.endTime) || (this.state.eventDetails!.startTime! >= this.state.eventDetails!.endTime!)) {\r\n                eventValidationStatus.isTimeValid = false;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            isPhotoValid: eventValidationStatus.isPhotoValid,\r\n            isColorValid: eventValidationStatus.isColorValid,\r\n            isNameValid: eventValidationStatus.isNameValid,\r\n            isDescriptionValid: eventValidationStatus.isDescriptionValid,\r\n            isEventTypeValid: eventValidationStatus.isEventTypeValid,\r\n            isEventCategoryValid: eventValidationStatus.isEventCategoryValid,\r\n            isVenueValid: eventValidationStatus.isVenueValid,\r\n            isMaxNoofParticipantsValid: eventValidationStatus.isMaxNoofPartipantsValid,\r\n            isMeetingLinkValid: eventValidationStatus.isMeetingLinkValid,\r\n            isTimeValid: eventValidationStatus.isTimeValid,\r\n            isEventNameExisting: isEventNameAlreadyExists,\r\n            isValidatingStep1: false\r\n        });\r\n\r\n        if (eventValidationStatus.isPhotoValid && eventValidationStatus.isColorValid && eventValidationStatus.isNameValid &&\r\n            eventValidationStatus.isDescriptionValid && eventValidationStatus.isEventTypeValid &&\r\n            eventValidationStatus.isEventCategoryValid && eventValidationStatus.isVenueValid &&\r\n            eventValidationStatus.isMaxNoofPartipantsValid && eventValidationStatus.isMeetingLinkValid &&\r\n            eventValidationStatus.isTimeValid && !this.state.isEventNameExisting) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /** Check whether event start date is less than current date while editing an event */\r\n    checkEventAlreadyStarted = () => {\r\n        return !(this.props.eventPageState.isEdit && moment.utc(this.state.eventDetails.startDate).local().toDate() < new Date());\r\n    }\r\n\r\n    /**\r\n    * Event handler for moving onto next event-step\r\n    */\r\n    nextBtnClick = async () => {\r\n        this.setState({ isValidatingStep1: true });\r\n\r\n        var isSubmitAllowed = await this.checkIfNextAllowed();\r\n        if (isSubmitAllowed) {\r\n            let modifiedState = { ...this.props.eventPageState };\r\n            modifiedState.eventDetails = this.state.eventDetails;\r\n            modifiedState.selectedCategory = this.state.selectedCategory;\r\n            modifiedState.selectedEvent = this.state.selectedEventType;\r\n            modifiedState.categories = this.state.categories;\r\n\r\n            this.props.navigateToPage(2, modifiedState);\r\n        }\r\n    };\r\n\r\n    /**\r\n    * Event handler on selecting start date\r\n    */\r\n    setStartDate = (date: Date) => {\r\n        let eventDetails = this.state.eventDetails;\r\n        eventDetails.startDate = date;\r\n        eventDetails.endDate = date;\r\n        this.setState({ eventDetails: eventDetails });\r\n    }\r\n\r\n    /**\r\n    * Event handler on selecting end date\r\n    */\r\n    setEndDate = (date: Date) => {\r\n        let eventDetails = this.state.eventDetails;\r\n        eventDetails.endDate = date;\r\n        this.setState({ eventDetails: eventDetails });\r\n    }\r\n\r\n    /**\r\n    * Event handler on fetching the validation message for valid name\r\n    */\r\n    getNameError = () => {\r\n        if (!this.state.isNameValid) {\r\n            return (<Text data-testid=\"event_name_req_error\" content={this.localize(\"required\")} error />);\r\n        }\r\n        else if (this.state.eventDetails.name.length > Resources.eventNameMaxLength) {\r\n            return (<Text data-testid=\"event_name_max_error\" content={this.localize(\"eventNameMaxCharError\")} error />);\r\n        }\r\n        else if (this.state.isEventNameExisting) {\r\n            return (<Text content={this.localize(\"eventNameAlreadyExists\")} error />);\r\n        }\r\n        return (<></>);\r\n    }\r\n\r\n    /**\r\n    * Event handler on fecthing the validation message for valid event team's meeting link\r\n    */\r\n    getMeetingLinkError = () => {\r\n        if (!this.state.isMeetingLinkValid) {\r\n            return (<Text data-testid=\"event_link_req_error\" content={this.localize(\"validUrlErrorMessage\")} error />);\r\n        }\r\n\r\n        return (<></>);\r\n    }\r\n\r\n    /**\r\n    * Event handler on fetching the validation message for valid description\r\n    */\r\n    getDescriptionError = () => {\r\n        if (!this.state.isDescriptionValid) {\r\n            return (<Text data-testid=\"event_desc_req_error\" content={this.localize(\"required\")} error />);\r\n        }\r\n        if (this.state.eventDetails.description.length > Resources.eventDescriptionMaxLength) {\r\n            return (<Text data-testid=\"event_desc_max_error\" content={this.localize(\"eventDescriptionMaxCharError\")} error />);\r\n        }\r\n        return (<></>);\r\n    }\r\n\r\n    /**\r\n    * Event handler on fetching the validation message for valid venue\r\n    */\r\n    getVenueError = () => {\r\n        if (!this.state.isVenueValid) {\r\n            return (<Text data-testid=\"event_venue_req_error\" content={this.localize(\"required\")} error size=\"medium\" />);\r\n        }\r\n        if (this.state.eventDetails.venue.length > Resources.eventVenueMaxLength) {\r\n            return (<Text data-testid=\"event_venue_max_error\" content={this.localize(\"eventVenueMaxCharError\")} error />);\r\n        }\r\n        return (<></>);\r\n    }\r\n\r\n    /**\r\n    * Event handler on fetching the validation message for valid event type\r\n    */\r\n    getEventTypeError = () => {\r\n        if (!this.state.isEventTypeValid) {\r\n            return (<Text data-testid=\"event_type_error\" content={this.localize(\"required\")} error />);\r\n        }\r\n        else {\r\n            return (<Text content={\"\"} error size=\"medium\" />);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event handler on fetching the validation message for valid event category\r\n    */\r\n    getEventCategoryError = () => {\r\n        if (!this.state.isEventCategoryValid) {\r\n            return (<Text data-testid=\"event_category_error\" content={this.localize(\"required\")} error />);\r\n        }\r\n        else {\r\n            return (<Text content={\"\"} error size=\"medium\" />);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event handler on fetching the validation message for valid image\r\n    */\r\n    getPhotoError = () => {\r\n        if (!this.state.isPhotoValid) {\r\n            return (<Text data-testid=\"event_photo_error\" content={this.localize(\"required\")} error />);\r\n        }\r\n        else if (!this.state.isPhotoDimentionsValid) {\r\n            return (<Text content={this.localize(\"invalidImageDimensions\")} error />);\r\n        }\r\n        else {\r\n            return (<Text content={\"\"} error size=\"medium\" />);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event handler on fetching the validation message for valid mnaximum no of participants\r\n    */\r\n    getMaximumNoofParticipantsError = () => {\r\n        if (!this.state.isMaxNoofParticipantsValid) {\r\n            return (<Text data-testid=\"event_max_req_error\" content={this.localize(\"required\")} error />);\r\n        }\r\n        return (<></>);\r\n    }\r\n\r\n    /**\r\n    * Event handler on name change\r\n    */\r\n    onEventNameChange = (eventName: string) => {\r\n        this.setState((prevState: ICreateEventsStep1State) => ({\r\n            eventDetails: { ...prevState.eventDetails, name: eventName },\r\n            isNameValid: true,\r\n            isEventNameExisting: false\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Event handler on description change\r\n    */\r\n    onEventDescriptionChange = (eventDescription: string) => {\r\n        this.setState((prevState: ICreateEventsStep1State) => ({\r\n            eventDetails: { ...prevState.eventDetails, description: eventDescription },\r\n            isDescriptionValid: true\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Event handler on venue change\r\n    */\r\n    onEventVenueChange = (eventVenue: string) => {\r\n        this.setState((prevState: ICreateEventsStep1State) => ({\r\n            eventDetails: { ...prevState.eventDetails, venue: eventVenue },\r\n            isVenueValid: true\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Event handler on live event url change\r\n    */\r\n    onLiveEventUrlChange = (eventUrl: string) => {\r\n        this.setState((prevState: ICreateEventsStep1State) => ({\r\n            eventDetails: { ...prevState.eventDetails, meetingLink: eventUrl },\r\n            isMeetingLinkValid: true\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Event handler on maximum number of participants change\r\n    */\r\n    onMaxNoOfParticipantsChange = (eventMaxNoofParticipants: string) => {\r\n        this.setState((prevState: ICreateEventsStep1State) => ({\r\n            eventDetails: { ...prevState.eventDetails, maximumNumberOfParticipants: parseInt(eventMaxNoofParticipants) },\r\n            isMaxNoofParticipantsValid: true\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Event handler on start time change\r\n    */\r\n    onStartTimeChange = (hours: number, min: number) => {\r\n        this.setState((prevState: ICreateEventsStep1State) => ({\r\n            eventDetails: { ...prevState.eventDetails, startTime: new Date(new Date().setHours(hours, min)), endTime: this.state.eventDetails.endTime === undefined ? new Date(new Date().setHours(hours, min + 15)) : this.state.eventDetails.endTime }\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Event handler on end time change\r\n    */\r\n    onEndTimeChange = (hours: number, min: number) => {\r\n        this.setState((prevState: ICreateEventsStep1State) => ({\r\n            eventDetails: { ...prevState.eventDetails, endTime: new Date(new Date().setHours(hours, min)) }\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Function calling a click event on a hidden file input\r\n    */\r\n    handleUploadClick = (event: any) => {\r\n        this.inputReference.current.click();\r\n    };\r\n\r\n    /**\r\n     * The event handler called when the selected color gets changed\r\n     * @param id The color Id\r\n     * @param color The color code\r\n     */\r\n    onColorChange = (id?: string | undefined, color?: string | undefined) => {\r\n        this.setState((prevState: ICreateEventsStep1State) => ({\r\n            eventDetails: { ...prevState.eventDetails, selectedColor: color, photo: \"\" }, inputKey: this.state.inputKey + 1, isPhotoDimentionsValid: true, isPhotoValid: true\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Function called for uploading image on azure\r\n    */\r\n    uploadImage = async (formData: FormData) => {\r\n        this.setState({ imageUploadLoader: true });\r\n        let response = await uploadEventImage(formData, this.teamId);\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data) {\r\n            this.setState((prevState: ICreateEventsStep1State) => ({\r\n                eventDetails: { ...prevState.eventDetails, photo: response.data, selectedColor: \"\" },\r\n                imageUploadLoader: false\r\n            }));\r\n        }\r\n        else {\r\n            this.setState({ imageUploadLoader: false });\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event Handler for image change\r\n    */\r\n    handleChange = (event: any) => {\r\n        const fileUploaded = event.target.files[0];\r\n        if (fileUploaded) {\r\n            let isValid = true;\r\n            let img = new Image\r\n            img.src = window.URL.createObjectURL(fileUploaded)\r\n            img.onload = () => {\r\n                if (img.width < 850 || img.height < 290 || img.width > 900 || img.height > 310) {\r\n                    isValid = false;\r\n                } else {\r\n                    const formData = new FormData();\r\n                    formData.append(\r\n                        \"fileInfo\",\r\n                        fileUploaded,\r\n                        fileUploaded.name\r\n                    );\r\n                    this.uploadImage(formData);\r\n                }\r\n\r\n                this.setState({ isPhotoDimentionsValid: isValid });\r\n            }\r\n        }\r\n    };\r\n\r\n    /** Validate whether the event name already exists */\r\n    checkEventName = async () => {\r\n        //let response = await searchEventAsync(this.state.eventDetails.name);\r\n        //if (response && response.status === ResponseStatus.OK && response.data) {\r\n        //    let isEventAlreadyExists = response.data.some((event: IEvent) => event.name.toLowerCase() === this.state.eventDetails.name.trim().toLowerCase());\r\n\r\n        //    return isEventAlreadyExists;\r\n        //}\r\n        //else {\r\n        //    return false;\r\n        //}\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    * Event handler for saving event as a draft\r\n    */\r\n    saveEventAsDraft = async () => {\r\n        let result = this.checkIfSaveAsDraftAllowed();\r\n        if (result) {\r\n            this.setState({ isLoading: true });\r\n            let modifiedState = { ...this.props.eventPageState };\r\n            modifiedState.eventDetails = this.state.eventDetails;\r\n            modifiedState.selectedCategory = this.state.selectedCategory;\r\n            modifiedState.selectedEvent = this.state.selectedEventType;\r\n            modifiedState.categories = this.state.categories;\r\n\r\n            let result = await saveEventAsDraftAsync(modifiedState, this.teamId);\r\n            if (result) {\r\n                this.props.microsoftTeams.tasks.submitTask({ isSuccess: true, isDraft: true });\r\n            }\r\n            else {\r\n                this.setState({ isLoading: false });\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Renders a component */\r\n    render() {\r\n        const onEventTypeChange = {\r\n            onAdd: (item: any) => {\r\n                this.setState((prevState: ICreateEventsStep1State) => ({\r\n                    eventDetails: { ...prevState.eventDetails, type: item.key },\r\n                    isEventTypeValid: true,\r\n                    selectedEventType: item\r\n                }));\r\n                return \"\";\r\n            }\r\n        }\r\n        const onEventCategoryChange = (item: any) => {\r\n            this.setState((prevState: ICreateEventsStep1State) => ({\r\n                eventDetails: { ...prevState.eventDetails, categoryId: item.key },\r\n                isEventCategoryValid: true,\r\n                selectedCategory: item\r\n            }));\r\n        }\r\n\r\n        const categoriesList = new Array<ISelectedDropdownItem>();\r\n        for (var i = 0; i < this.state.categories.length; i++) {\r\n            categoriesList.push({ key: this.state.categories[i].id.toString(), header: this.state.categories[i].name })\r\n        }\r\n\r\n        let minDate = new Date();\r\n        minDate.setDate(minDate.getDate() + 1);\r\n\r\n        return (\r\n            <>\r\n                <div className=\"page-content\">\r\n                    <Flex gap=\"gap.smaller\">\r\n                        <Text size=\"large\" content={this.localize(\"eventDetailsStep1\")} />\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"margin-top\" vAlign=\"center\">\r\n                        <Text className=\"form-label margin-right\" content={this.localize(\"eventPhotoStep1\")} /><ExclamationCircleIcon title={this.localize(\"imageInfoIcon\")} size=\"small\" />\r\n                        <Flex.Item push grow={this.props.dir === LanguageDirection.Rtl}>\r\n                            {this.getPhotoError()}\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    {this.state.eventDetails.photo && <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\" vAlign=\"end\">\r\n                        <FluentImage className=\"event-image-color\" fluid src={this.state.eventDetails.photo} />\r\n                    </Flex>}\r\n                    {this.state.eventDetails.selectedColor && <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\" vAlign=\"end\">\r\n                        <div className=\"event-image-color\" style={{ backgroundColor: this.state.eventDetails.selectedColor }}>\r\n                            <Flex className=\"event-image-color\" hAlign=\"center\" vAlign=\"center\">\r\n                                <Text className=\"event-color-text\" size=\"large\" weight=\"semibold\" content={this.state.eventDetails.name} />\r\n                            </Flex>\r\n                        </div>\r\n                    </Flex>}\r\n                    <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\" vAlign=\"center\" >\r\n                        <Flex.Item>\r\n                            <>\r\n                                <Button disabled={this.state.imageUploadLoader} loading={this.state.imageUploadLoader} onClick={this.handleUploadClick} size=\"medium\" icon={<FilesUploadIcon className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"} />} content={this.state.eventDetails.photo && this.state.eventDetails.photo.length ? this.localize(\"changePhotoStep1\") : this.localize(\"uploadPhotoStep1\")} iconPosition=\"before\" />\r\n                                <input\r\n                                    type=\"file\"\r\n                                    ref={this.inputReference}\r\n                                    onChange={this.handleChange}\r\n                                    style={{ display: 'none' }}\r\n                                    key={this.state.inputKey}\r\n                                />\r\n                                <Text className={this.props.dir === LanguageDirection.Rtl ? \"form-label rtl-left-margin-small\" : \"form-label\"} content={this.localize(\"orLabelForImageOrColor\")} />\r\n                            </>\r\n                        </Flex.Item>\r\n                        <Flex.Item>\r\n                            <div>\r\n                                <ColorPicker onColorChange={this.onColorChange} selectedColor={this.state.eventDetails.selectedColor} />\r\n                            </div>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <Flex className=\"margin-top\" gap=\"gap.smaller\">\r\n                        <Text className=\"form-label\" content={this.localize(\"eventNameStep1\")} />\r\n                        <Flex.Item push grow={this.props.dir === LanguageDirection.Rtl}>\r\n                            {this.getNameError()}\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                        <Input data-testid=\"event_name_input\" maxLength={Resources.eventNameMaxLength} fluid placeholder={this.localize(\"eventNamePlaceholderStep1\")} value={this.state.eventDetails.name} onChange={(event: any) => this.onEventNameChange(event.target.value)} />\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                        <Flex.Item size=\"size.half\">\r\n                            <Flex>\r\n                                <Text className=\"form-label\" content={this.localize(\"eventTypeStep1\")} />\r\n                                <Flex.Item push grow={this.props.dir === LanguageDirection.Rtl}>\r\n                                    {this.getEventTypeError()}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                        <Flex.Item size=\"size.half\">\r\n                            <Flex>\r\n                                <Text className=\"form-label\" content={this.localize(\"category\")} />\r\n                                <Flex.Item push grow={this.props.dir === LanguageDirection.Rtl}>\r\n                                    {this.getEventCategoryError()}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </Flex.Item>\r\n\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                        <Flex.Item size=\"size.half\">\r\n                            <Dropdown\r\n                                className={this.props.dir === LanguageDirection.Rtl ? \"dropdown-flex-half rtl-left-margin-small\" : \"dropdown-flex-half\"}\r\n                                fluid\r\n                                items={this.state.eventTypes.map((value: IConstantDropdownItem) => { return { key: value.id, header: value.name } })}\r\n                                value={this.state.selectedEventType}\r\n                                placeholder={this.localize(\"selectEventTypePlaceholder\")}\r\n                                getA11ySelectionMessage={onEventTypeChange}\r\n                                data-testid=\"event_type_dropdown\"\r\n                            />\r\n                        </Flex.Item>\r\n                        <Flex.Item size=\"size.half\">\r\n                            <Dropdown\r\n                                className=\"dropdown-flex-half\"\r\n                                fluid\r\n                                onChange={(event, data) => { onEventCategoryChange(data.value) }}\r\n                                value={this.state.selectedCategory}\r\n                                items={categoriesList}\r\n                                placeholder={this.localize(\"selectCategoryPlaceholder\")}\r\n                                data-testid=\"event_category_dropdown\"\r\n                            />\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    {\r\n                        this.state.eventDetails.type === EventType.LiveEvent &&\r\n                        <>\r\n                            <Flex className=\"margin-top\" gap=\"gap.smaller\">\r\n                                <Text className=\"form-label\" content={this.localize(\"liveEventUrlStep1\")} />\r\n                                <Flex.Item push grow={this.props.dir === LanguageDirection.Rtl}>\r\n                                    {this.getMeetingLinkError()}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                            <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                                <Input fluid value={this.state.eventDetails.meetingLink} placeholder={this.localize(\"liveEventUrlPlaceholder\")}\r\n                                    onChange={(event: any) => this.onLiveEventUrlChange(event.target.value)} data-testid=\"event_link_input\" />\r\n                            </Flex>\r\n                        </>\r\n                    }\r\n                    {\r\n                        this.state.eventDetails.type === EventType.InPerson && <>\r\n                            <Flex className=\"margin-top\" gap=\"gap.smaller\">\r\n                                <Text className=\"form-label\" content={this.localize(\"venue\")} />\r\n                                <Flex.Item push grow={this.props.dir === LanguageDirection.Rtl}>\r\n                                    {this.getVenueError()}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                            <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                                <Input\r\n                                    maxLength={Resources.eventVenueMaxLength}\r\n                                    value={this.state.eventDetails.venue}\r\n                                    onChange={(event: any) => this.onEventVenueChange(event.target.value)}\r\n                                    fluid\r\n                                    placeholder={this.localize(\"venuePlaceholder\")}\r\n                                    data-testid=\"event_venue_input\"\r\n                                />\r\n                            </Flex>\r\n                        </>\r\n                    }\r\n                    <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                        <Text className=\"form-label\" content={this.localize(\"eventDescriptionStep1\")} />\r\n                        <Flex.Item push grow={this.props.dir === LanguageDirection.Rtl}>\r\n                            {this.getDescriptionError()}\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                        <TextArea\r\n                            maxLength={Resources.eventDescriptionMaxLength}\r\n                            fluid\r\n                            placeholder={this.localize(\"eventDescriptionPlaceholder\")}\r\n                            value={this.state.eventDetails.description}\r\n                            onChange={(event: any) => this.onEventDescriptionChange(event.target.value)}\r\n                            data-testid=\"event_description_input\"\r\n                        />\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                        <Text title={this.timeZone} truncated className=\"form-label\" content={`${this.localize(\"yourTimeZone\")}: ${this.timeZone}`} />\r\n                    </Flex>\r\n                    {\r\n                        this.state.screenWidth >= 600 &&\r\n                        <>\r\n                            <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                                <Flex.Item size=\"size.half\">\r\n                                    <div>\r\n                                        <Text className=\"form-label\" align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={`${this.localize(\"startDateStep1\")}`} />\r\n                                        <Flex className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}>\r\n                                            <StartDate\r\n                                                screenWidth={this.state.screenWidth}\r\n                                                theme={this.state.theme}\r\n                                                selectedDate={this.state.eventDetails.startDate}\r\n                                                minDate={minDate}\r\n                                                onDateSelect={this.setStartDate}\r\n                                                disableSelectionForPastDate={!this.checkEventAlreadyStarted()}\r\n                                            />\r\n                                        </Flex>\r\n                                    </div>\r\n                                </Flex.Item>\r\n                                <Flex.Item size=\"size.half\">\r\n                                    <div>\r\n                                        <Text className=\"form-label\" align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={`${this.localize(\"endDateStep1\")}`} />\r\n                                        <StartDate\r\n                                            screenWidth={this.state.screenWidth}\r\n                                            theme={this.state.theme}\r\n                                            minDate={this.state.eventDetails.endDate}\r\n                                            selectedDate={this.state.eventDetails.endDate}\r\n                                            onDateSelect={this.setEndDate}\r\n                                            disableSelectionForPastDate={!this.checkEventAlreadyStarted()}\r\n                                        />\r\n                                    </div>\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </>\r\n                    }\r\n                    {\r\n                        this.state.screenWidth < 600 &&\r\n                        <React.Fragment>\r\n                            <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                                <Text className=\"form-label\" content={this.localize(\"startDateStep1\")} />\r\n                            </Flex>\r\n                            <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                                <StartDate\r\n                                    screenWidth={this.state.screenWidth}\r\n                                    theme={this.state.theme}\r\n                                    selectedDate={this.state.eventDetails.startDate}\r\n                                    minDate={minDate}\r\n                                    onDateSelect={this.setStartDate}\r\n                                    disableSelectionForPastDate={!this.checkEventAlreadyStarted()}\r\n                                />\r\n                            </Flex>\r\n                            <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                                <Text className=\"form-label\" content={this.localize(\"endDateStep1\")} />\r\n                            </Flex>\r\n                            <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                                <StartDate\r\n                                    screenWidth={this.state.screenWidth}\r\n                                    theme={this.state.theme}\r\n                                    minDate={this.state.eventDetails.startDate}\r\n                                    selectedDate={this.state.eventDetails.endDate}\r\n                                    onDateSelect={this.setEndDate}\r\n                                    disableSelectionForPastDate={!this.checkEventAlreadyStarted()}\r\n                                />\r\n                            </Flex>\r\n                        </React.Fragment>\r\n                    }\r\n\r\n                    <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                        <Flex.Item size=\"size.half\">\r\n                            <Flex gap=\"gap.smaller\">\r\n                                <Flex.Item size=\"size.half\">\r\n                                    <Text className=\"form-label\" align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.localize(\"startTimeStep1\")} />\r\n                                </Flex.Item>\r\n                                <Flex.Item size=\"size.half\">\r\n                                    <Text className=\"form-label\" align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.localize(\"endTimeStep1\")} />\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                        <Flex.Item size=\"size.half\">\r\n                            <Flex>\r\n                                <Text className=\"form-label\" align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.localize(\"maxParticipantsStep1\")} />\r\n                                <Flex.Item push={this.props.dir === LanguageDirection.Ltr} grow={this.props.dir === LanguageDirection.Rtl}>\r\n                                    {this.getMaximumNoofParticipantsError()}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                        <Flex.Item size=\"size.half\" className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}>\r\n                            <Flex gap=\"gap.smaller\">\r\n                                <Flex.Item size=\"size.half\">\r\n                                    <TimePicker\r\n                                        hours={this.state.eventDetails.startTime?.getHours()}\r\n                                        minutes={this.state.eventDetails.startTime?.getMinutes()}\r\n                                        isDisabled={!this.checkEventAlreadyStarted()}\r\n                                        onPickerClose={this.onStartTimeChange}\r\n                                        dir={this.props.dir}\r\n                                    />\r\n                                </Flex.Item>\r\n                                <Flex.Item size=\"size.half\">\r\n                                    <TimePicker\r\n                                        hours={this.state.eventDetails.endTime?.getHours()}\r\n                                        minutes={this.state.eventDetails.endTime?.getMinutes()}\r\n                                        onPickerClose={this.onEndTimeChange}\r\n                                        minHours={this.state.eventDetails.startTime?.getHours()!}\r\n                                        minMinutes={undefined}\r\n                                        isDisabled={!this.checkEventAlreadyStarted()}\r\n                                        dir={this.props.dir}\r\n                                    />\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                        <Flex.Item size=\"size.half\" className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}>\r\n                            <Input type=\"number\" min={1} fluid value={this.state.eventDetails.maximumNumberOfParticipants.toString()} onChange={(event: any) => this.onMaxNoOfParticipantsChange(event.target.value)} data-testid=\"event_maxParticipants_input\" />\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                </div>\r\n                {this.props.dir === LanguageDirection.Ltr && <Flex gap=\"gap.smaller\" className=\"button-footer\" vAlign=\"center\">\r\n                    {!this.state.isTimeValid && <Text error content={this.localize(\"startAndEndTimeError\")} />}\r\n                    <Flex.Item push>\r\n                        <Text weight=\"bold\" content={this.localize(\"step1Of3\")} />\r\n                    </Flex.Item>\r\n                    {(!this.props.eventPageState.isEdit || (this.props.eventPageState.isEdit && this.props.eventPageState.isDraft)) && <Button disabled={this.state.isLoading || this.state.isValidatingStep1} loading={this.state.isLoading} onClick={this.saveEventAsDraft} content={this.localize(\"saveAsDraft\")} secondary data-testid=\"event_save_button\" />}\r\n                    <Button data-testid=\"event_next_button\" content={this.localize(\"nextButton\")} loading={this.state.isValidatingStep1} disabled={this.state.isLoading || this.state.isValidatingStep1} primary onClick={this.nextBtnClick} />\r\n                </Flex>}\r\n\r\n                {this.props.dir === LanguageDirection.Rtl && <Flex gap=\"gap.smaller\" className=\"button-footer\" vAlign=\"center\">\r\n                    <Flex.Item push>\r\n                        <Text error content={!this.state.isTimeValid ? this.localize(\"startAndEndTimeError\") : \"\"} />\r\n                    </Flex.Item>\r\n                    <Text className=\"rtl-left-margin-small\" weight=\"bold\" content={this.localize(\"step1Of3\")} />\r\n                    {(!this.props.eventPageState.isEdit || (this.props.eventPageState.isEdit && this.props.eventPageState.isDraft)) && <Button className=\"rtl-left-margin-small\" disabled={this.state.isLoading || this.state.isValidatingStep1} loading={this.state.isLoading} onClick={this.saveEventAsDraft} content={this.localize(\"saveAsDraft\")} secondary data-testid=\"event_save_button\" />}\r\n                    <Button data-testid=\"event_next_button\" content={this.localize(\"nextButton\")} loading={this.state.isValidatingStep1} disabled={this.state.isLoading || this.state.isValidatingStep1} primary onClick={this.nextBtnClick} />\r\n                </Flex>}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(CreateEventStep1));","// <copyright file=\"dropdown-search.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Dropdown } from '@fluentui/react-northstar'\r\nimport { searchUsersAndGroups } from \"../../../api/user-group-api\";\r\n\r\ninterface IDropdownProps {\r\n    onItemSelect: (selectedItem: IDropdownItem) => void,\r\n    loadingMessage: string,\r\n    placeholder: string,\r\n    noResultMessage: string\r\n}\r\n\r\nexport interface IDropdownItem {\r\n    header: string,\r\n    content: string,\r\n    id: string,\r\n    email: string,\r\n    isGroup: boolean\r\n}\r\n\r\ninterface IUserOrGroupSearchResult {\r\n    displayName: string,\r\n    id: string,\r\n    email: string,\r\n    isGroup: boolean\r\n}\r\n\r\nconst DropdownSearch: React.FunctionComponent<IDropdownProps> = props => {\r\n    let timeout: number | null = null; // to handle API call on user input\r\n    let initialReults = new Array<IDropdownItem>();\r\n\r\n    const [searchResult, setSearchResult] = React.useState(new Array<IDropdownItem>());\r\n    const [loading, setLoading] = React.useState(true);\r\n    const [isOpen, setOpen] = React.useState(false);\r\n    const [key, setKey] = React.useState(0);\r\n    const [selectedValue, setselectedValue] = React.useState(undefined);\r\n\r\n    const searchUsingAPI = async (searchQuery: string) => {\r\n        if (initialReults.length && !searchQuery.length) {\r\n            setSearchResult(initialReults);\r\n            return;\r\n        }\r\n\r\n        let array = new Array<IDropdownItem>();\r\n        const response = await searchUsersAndGroups(searchQuery);\r\n        if (response.status === 200 && response.data) {\r\n            const results: Array<IUserOrGroupSearchResult> = response.data;\r\n            for (let i = 0; i < results.length; i++) {\r\n                if (results[i].displayName && results[i].email) {\r\n                    array.push({ header: results[i].displayName, content: results[i].email, id: results[i].id, email: results[i].email, isGroup: results[i].isGroup });\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!initialReults.length) {\r\n            initialReults = [...array];\r\n        }\r\n\r\n        setSearchResult(array);\r\n        setLoading(false);\r\n    }\r\n\r\n    const initiateSearch = (searchQuery: string) => {\r\n        if (timeout) {\r\n            window.clearTimeout(timeout);\r\n        }\r\n        if (!loading) {\r\n            setLoading(true);\r\n        }\r\n\r\n        timeout = window.setTimeout(async () => { await searchUsingAPI(searchQuery) }, 750);\r\n    }\r\n\r\n    const onTypeSelection = {\r\n        onAdd: (item: any) => {\r\n            props.onItemSelect(item);\r\n            setKey(key + 1);\r\n            return \"\";\r\n        },\r\n    };\r\n\r\n    return (\r\n        <Dropdown\r\n            search\r\n            styles={{ width: \"100%\" }}\r\n            fluid\r\n            key={key}\r\n            loading={loading}\r\n            loadingMessage={props.loadingMessage}\r\n            items={searchResult}\r\n            value={selectedValue}\r\n            onChange={(e, { value }) => {\r\n                setselectedValue(undefined);\r\n            }}\r\n            onSearchQueryChange={(e, { searchQuery }) => {\r\n                initiateSearch(searchQuery!);\r\n            }}\r\n            onOpenChange={(e, { open, value }) => {\r\n                if (open) {\r\n                    setLoading(true);\r\n                    searchUsingAPI(\"\");\r\n                }\r\n                else {\r\n                    setSearchResult(new Array<IDropdownItem>())\r\n                }\r\n                setOpen(open!);\r\n            }}\r\n            open={isOpen}\r\n            getA11ySelectionMessage={onTypeSelection}\r\n            placeholder={props.placeholder}\r\n            noResultsMessage={props.noResultMessage}\r\n            data-testid=\"audience_dropdown_search\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default DropdownSearch;","// <copyright file=\"create-event-step2.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport DropdownSearch, { IDropdownItem } from \"../common/user-search-dropdown/dropdown-search\";\r\nimport { Text, Flex, Button, Dropdown, Checkbox, Table } from '@fluentui/react-northstar'\r\nimport { TrashCanIcon, QuestionCircleIcon, InfoIcon, ArrowLeftIcon, ArrowRightIcon } from '@fluentui/react-icons-northstar';\r\nimport { TFunction } from \"i18next\";\r\nimport { getLocalizedAudienceTypes } from \"../../helpers/localized-constants\";\r\nimport { IConstantDropdownItem } from \"../../constants/resources\";\r\nimport { ISelectedUserGroup } from \"../../models/ISelectedUserGroup\";\r\nimport { ICreateEventState } from \"./create-event-wrapper\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { ISelectedDropdownItem } from \"../../models/ISelectedDropdownItem\";\r\nimport { EventAudience } from \"../../models/event-audience\";\r\nimport { saveEventAsDraftAsync } from \"../../helpers/event-helper\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\ninterface ICreateEventsStep2Props extends WithTranslation {\r\n    navigateToPage: (nextPage: number, stepEventState: ICreateEventState) => void;\r\n    eventPageState: ICreateEventState;\r\n    dir: LanguageDirection;\r\n}\r\n\r\ninterface ICreateEventsStep2State {\r\n    selectedUsersAndGroups: Array<ISelectedUserGroup>,\r\n    eventDetails: IEvent,\r\n    selectedAudienceType: ISelectedDropdownItem,\r\n    audienceTypes: Array<IConstantDropdownItem>,\r\n    isLoading: boolean\r\n}\r\n\r\n/** This component adds a new event category */\r\nclass CreateEventStep2 extends React.Component<ICreateEventsStep2Props, ICreateEventsStep2State> {\r\n    readonly localize: TFunction;\r\n    teamId: string;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.teamId = \"\";\r\n        this.localize = this.props.t;\r\n        let audienceTypes = getLocalizedAudienceTypes(this.localize);\r\n        this.state = {\r\n            isLoading: false,\r\n            selectedAudienceType: { key: this.props.eventPageState.eventDetails.audience?.toString()!, header: audienceTypes.find((audience) => audience.id === this.props.eventPageState.eventDetails.audience!)?.name! },\r\n            selectedUsersAndGroups: this.props.eventPageState.selectedUserGroups.length > 0 ? this.props.eventPageState.selectedUserGroups : new Array<ISelectedUserGroup>(),\r\n            eventDetails: this.props.eventPageState.eventDetails,\r\n            audienceTypes: audienceTypes\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        microsoftTeams.initialize();\r\n        microsoftTeams.getContext((context: microsoftTeams.Context) => {\r\n            this.teamId = context.teamId!;\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Event handler for moving onto next event-step\r\n    */\r\n    nextBtnClick = () => {\r\n        let modifiedState = { ...this.props.eventPageState };\r\n        modifiedState.selectedUserGroups = this.state.selectedUsersAndGroups;\r\n        modifiedState.selectedAudience = this.state.selectedAudienceType;\r\n        modifiedState.eventDetails = this.state.eventDetails;\r\n        modifiedState.eventDetails.selectedUserOrGroupListJSON = JSON.stringify(this.state.selectedUsersAndGroups);\r\n        this.props.navigateToPage(3, modifiedState);\r\n    };\r\n\r\n    /**\r\n    *  Event handler for moving onto previous event-step\r\n    */\r\n    backBtnClick = () => {\r\n        let modifiedState = { ...this.props.eventPageState };\r\n        modifiedState.selectedUserGroups = this.state.selectedUsersAndGroups;\r\n        modifiedState.selectedAudience = this.state.selectedAudienceType;\r\n        modifiedState.eventDetails = this.state.eventDetails;\r\n        modifiedState.eventDetails.selectedUserOrGroupListJSON = JSON.stringify(this.state.selectedUsersAndGroups);\r\n        this.props.navigateToPage(1, modifiedState);\r\n    };\r\n\r\n    /**\r\n    * Updating member list for mandatory option change event\r\n    * @param memberIndex array index of a specific member in member list\r\n    */\r\n    onToggleChange = (memberIndex: number) => {\r\n        let members = this.state.selectedUsersAndGroups;\r\n        members[memberIndex].isMandatory = !members[memberIndex].isMandatory;\r\n\r\n        this.setState({ selectedUsersAndGroups: members });\r\n    }\r\n\r\n    /**\r\n    * Removing a member from selected member list for an event\r\n    * @param memberIndex array index of a specific member in member list\r\n    */\r\n    deleteItem = (memberIndex: number) => {\r\n        let members = this.state.selectedUsersAndGroups;\r\n        members.splice(memberIndex, 1);\r\n\r\n        this.setState({ selectedUsersAndGroups: members });\r\n    }\r\n\r\n    /**\r\n    * Fetched members through api call are rendered in a component \r\n    */\r\n    renderMembers = () => {\r\n        if (this.state.selectedUsersAndGroups && this.state.selectedUsersAndGroups.length > 0) {\r\n\r\n            let rows = this.state.selectedUsersAndGroups.map((member, index) => {\r\n                return {\r\n                    \"key\": index,\r\n                    \"items\": [\r\n                        {\r\n                            content: <>\r\n                                <Text weight=\"bold\" content={member.displayName} /><br />\r\n                                <Text size=\"small\" content={member.email} />\r\n                            </>,\r\n                            title: member.displayName,\r\n                            truncateContent: true\r\n                        },\r\n                        {\r\n                            content: <>\r\n                                    <Text content={this.localize(\"mandatoryToggleStep2\")}/>\r\n                                    <Checkbox \r\n                                        className={this.props.dir === LanguageDirection.Rtl ? \"rtl-toggle\" : \"\"}\r\n                                        onChange={() => this.onToggleChange(index)}\r\n                                        checked={member.isMandatory}\r\n                                        toggle\r\n                                    />\r\n                                </>,\r\n                            className: \"mandatory-toggle-column\"\r\n                        },\r\n                        {\r\n                            content: <TrashCanIcon className=\"icon-hover\" onClick={() => this.deleteItem(index)} />,\r\n                            className: \"delete-button-column\"\r\n                        }\r\n                    ]\r\n                }\r\n            });\r\n\r\n            return (\r\n                <Table className=\"selected-user-group-table\" rows={rows} />\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <Flex gap=\"gap.small\">\r\n                    <Flex.Item>\r\n                        <div\r\n                            style={{\r\n                                position: \"relative\",\r\n                            }}\r\n                        >\r\n                            <QuestionCircleIcon outline color=\"green\" />\r\n                        </div>\r\n                    </Flex.Item>\r\n                    <Flex.Item grow={this.props.dir === LanguageDirection.Ltr}>\r\n                        <Flex column gap=\"gap.small\" vAlign=\"stretch\" className={this.props.dir === LanguageDirection.Rtl ? \"rtl-right-margin-medium rtl-direction\" : \"\"}>\r\n                            <div>\r\n                                <Text weight=\"bold\" content={this.localize(\"noUserSelectedHeaderStep2\")} /><br />\r\n                                <Text size=\"small\" content={this.localize(\"noUserSelectedContentStep2\")}\r\n                                />\r\n                            </div>\r\n                        </Flex>\r\n                    </Flex.Item>\r\n                </Flex>\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event handler for selecting audience type\r\n    */\r\n    onAudienceTypeSelection = {\r\n        onAdd: (item: any) => {\r\n            this.setState({ selectedAudienceType: item });\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event handler for selecting users/group as an event audience\r\n    * @param selectedItem selected value of an user/group\r\n    */\r\n    onUserOrGroupSelection = async (selectedItem: IDropdownItem) => {\r\n        let selectedUserOrGroup: ISelectedUserGroup = {\r\n            displayName: selectedItem.header,\r\n            email: selectedItem.content,\r\n            id: selectedItem.id,\r\n            isGroup: selectedItem.isGroup,\r\n            isMandatory: true\r\n        };\r\n\r\n        let existingUsers = this.state.selectedUsersAndGroups;\r\n        let isAlreadyExist = existingUsers.find((userOrGroup) => userOrGroup.id === selectedUserOrGroup.id);\r\n        if (!isAlreadyExist) {\r\n            existingUsers.push(selectedUserOrGroup);\r\n            this.setState({ selectedUsersAndGroups: existingUsers });\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event Handler for audience type dropdown\r\n    * @param item selected audience type\r\n    */\r\n    onAudienceChange = (item: any) => {\r\n        this.setState((prevState: ICreateEventsStep2State) => ({\r\n            eventDetails: { ...prevState.eventDetails, audience: item.key },\r\n            selectedAudienceType: item\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Event handler for auto-registering the mandatory users for an event\r\n    */\r\n    onAutoRegisterToggleChange = () => {\r\n        this.setState((prevState: ICreateEventsStep2State) => ({\r\n            eventDetails: { ...prevState.eventDetails, isAutoRegister: !this.state.eventDetails.isAutoRegister }\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Event handler for saving event as a draft\r\n    */\r\n    saveEventAsDraft = async () => {\r\n        this.setState({ isLoading: true });\r\n        let modifiedState = { ...this.props.eventPageState };\r\n        modifiedState.selectedUserGroups = this.state.selectedUsersAndGroups;\r\n        modifiedState.selectedAudience = this.state.selectedAudienceType;\r\n        modifiedState.eventDetails = this.state.eventDetails;\r\n        modifiedState.eventDetails.selectedUserOrGroupListJSON = JSON.stringify(this.state.selectedUsersAndGroups);\r\n\r\n        let result = await saveEventAsDraftAsync(modifiedState, this.teamId);\r\n        if (result) {\r\n            microsoftTeams.tasks.submitTask({ isSuccess: true, isDraft: true });\r\n        }\r\n        else {\r\n            this.setState({ isLoading: false });\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event handler for selecting mandatory all option\r\n    */\r\n    onMandatoryAllClocked = () => {\r\n        let selectedUserGroup = [...this.state.selectedUsersAndGroups];\r\n        for (var i = 0; i < selectedUserGroup.length; i++) {\r\n            selectedUserGroup[i].isMandatory = true;\r\n        }\r\n\r\n        this.setState({ selectedUsersAndGroups: selectedUserGroup });\r\n    }\r\n\r\n    /** Renders a component */\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\">\r\n                    <Flex gap=\"gap.smaller\">\r\n                        <Text size=\"large\" content={this.localize(\"audienceDetailsStep2\")} />\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                        <Flex.Item size=\"size.half\">\r\n                            <Flex gap=\"gap.smaller\" vAlign=\"center\">\r\n                                <Text className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small form-label\" : \"form-label\"} content={this.localize(\"audienceTypeStep2\")} />\r\n                                <InfoIcon outline title={this.localize(\"audienceTypeInfoIconTitle\")} />\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                        <Flex.Item size=\"size.half\">\r\n                            <Dropdown\r\n                                fluid\r\n                                value={this.state.selectedAudienceType}\r\n                                items={this.state.audienceTypes.map((value: IConstantDropdownItem) => { return { key: value.id, header: value.name } })}\r\n                                onChange={(event, data) => { this.onAudienceChange(data.value) }}\r\n                                data-testid=\"event_audience_dropdown\"\r\n                            />\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    {this.state.eventDetails.audience === EventAudience.Private && <>\r\n                        <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                            <DropdownSearch\r\n                                loadingMessage={this.localize(\"dropdownSearchLoadingMessage\")}\r\n                                noResultMessage={this.localize(\"noResultFoundDropdownMessage\")}\r\n                                placeholder={this.localize(\"startTypingDropdownSearch\")}\r\n                                onItemSelect={this.onUserOrGroupSelection}\r\n                            />\r\n                        </Flex>\r\n                        <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                            <Checkbox onChange={() => this.onAutoRegisterToggleChange()} checked={this.state.eventDetails.isAutoRegister} label={this.localize(\"autoRegisterCheckboxLabelStep2\")} data-testid=\"auto_toggle\" />\r\n                            <Flex.Item push={this.props.dir === LanguageDirection.Ltr} grow={this.props.dir === LanguageDirection.Rtl}>\r\n                                <Button\r\n                                    onClick={this.onMandatoryAllClocked}\r\n                                    primary\r\n                                    text\r\n                                    content={this.localize(\"mandatoryAllButtonStep2\")}\r\n                                    disabled={this.state.selectedUsersAndGroups.filter((userOrGroup) => userOrGroup.isMandatory === false).length === 0}\r\n                                    data-testid=\"audience_mandatory_button\"\r\n                                    className={this.props.dir === LanguageDirection.Rtl ? \"left-push\" : \"\" }\r\n                                />\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                        {this.renderMembers()}\r\n                    </>}\r\n                </div>\r\n                {this.props.dir === LanguageDirection.Ltr && <Flex gap=\"gap.smaller\" className=\"button-footer\" vAlign=\"center\">\r\n                    <Button icon={<ArrowLeftIcon />} text content={this.localize(\"back\")} onClick={this.backBtnClick} data-testid=\"back_button\" />\r\n                    <Flex.Item push>\r\n                        <Text weight=\"bold\" content={this.localize(\"step2Of3\")} />\r\n                    </Flex.Item>\r\n                    {(!this.props.eventPageState.isEdit || (this.props.eventPageState.isEdit && this.props.eventPageState.isDraft)) && <Button disabled={this.state.isLoading} loading={this.state.isLoading} onClick={this.saveEventAsDraft} content={this.localize(\"saveAsDraft\")} secondary data-testid=\"save_draft_button\" />}\r\n                    <Button content={this.localize(\"nextButton\")} disabled={this.state.isLoading || (this.state.eventDetails.audience === EventAudience.Private && this.state.selectedUsersAndGroups.length === 0)} primary onClick={this.nextBtnClick} data-testid=\"next_button\" />\r\n                </Flex>}\r\n\r\n                {this.props.dir === LanguageDirection.Rtl && <Flex gap=\"gap.smaller\" className=\"button-footer\" vAlign=\"center\">\r\n                    <Flex.Item push>\r\n                        <Button icon={<ArrowRightIcon />} text content={<Text content={this.localize(\"back\")} className={this.props.dir === LanguageDirection.Rtl ? \"rtl-right-margin-small\" : \"\" }/>} onClick={this.backBtnClick} data-testid=\"back_button\" />\r\n                    </Flex.Item>\r\n                    <Text className=\"rtl-left-margin-small\" weight=\"bold\" content={this.localize(\"step2Of3\")} />\r\n                    {(!this.props.eventPageState.isEdit || (this.props.eventPageState.isEdit && this.props.eventPageState.isDraft)) && <Button className=\"rtl-right-margin-small\" disabled={this.state.isLoading} loading={this.state.isLoading} onClick={this.saveEventAsDraft} content={this.localize(\"saveAsDraft\")} secondary data-testid=\"save_draft_button\" />}\r\n                    <Button content={this.localize(\"nextButton\")} disabled={this.state.isLoading || (this.state.eventDetails.audience === EventAudience.Private && this.state.selectedUsersAndGroups.length === 0)} primary onClick={this.nextBtnClick} data-testid=\"next_button\" />\r\n                </Flex>}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nexport default withTranslation()(CreateEventStep2);","// <copyright file=\"create-event-step3.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { Text, Flex, Image, Button, ArrowLeftIcon, ArrowRightIcon, Layout, Divider } from '@fluentui/react-northstar'\r\nimport { TFunction } from \"i18next\";\r\nimport { Icon } from 'office-ui-fabric-react';\r\nimport { ICreateEventState } from \"./create-event-wrapper\";\r\nimport { EventType } from \"../../models/event-type\";\r\nimport moment from 'moment';\r\nimport { EventAudience } from \"../../models/event-audience\";\r\nimport { createEvent, saveEventAsDraftAsync, validateSelectedUsers, updateEventDetails } from \"../../helpers/event-helper\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport AudienceArtifact from \"../../components/common/event-artifacts/audience\";\r\nimport TeamsMeetingArtifact from \"../../components/common/event-artifacts/teams-meeting\";\r\nimport LiveEventArtifact from \"../../components/common/event-artifacts/live-event\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\ninterface ICreateEventsStep3Props extends WithTranslation, IWithContext {\r\n    navigateToPage: (nextPage: number, stepEventState: ICreateEventState) => void;\r\n    eventPageState: ICreateEventState;\r\n}\r\n\r\ninterface ICreateEventsStep3State {\r\n    isCreateLoading: boolean,\r\n    isDraftLoading: boolean,\r\n    registeredAttendeesCount: number\r\n}\r\n\r\n/** This component adds a new event category */\r\nclass CreateEventStep3 extends React.Component<ICreateEventsStep3Props, ICreateEventsStep3State> {\r\n    readonly localize: TFunction;\r\n    teamId: string;\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n        this.teamId = \"\";\r\n        this.state = {\r\n            isCreateLoading: false,\r\n            registeredAttendeesCount: 0,\r\n            isDraftLoading: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        microsoftTeams.initialize();\r\n        microsoftTeams.getContext((context: microsoftTeams.Context) => {\r\n            this.teamId = context.teamId!;\r\n        });\r\n\r\n        if (this.props.eventPageState.eventDetails.audience === EventAudience.Private && this.props.eventPageState.eventDetails.isAutoRegister) {\r\n            this.getRegisteredAttendeesCount();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Sets the attendees count attending the event in state\r\n    */\r\n    getRegisteredAttendeesCount = async () => {\r\n        let result = await validateSelectedUsers([...this.props.eventPageState.selectedUserGroups]);\r\n        this.setState({ registeredAttendeesCount: result.mandatoryUsers.length });\r\n    }\r\n\r\n    /**\r\n    * Event handler for moving onto previous step\r\n    */\r\n    backBtnClick = () => {\r\n        this.props.navigateToPage(2, this.props.eventPageState);\r\n    };\r\n\r\n    /** Renders artifacts */\r\n    getArtifacts = () => {\r\n        let artifactElements: Array<JSX.Element> = [];\r\n\r\n        switch (this.props.eventPageState.eventDetails?.type) {\r\n            case EventType.Teams:\r\n                artifactElements.push(<TeamsMeetingArtifact />);\r\n                break;\r\n\r\n            case EventType.LiveEvent:\r\n                artifactElements.push(<LiveEventArtifact />);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        switch (this.props.eventPageState.eventDetails?.audience) {\r\n            case EventAudience.Private:\r\n                artifactElements.push(<AudienceArtifact audienceType={EventAudience.Private} />);\r\n                break;\r\n\r\n            case EventAudience.Public:\r\n                artifactElements.push(<AudienceArtifact audienceType={EventAudience.Public} />);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <Flex gap=\"gap.small\" vAlign=\"center\">\r\n                {artifactElements}\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Format and renders event day and time as per local time\r\n     * @param startDate The start date of an event\r\n     * @param startTime The start time of an event\r\n     * @param endTime The end time of an event\r\n     */\r\n    getEventDayAndTime = (startDate: Date, startTime: Date, endTime: Date) => {\r\n        let eventDay = moment.utc(startDate).local().format(\"ddd\");\r\n        let eventStartTime = moment.utc(startTime).local().format(\"HH:mm\");\r\n        let eventEndTime = moment.utc(endTime).local().format(\"HH:mm\");\r\n\r\n        return `${eventDay}, ${eventStartTime} - ${eventEndTime}`;\r\n    }\r\n\r\n    /**\r\n     * Renders event venue if event type is In-Person\r\n     * @param eventType The event type\r\n     * @param venue The event venue\r\n     */\r\n    renderEventVenue = (eventType: number, venue: string) => {\r\n        if (eventType === EventType.InPerson) {\r\n            return (\r\n                <React.Fragment>\r\n                    <Divider vertical styles={{ height: \"1.13rem\", marginRight: \".8rem\" }} />\r\n                    <Text className=\"event-venue\" content={venue} weight=\"semibold\" size=\"small\" />\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event handler for saving event as a draft\r\n    */\r\n    saveEventAsDraft = async () => {\r\n        this.setState({ isDraftLoading: true });\r\n        let result = await saveEventAsDraftAsync({ ...this.props.eventPageState }, this.teamId);\r\n        if (result) {\r\n            microsoftTeams.tasks.submitTask({ isSuccess: true, isDraft: true });\r\n        }\r\n        else {\r\n            this.setState({ isDraftLoading: false });\r\n            microsoftTeams.tasks.submitTask({ isSuccess: false, isDraft: true });\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event Handler for creating an event\r\n    */\r\n    createEvent = async () => {\r\n        this.setState({ isCreateLoading: true });\r\n        let result = await createEvent(this.props.eventPageState, this.teamId);\r\n        if (result) {\r\n            microsoftTeams.tasks.submitTask({ isSuccess: true, isCreateEvent: true });\r\n        }\r\n        else {\r\n            this.setState({ isCreateLoading: false });\r\n            microsoftTeams.tasks.submitTask({ isSuccess: false, isCreateEvent: true });\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Updating an already created event and fetching its saved details\r\n    */\r\n    updateEvent = async () => {\r\n        this.setState({ isCreateLoading: true });\r\n        let result = await updateEventDetails(this.props.eventPageState, this.teamId);\r\n        if (result) {\r\n            microsoftTeams.tasks.submitTask({ isSuccess: true });\r\n        }\r\n        else {\r\n            this.setState({ isCreateLoading: false });\r\n            microsoftTeams.tasks.submitTask({ isSuccess: false });\r\n        }\r\n    }\r\n\r\n    /** Renders the attendee URL for live event */\r\n    renderAttendeeURL = () => {\r\n        if (this.props.eventPageState.eventDetails.type === EventType.LiveEvent) {\r\n            return (\r\n                <Flex design={{ marginTop: \"2.67rem\" }} vAlign=\"center\" hAlign=\"start\" column>\r\n                    <Text content={this.localize(\"liveEventUrlStep1\")} weight=\"semibold\" />\r\n                    <a href={this.props.eventPageState.eventDetails.meetingLink} target=\"_blank\" rel=\"noopener noreferrer\">{this.props.eventPageState.eventDetails.meetingLink}</a>\r\n                </Flex>\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Renders a component */\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"page-content create-event-step3\">\r\n                    <Flex gap=\"gap.smaller\">\r\n                        <Text size=\"large\" content={this.localize(\"eventPreviewStep3\")} />\r\n                    </Flex>\r\n                    <Flex className=\"margin-top\" space=\"between\" vAlign=\"center\">\r\n                        <Text className=\"category label-color\" content={this.props.eventPageState.selectedCategory?.header!} weight=\"bold\" />\r\n                        <Flex.Item push={this.props.dir === LanguageDirection.Ltr}>\r\n                            {this.getArtifacts()}\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    {this.props.eventPageState.eventDetails.photo && <Image className=\"event-image\" fluid src={this.props.eventPageState.eventDetails.photo} />}\r\n                    {this.props.eventPageState.eventDetails.selectedColor && <div className=\"event-image\" style={{ backgroundColor: this.props.eventPageState.eventDetails.selectedColor }}>\r\n                        <Flex className=\"event-image-color\" hAlign=\"center\" vAlign=\"center\">\r\n                            <Text className=\"event-color-text\" size=\"large\" weight=\"semibold\" content={this.props.eventPageState.eventDetails.name} />\r\n                        </Flex>\r\n                    </div>}\r\n                    <div style={{ marginTop: \"1.33rem\" }}>\r\n                        <Text align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.props.eventPageState.eventDetails.name} weight=\"bold\" size=\"medium\" />\r\n                    </div>\r\n                    <Flex vAlign=\"center\" hAlign=\"start\">\r\n                        <Layout\r\n                            className=\"event-date-and-time\"\r\n                            start={<Icon iconName=\"Clock\" />}\r\n                            main={<Text content={this.getEventDayAndTime(this.props.eventPageState.eventDetails.startDate, this.props.eventPageState.eventDetails.startTime!, this.props.eventPageState.eventDetails.endTime!)} weight=\"semibold\" size=\"small\" />}\r\n                            gap=\".4rem\"\r\n                        />\r\n                        {this.renderEventVenue(this.props.eventPageState.eventDetails.type, this.props.eventPageState.eventDetails.venue)}\r\n                    </Flex>\r\n                    <Flex vAlign=\"center\" hAlign=\"start\" design={{ marginTop: \"2.67rem\" }}>\r\n                        <Text align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.props.eventPageState.eventDetails.description} />\r\n                    </Flex>\r\n                    {this.renderAttendeeURL()}\r\n                    <Flex gap={this.props.dir === LanguageDirection.Rtl ? undefined : \"gap.large\"} design={{ marginTop: \"2.67rem\" }}>\r\n                        <Flex column className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}>\r\n                            <Text align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.localize(\"totalNoOfParticipants\")} weight=\"semibold\" />\r\n                            <Text align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.props.eventPageState.eventDetails.maximumNumberOfParticipants} />\r\n                        </Flex>\r\n                        <Flex column>\r\n                            <Text align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.localize(\"registeredParticipants\")} weight=\"semibold\" />\r\n                            <Text align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.state.registeredAttendeesCount} />\r\n                        </Flex>\r\n                    </Flex>\r\n                </div>\r\n                {this.props.dir === LanguageDirection.Ltr && <Flex gap=\"gap.smaller\" className=\"button-footer\" vAlign=\"center\">\r\n                    <Button disabled={this.state.isCreateLoading} icon={<ArrowLeftIcon />} text content={this.localize(\"back\")} onClick={this.backBtnClick} />\r\n                    <Flex.Item push>\r\n                        <Text weight=\"bold\" content={this.localize(\"step3of3\")} />\r\n                    </Flex.Item>\r\n                    {\r\n                        (this.props.eventPageState.isDraft || !this.props.eventPageState.isEdit) && <>\r\n                            <Button disabled={this.state.isCreateLoading || this.state.isDraftLoading} loading={this.state.isDraftLoading} onClick={this.saveEventAsDraft} content={this.localize(\"saveAsDraft\")} secondary data-testid=\"save_button\" />\r\n                            <Button disabled={this.state.isCreateLoading || this.state.isDraftLoading} loading={this.state.isCreateLoading} content={this.localize(\"createEvent\")} primary onClick={this.createEvent} data-testid=\"create_event_button\" />\r\n                        </>\r\n                    }\r\n                    {\r\n                        !this.props.eventPageState.isDraft && this.props.eventPageState.isEdit && <>\r\n                            <Button disabled={this.state.isCreateLoading} loading={this.state.isCreateLoading} content={this.localize(\"updateEventButton\")} primary onClick={this.updateEvent} data-testid=\"update_button\" />\r\n                        </>\r\n                    }\r\n                </Flex>}\r\n\r\n                {this.props.dir === LanguageDirection.Rtl && <Flex gap=\"gap.smaller\" className=\"button-footer\" vAlign=\"center\">\r\n                    <Flex.Item push>\r\n                        <Button\r\n                            disabled={this.state.isCreateLoading}\r\n                            icon={<ArrowRightIcon />}\r\n                            text\r\n                            content={<Text content={this.localize(\"back\")} className=\"rtl-right-margin-small\" />}\r\n                            onClick={this.backBtnClick}\r\n                        />\r\n                    </Flex.Item>\r\n                    \r\n                    <Text className=\"rtl-left-margin-small\" weight=\"bold\" content={this.localize(\"step3of3\")} />\r\n                    {\r\n                        (this.props.eventPageState.isDraft || !this.props.eventPageState.isEdit) && <>\r\n                            <Button className=\"rtl-left-margin-small\" disabled={this.state.isCreateLoading || this.state.isDraftLoading} loading={this.state.isDraftLoading} onClick={this.saveEventAsDraft} content={this.localize(\"saveAsDraft\")} secondary data-testid=\"save_button\" />\r\n                            <Button disabled={this.state.isCreateLoading || this.state.isDraftLoading} loading={this.state.isCreateLoading} content={this.localize(\"createEvent\")} primary onClick={this.createEvent} data-testid=\"create_event_button\" />\r\n                        </>\r\n                    }\r\n                    {\r\n                        !this.props.eventPageState.isDraft && this.props.eventPageState.isEdit && <>\r\n                            <Button className=\"rtl-left-margin-small\" disabled={this.state.isCreateLoading} loading={this.state.isCreateLoading} content={this.localize(\"updateEventButton\")} primary onClick={this.updateEvent} data-testid=\"update_button\" />\r\n                        </>\r\n                    }\r\n                </Flex>}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(CreateEventStep3));","// <copyright file=\"event-details.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Text, Label, Image, EyeSlashIcon, Divider, EyeIcon, Avatar, Layout, Loader } from \"@fluentui/react-northstar\";\r\nimport { Icon } from 'office-ui-fabric-react';\r\nimport { IEvent } from \"../../../models/IEvent\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { EventAudience } from \"../../../models/event-audience\";\r\nimport { EventType } from \"../../../models/event-type\";\r\nimport { getUserProfiles } from \"../../../api/user-group-api\"\r\nimport { ResponseStatus } from \"../../../constants/constants\";\r\nimport moment from \"moment\";\r\n\r\nimport \"../../manage-events/manage-events.css\";\r\n\r\ninterface IEventDetailsProps {\r\n    eventDetails: IEvent\r\n}\r\n\r\n/** Renders component to close event registrations or cancel an event */\r\nconst EventDetails: React.FunctionComponent<IEventDetailsProps> = props => {\r\n    const localize = useTranslation().t;\r\n\r\n    let [eventDetails, setEventDetails] = React.useState(props.eventDetails);\r\n    let [isLoading, setLoading] = React.useState(false);\r\n    let [errorGettingEventDetails, setEventDetailsError] = React.useState(false);\r\n    let [createdByName, setCreatedByName] = React.useState(\"\");\r\n\r\n    React.useEffect(() => {\r\n        getUserProfile(props.eventDetails.createdBy);\r\n    }, [props.eventDetails]);\r\n\r\n    React.useEffect(() => { getUserProfile(props.eventDetails.createdBy); }, []);\r\n\r\n    /**\r\n     * Get event creator information\r\n     * @param userId The user ID of which information to get\r\n     */\r\n    const getUserProfile = async (userId: string) => {\r\n        let user: Array<string> = [userId];\r\n        let response = await getUserProfiles(user);\r\n\r\n        if (response.status === ResponseStatus.OK && response.data) {\r\n            let userInfo = response.data[0];\r\n            setCreatedByName(userInfo.displayName);\r\n        }\r\n    }\r\n\r\n    /** Renders event audience */\r\n    const getEventAudience = () => {\r\n        if (eventDetails.audience === EventAudience.Private) {\r\n            return <Label className=\"category-type-label\" circular icon={<EyeSlashIcon />} iconPosition=\"start\" content={localize(\"private\")} />;\r\n        }\r\n        else {\r\n            return <Label className=\"category-type-label\" circular icon={<EyeIcon />} iconPosition=\"start\" content={localize(\"public\")} />;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Format and renders event day and time as per local time\r\n     * @param startDate The start date of an event\r\n     * @param startTime The start time of an event\r\n     * @param endTime The end time of an event\r\n     */\r\n    const getEventDayAndTime = (startDate: Date, startTime: Date, endTime: Date) => {\r\n        let eventDay = moment.utc(startDate).local().format(\"ddd\");\r\n        let eventStartTime = moment.utc(startTime).local().format(\"HH:mm\");\r\n        let eventEndTime = moment.utc(endTime).local().format(\"HH:mm\");\r\n\r\n        return `${eventDay}, ${eventStartTime} - ${eventEndTime}`;\r\n    }\r\n\r\n    /** Renders the event creator information */\r\n    const renderEventCreatorInfo = () => {\r\n        let name = createdByName && createdByName.length ? createdByName : localize(\"unknownUserName\");\r\n        return (\r\n            <Flex vAlign=\"center\" hAlign=\"start\" gap=\"gap.smaller\" design={{ marginTop: \"2.67rem\" }}>\r\n                <Avatar\r\n                    size=\"small\"\r\n                    name={name}\r\n                />\r\n                <Layout\r\n                    start={<Text content={localize(\"createdBy\")} size=\"small\" />}\r\n                    main={<Text content={name} size=\"small\" weight=\"semibold\" />}\r\n                    gap=\".4rem\"\r\n                />\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Renders event venue if event type is In-Person\r\n     * @param eventType The event type\r\n     * @param venue The event venue\r\n     */\r\n    const renderEventVenue = (eventType: number, venue: string) => {\r\n        if (eventType === EventType.InPerson) {\r\n            return (\r\n                <React.Fragment>\r\n                    <Divider vertical styles={{ height: \"1.13rem\", marginRight: \".8rem\" }} />\r\n                    <Text className=\"event-venue\" content={venue} weight=\"semibold\" size=\"small\" />\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Renders component */\r\n    const renderEventDetails = () => {\r\n        if (isLoading) {\r\n            return (\r\n                <Loader className=\"task-module-loader\" />\r\n            );\r\n        }\r\n\r\n        if (errorGettingEventDetails) {\r\n            return <Text error content={localize(\"dataResponseFailedStatus\")} weight=\"semibold\" />\r\n        }\r\n\r\n        return (\r\n            <div className=\"close-cancel-event-container\">\r\n                <div className=\"close-cancel-event\">\r\n                    <Flex space=\"between\" vAlign=\"center\">\r\n                        <Text className=\"category label-color\" content={eventDetails.categoryName} weight=\"bold\" />\r\n                        <Flex.Item push>\r\n                            {getEventAudience()}\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <Image className=\"event-image\" fluid src={eventDetails.photo} />\r\n                    <div style={{ marginTop: \"1.33rem\" }}>\r\n                        <Text content={eventDetails.name} weight=\"bold\" size=\"medium\" />\r\n                    </div>\r\n                    <Flex vAlign=\"center\" hAlign=\"start\">\r\n                        <Layout\r\n                            className=\"event-date-and-time\"\r\n                            start={<Icon iconName=\"Clock\" />}\r\n                            main={<Text content={getEventDayAndTime(eventDetails.startDate, eventDetails.startTime!, eventDetails.endTime!)} weight=\"semibold\" size=\"small\" />}\r\n                            gap=\".4rem\"\r\n                        />\r\n                        {renderEventVenue(eventDetails.type, eventDetails.venue)}\r\n                    </Flex>\r\n                    <Flex vAlign=\"center\" hAlign=\"start\" design={{ marginTop: \"2.67rem\" }}>\r\n                        <Text content={eventDetails.description} />\r\n                    </Flex>\r\n                    <Flex gap=\"gap.large\" design={{ marginTop: \"2.67rem\" }}>\r\n                        <Flex column>\r\n                            <Text content={localize(\"totalNoOfParticipants\")} weight=\"semibold\" />\r\n                            <Text content={eventDetails.maximumNumberOfParticipants} />\r\n                        </Flex>\r\n                        <Flex column>\r\n                            <Text content={localize(\"registeredParticipants\")} weight=\"semibold\" />\r\n                            <Text content={eventDetails.registeredAttendeesCount} />\r\n                        </Flex>\r\n                    </Flex>\r\n                    {renderEventCreatorInfo()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return renderEventDetails();\r\n}\r\n\r\nexport default EventDetails;","// <copyright file=\"create-event-wrapper.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport moment from \"moment\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { Flex, Provider, Loader, Text } from '@fluentui/react-northstar'\r\nimport { TFunction } from \"i18next\";\r\nimport CreateEventStep1 from \"../create-event/create-event-step1\";\r\nimport CreateEventStep2 from \"../create-event/create-event-step2\";\r\nimport CreateEventStep3 from \"../create-event/create-event-step3\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { ISelectedUserGroup } from \"../../models/ISelectedUserGroup\";\r\nimport { ISelectedDropdownItem } from \"../../models/ISelectedDropdownItem\";\r\nimport { EventType } from \"../../models/event-type\";\r\nimport { EventAudience } from \"../../models/event-audience\";\r\nimport { IConstantDropdownItem } from \"../../constants/resources\";\r\nimport { getEventAsync } from \"../../api/common-api\";\r\nimport { ResponseStatus } from \"../../constants/constants\";\r\nimport { EventStatus } from \"../../models/event-status\";\r\nimport EventDetails from \"../common/event-details/event-details\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport { getEventCategoriesAsync } from \"../../api/create-event-api\";\r\nimport { Fabric } from \"@fluentui/react\";\r\n\r\nimport \"./create-event.css\";\r\n\r\ninterface ICreateEventProps extends WithTranslation, IWithContext {\r\n}\r\n\r\nexport interface ICreateEventState {\r\n    currentEventStep: number,\r\n    eventDetails: IEvent,\r\n    selectedCategory: ISelectedDropdownItem | undefined,\r\n    selectedEvent: ISelectedDropdownItem | undefined,\r\n    selectedAudience: ISelectedDropdownItem | undefined,\r\n    selectedUserGroups: Array<ISelectedUserGroup>,\r\n    categories: Array<IConstantDropdownItem>,\r\n    isEdit: boolean,\r\n    isDraft: boolean,\r\n    isLoading: boolean,\r\n    displayReadonly: boolean\r\n}\r\n\r\nclass CreateEventWrapper extends React.Component<ICreateEventProps, ICreateEventState> {\r\n    readonly localize: TFunction;\r\n    minDate = new Date();\r\n    params: { eventId?: string | undefined, isDraft?: boolean | undefined } = { eventId: undefined, isDraft: false };\r\n    teamId: string;\r\n\r\n    /** Constructor which initializes state */\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n        this.minDate.setDate(this.minDate.getDate() + 1);\r\n        this.teamId = \"\";\r\n        let search = window.location.search;\r\n        let params = new URLSearchParams(search);\r\n        this.params.eventId = params.get(\"eventId\")!;\r\n        this.params.isDraft = params.get(\"isDraft\")! === \"true\" ? true : false;\r\n\r\n        this.state = {\r\n            currentEventStep: 1,\r\n            categories: new Array<IConstantDropdownItem>(),\r\n            displayReadonly: false,\r\n            eventDetails: {\r\n                categoryId: \"\",\r\n                categoryName: \"\",\r\n                createdBy: \"\",\r\n                createdOn: new Date(),\r\n                description: \"\",\r\n                endDate: this.minDate,\r\n                eventId: \"\",\r\n                graphEventId: \"\",\r\n                isAutoRegister: false,\r\n                isRegistrationClosed: false,\r\n                maximumNumberOfParticipants: 0,\r\n                meetingLink: \"\",\r\n                name: \"\",\r\n                numberOfOccurrences: 1,\r\n                photo: \"\",\r\n                registeredAttendeesCount: 0,\r\n                startDate: this.minDate,\r\n                status: 0,\r\n                teamId: \"\",\r\n                type: EventType.Teams,\r\n                venue: \"\",\r\n                audience: EventAudience.Public,\r\n                endTime: undefined,\r\n                startTime: undefined,\r\n                mandatoryAttendees: \"\",\r\n                optionalAttendees: \"\",\r\n                registeredAttendees: \"\",\r\n                selectedUserOrGroupListJSON: \"\",\r\n                autoRegisteredAttendees: \"\",\r\n            },\r\n            selectedCategory: undefined,\r\n            selectedEvent: undefined,\r\n            selectedAudience: undefined,\r\n            selectedUserGroups: new Array<ISelectedUserGroup>(),\r\n            isEdit: false,\r\n            isDraft: false,\r\n            isLoading: true\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getAllCategories();\r\n    }\r\n\r\n    /** Gets teams context from HOC as props */\r\n    componentWillReceiveProps(nextProps: ICreateEventProps) {\r\n        if (nextProps.teamsContext && nextProps.teamsContext !== this.props.teamsContext) {\r\n            this.teamId = nextProps.teamsContext.teamId!;\r\n\r\n            if (this.params.eventId) {\r\n                this.getEventDetailsToUpdate();\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Updating Event Details required */\r\n    getEventDetailsToUpdate = async () => {\r\n        var response = await getEventAsync(this.params.eventId!, this.teamId);\r\n        if (response.status === ResponseStatus.OK) {\r\n            let eventDetails = response.data as IEvent;\r\n            let selectedUsersOrGroups = Array<ISelectedUserGroup>();\r\n\r\n            if (eventDetails.selectedUserOrGroupListJSON) {\r\n                selectedUsersOrGroups = JSON.parse(eventDetails.selectedUserOrGroupListJSON);\r\n            }\r\n            eventDetails.startDate = moment.utc(eventDetails.startDate).local().toDate();\r\n            eventDetails.endDate = moment.utc(eventDetails.endDate).local().toDate();\r\n            eventDetails.startTime = moment.utc(eventDetails.startTime).local().toDate();\r\n            eventDetails.endTime = moment.utc(eventDetails.endTime).local().toDate();\r\n\r\n            if (eventDetails.status === EventStatus.Cancelled || eventDetails.endDate < new Date()) {\r\n                this.setState({ isLoading: false, displayReadonly: true, eventDetails: eventDetails }, this.getAllCategories);\r\n            } else {\r\n                this.setState({ isLoading: false, eventDetails: eventDetails, selectedUserGroups: selectedUsersOrGroups, isEdit: true, isDraft: this.params.isDraft! }, this.getAllCategories);\r\n            }\r\n\r\n        }\r\n        else {\r\n            this.setState({\r\n                isLoading: false\r\n            });\r\n        }\r\n    }\r\n\r\n    /** Event Handler for fetching the category list and rendering it */\r\n    getAllCategories = async () => {\r\n        let response = await getEventCategoriesAsync();\r\n\r\n        if (response.status === ResponseStatus.OK) {\r\n            let categories: any = response.data.map((category: any) => {\r\n                return { name: category.name, id: category.categoryId };\r\n            });\r\n\r\n            let selectedCategory: ISelectedDropdownItem;\r\n            if (this.state.eventDetails.categoryId) {\r\n                let category = categories.find((category: any) => category.id === this.state.eventDetails.categoryId);\r\n                selectedCategory = { header: category.name, key: category.id };\r\n\r\n                this.setState({ categories: categories, selectedCategory: selectedCategory, isLoading: false });\r\n            }\r\n            else {\r\n                this.setState({ categories: categories, isLoading: false });\r\n            }\r\n        }\r\n        else {\r\n            this.setState({ isLoading: false });\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Set state of an event on navigating to next step\r\n    * @param currentStep shows the event step which is currently active\r\n    * @param stepEventState current state of the event\r\n    */\r\n    setEventStep = (currentStep: number, stepEventState: ICreateEventState) => {\r\n        this.setState({ currentEventStep: currentStep, eventDetails: stepEventState.eventDetails, selectedAudience: stepEventState.selectedAudience, selectedCategory: stepEventState.selectedCategory, selectedEvent: stepEventState.selectedEvent, selectedUserGroups: stepEventState.selectedUserGroups, categories: stepEventState.categories });\r\n    }\r\n\r\n    /** Renders component based on Add, Edit or Delete */\r\n    renderOperation = () => {\r\n        switch (this.state.currentEventStep) {\r\n            case 1:\r\n                return <CreateEventStep1 eventPageState={{ ...this.state }} navigateToPage={this.setEventStep} />\r\n            case 2:\r\n                return <CreateEventStep2 eventPageState={{ ...this.state }} navigateToPage={this.setEventStep} dir={this.props.dir}/>\r\n            case 3:\r\n                return <CreateEventStep3 eventPageState={{ ...this.state }} navigateToPage={this.setEventStep} />\r\n            default:\r\n                return <CreateEventStep1 eventPageState={{ ...this.state }} navigateToPage={this.setEventStep} />\r\n        }\r\n    }\r\n\r\n    /** Renders the component */\r\n    render() {\r\n        if (!this.state.isLoading && !this.state.categories?.length) {\r\n            return (\r\n                <Provider>\r\n                    <Flex>\r\n                        <div className=\"task-module-container event-task-module\">\r\n                            <Text error content={this.localize(\"categoriesNotAvailableError\")} weight=\"semibold\" />\r\n                        </div>\r\n                    </Flex>\r\n                </Provider>\r\n            );\r\n        }\r\n\r\n        if (this.state.displayReadonly) {\r\n            return <EventDetails eventDetails={this.state.eventDetails} />\r\n        }\r\n        else {\r\n            return (\r\n                <Fabric dir={this.props.dir}>\r\n                    <Provider>\r\n                        <Flex>\r\n                            <div className=\"task-module-container\">\r\n                                {!this.state.isLoading && !this.state.displayReadonly && this.renderOperation()}\r\n                                {this.state.isLoading && <Loader className=\"loader\" />}\r\n                            </div>\r\n                        </Flex>\r\n                    </Provider>\r\n                </Fabric>\r\n            );\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(CreateEventWrapper));","// <copyright file=\"manage-categories-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\nimport { AxiosRequestConfig } from \"axios\";\r\nimport { ICategory } from \"../models/ICategory\";\r\nimport Constants from \"../constants/constants\";\r\nimport { getAPIRequestConfigParams } from \"../helpers/api-helper\";\r\n\r\n/**\r\n * Gets event categories\r\n * @param teamId The LnD team Id\r\n */\r\nexport const getCategoriesAsync = async (teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/category`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId });\r\n\r\n    return await axios.get(url, config);\r\n}\r\n\r\n/**\r\n * Gets event categories\r\n * @param teamId The LnD team Id\r\n */\r\nexport const getEventCategoriesAsync = async () => {\r\n    let url = `${Constants.apiBaseURL}/category/get-categories-for-event`;\r\n    return await axios.get(url);\r\n}\r\n\r\n/**\r\n* Creates a new category\r\n* @param teamId The LnD team Id\r\n* @param category The category details that needs to be created\r\n*/\r\nexport const createCategoryAsync = async (teamId: string, category: ICategory) => {\r\n    let url = `${Constants.apiBaseURL}/category`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId });\r\n\r\n    return await axios.post(url, category, config);\r\n}\r\n\r\n/**\r\n* Updates category details\r\n* @param teamId The LnD team Id\r\n* @param category The category details that needs to be updated\r\n*/\r\nexport const updateCategoryAsync = async (teamId: string, category: ICategory) => {\r\n    let url = `${Constants.apiBaseURL}/category`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId });\r\n\r\n    return await axios.patch(url, category, config);\r\n}\r\n\r\n/**\r\n* Deletes categories\r\n* @param teamId The LnD team Id\r\n* @param categoryIds The comma separated category IDs that needs to be deleted\r\n*/\r\nexport const deleteCategoriesAsync = async (teamId: string, categoryIds: string) => {\r\n    let url = `${Constants.apiBaseURL}/category`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId, categoryIds: categoryIds });\r\n\r\n    return await axios.delete(url, config);\r\n}","// <copyright file=\"list-categories.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Table, Flex, Input, Text, Button, Checkbox, Loader } from \"@fluentui/react-northstar\";\r\nimport { SearchIcon, AddIcon, EditIcon, TrashCanIcon, QuestionCircleIcon, PresenceAvailableIcon } from '@fluentui/react-icons-northstar';\r\nimport { CategoryOperations, ResponseStatus } from \"../../constants/constants\";\r\nimport { ICategory } from \"../../models/ICategory\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport { getCategoriesAsync } from \"../../api/manage-categories-api\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\ninterface IListCategoriesProps extends WithTranslation, IWithContext {\r\n    statusMessage: string,\r\n    onActionPerformed: (categoryOperation: CategoryOperations, operationData?: Array<ICategory>) => void\r\n}\r\n\r\ninterface IListCategoriesState {\r\n    isEditEnabled: boolean\r\n    isDeleteEnabled: boolean,\r\n    isAllCategoriesSelected: boolean,\r\n    categories: Array<ICategory>,\r\n    searchedCategories: Array<ICategory>,\r\n    statusMessage: string,\r\n    isLoading: boolean,\r\n    showStatusIcon: boolean\r\n}\r\n\r\n/** This component lists all event categories */\r\nclass ListCategories extends React.Component<IListCategoriesProps, IListCategoriesState> {\r\n    readonly localize: TFunction;\r\n    searchText: string;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n\r\n        this.searchText = \"\";\r\n\r\n        this.state = {\r\n            isEditEnabled: false,\r\n            isDeleteEnabled: false,\r\n            isAllCategoriesSelected: false,\r\n            categories: [],\r\n            searchedCategories: [],\r\n            statusMessage: this.props.statusMessage,\r\n            isLoading: false,\r\n            showStatusIcon: this.props.statusMessage !== \"\" && this.props.statusMessage.length > 0\r\n        }\r\n    }\r\n\r\n    /** Gets called when component get mounted */\r\n    componentDidMount() {\r\n        this.setState({ isLoading: true });\r\n    }\r\n\r\n    /**\r\n     * Gets teams context from HOC as props\r\n     */\r\n    componentWillReceiveProps(nextProps: IListCategoriesProps) {\r\n        if (this.props.teamsContext !== nextProps.teamsContext) {\r\n            if (nextProps.teamsContext) {\r\n                this.getCategoriesAsync(nextProps.teamsContext.teamId!);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all event categories\r\n     */\r\n    getCategoriesAsync = async (teamId: string) => {\r\n        let response = await getCategoriesAsync(teamId);\r\n\r\n        if (response && response.status === ResponseStatus.OK) {\r\n            let categories: Array<ICategory> = [];\r\n\r\n            response.data?.forEach((category: ICategory) => {\r\n                categories.push(category);\r\n            });\r\n\r\n            this.setState({categories, isLoading: false });\r\n        }\r\n        else {\r\n            this.setState({ isLoading: false, statusMessage: this.localize(\"dataResponseFailedStatus\") });\r\n        }\r\n    }\r\n\r\n    /** Manages 'Edit' and 'Delete' button's enability and manages select all categories checked state */\r\n    manageControlsEnabilityAndSelection() {\r\n        let selectedCategoriesCount = this.state.categories.filter((category: ICategory) => { return category.isSelected })?.length;\r\n        let statusMessage = \"\";\r\n\r\n        let isAllCategoriesSelected = selectedCategoriesCount === this.state.categories.length;\r\n\r\n        if (selectedCategoriesCount === 1) {\r\n            statusMessage = this.localize(\"listCategoriesSelectedStatus\",\r\n                { \"selectedCategoriesCount\": selectedCategoriesCount, \"totalCategoriesCount\": this.state.categories.length });\r\n            this.setState({ isEditEnabled: true, isDeleteEnabled: true, isAllCategoriesSelected, statusMessage, showStatusIcon: false });\r\n        }\r\n        else if (selectedCategoriesCount > 1) {\r\n            statusMessage = this.localize(\"listCategoriesSelectedStatus\",\r\n                { \"selectedCategoriesCount\": selectedCategoriesCount, \"totalCategoriesCount\": this.state.categories.length });\r\n            this.setState({ isEditEnabled: false, isDeleteEnabled: true, isAllCategoriesSelected, statusMessage, showStatusIcon: false });\r\n        }\r\n        else {\r\n            this.setState({ isEditEnabled: false, isDeleteEnabled: false, isAllCategoriesSelected, statusMessage, showStatusIcon: false });\r\n        }\r\n    }\r\n\r\n    getLastCategoryUpdateDateAndTime = (): any => {\r\n        if (this.state.categories?.length > 0) {\r\n            let categories = [...this.state.categories];\r\n\r\n            categories.sort((category1, category2) => {\r\n                if (category1.updatedOn && category2.updatedOn) {\r\n                    return 1;\r\n                }\r\n                else if (!category1.updatedOn && category2.updatedOn) {\r\n                    return 1;\r\n                }\r\n                else if (category1.updatedOn && !category2.updatedOn) {\r\n                    return -1;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n            });\r\n\r\n            this.localize(\"lastUpdatedOnStatus\", { \"lastUpdatedOnStatus\": categories[categories.length - 1].updatedOn?.toUTCString });\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Searches categories based on search text and display search results\r\n     * @param seachText The seach text entered in seach box\r\n     */\r\n    searchCategories = (searchText: string) => {\r\n        let categories: Array<ICategory> = this.state.categories ?? [];\r\n\r\n        if (categories.length > 0 && searchText && searchText.trim() !== \"\") {\r\n            this.searchText = searchText.trim();\r\n\r\n            let searchedCategories = categories.filter((category) => {\r\n                return category.name.toLowerCase().indexOf(this.searchText.toLowerCase()) > -1 ||\r\n                    category.description.toLowerCase().indexOf(this.searchText.toLowerCase()) > -1;\r\n            });\r\n\r\n            this.setState({ searchedCategories });\r\n        }\r\n        else {\r\n            this.searchText = \"\";\r\n            this.setState({ categories, searchedCategories: [] });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler for Add, Edit and Delete category\r\n     * @param categoryOperation The category operation performed\r\n     */\r\n    onActionPerformed = (categoryOperation: CategoryOperations) => {\r\n        if (categoryOperation === CategoryOperations.Edit || categoryOperation === CategoryOperations.Delete) {\r\n            let categoryOperationData = this.state.categories.filter((category: ICategory) => category.isSelected);\r\n            this.props.onActionPerformed(categoryOperation, categoryOperationData);\r\n        }\r\n        else {\r\n            this.props.onActionPerformed(categoryOperation);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when any category checked state changed\r\n     * @param category The selected category details\r\n     */\r\n    onCategoryCheckedChange = (category: ICategory) => {\r\n        category.isSelected = !category.isSelected;\r\n        this.manageControlsEnabilityAndSelection();\r\n    }\r\n\r\n    /** The event handler called when select all categories checked state changed */\r\n    onSelectAllCategoriesCheckedChange = () => {\r\n        if (this.state.categories && this.state.categories.length > 0) {\r\n            var categories = [...this.state.categories];\r\n\r\n            for (let i = 0; i < categories.length; i++) {\r\n                categories[i].isSelected = !this.state.isAllCategoriesSelected;\r\n            }\r\n\r\n            this.setState({ categories }, () => {\r\n                this.manageControlsEnabilityAndSelection();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when seaching categories\r\n     * @param event The input event object\r\n     */\r\n    onSearchTextChanged = (event: any) => {\r\n        this.searchCategories(event.target.value);\r\n    }\r\n\r\n    /** Renders success icon if an category operation executed successfully */\r\n    renderCategoryOperationStatusIcon = () => {\r\n        if (this.state.showStatusIcon) {\r\n            return <PresenceAvailableIcon className=\"success-icon\" />;\r\n        }\r\n    }\r\n\r\n    /** Renders footer */\r\n    renderFooter = () => {\r\n        if (this.state.statusMessage && this.state.statusMessage !== \"\") {\r\n            return (\r\n                <React.Fragment>\r\n                    <Flex gap=\"gap.small\" vAlign=\"center\" hAlign=\"center\">\r\n                        {this.renderCategoryOperationStatusIcon()}\r\n                        <Flex.Item grow>\r\n                            <Text data-testid=\"statusmessage\" content={this.state.statusMessage} weight=\"semibold\" />\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <Flex.Item push>\r\n                        <Text timestamp content={this.getLastCategoryUpdateDateAndTime()} weight=\"semibold\" />\r\n                    </Flex.Item>\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Render categories */\r\n    renderCategories = () => {\r\n        if (this.state.isLoading) {\r\n            return (\r\n                <Flex className=\"task-module-loader\" hAlign=\"center\" vAlign=\"center\" fill>\r\n                    <Loader />\r\n                </Flex>\r\n            );\r\n        }\r\n\r\n        let categories = this.searchText !== \"\" ? this.state.searchedCategories : this.state.categories;\r\n\r\n        if (categories?.length > 0) {\r\n            const categoriesTableHeaderItems = {\r\n                key: \"header\",\r\n                items: [\r\n                    { key: \"select-all-categories\", className: \"category-select-all-column\", content: <Checkbox data-testid=\"list-categories_selectAllCheckbox\" key=\"categoriesTableHeader\" checked={this.state.isAllCategoriesSelected} onChange={this.onSelectAllCategoriesCheckedChange} /> },\r\n                    { key: \"category-name\", className: \"category-name-column\", content: this.localize(\"categoryName\") },\r\n                    { key: \"category-description\", content: this.localize(\"description\") }\r\n                ]\r\n            };\r\n\r\n            let rows = categories.map((category: ICategory, index: number) => {\r\n                return {\r\n                    \"key\": index,\r\n                    \"items\": [\r\n                        {\r\n                            className: \"category-select-all-column\",\r\n                            content: <Checkbox data-testid={\"list-categories_categoryCheckbox\" + index.toString()} key={index} checked={category.isSelected} onChange={() => this.onCategoryCheckedChange(category)} />\r\n                        },\r\n                        {\r\n                            className: \"category-name-column\",\r\n                            content: <Text content={category.name} weight=\"bold\" />,\r\n                            title: category.name,\r\n                            truncateContent: true\r\n                        },\r\n                        {\r\n                            content: category.description,\r\n                            title: category.description,\r\n                            truncateContent: true\r\n                        }\r\n                    ]}\r\n            });\r\n\r\n            return (\r\n                <Table data-testid=\"table\" className=\"manage-categories-content categories-table manage-categories-content-background\"\r\n                    header={categoriesTableHeaderItems}\r\n                    rows={rows}\r\n                />\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <Flex className=\"manage-categories-content\" gap=\"gap.small\">\r\n                    <Flex.Item>\r\n                        <div\r\n                            style={{\r\n                                position: \"relative\",\r\n                            }}\r\n                        >\r\n                            <QuestionCircleIcon outline color=\"green\" />\r\n                        </div>\r\n                    </Flex.Item>\r\n                    <Flex.Item grow={this.props.dir === LanguageDirection.Ltr}>\r\n                        <Flex column gap=\"gap.small\" vAlign=\"stretch\">\r\n                            <div className={this.props.dir === LanguageDirection.Rtl ? \"rtl-direction rtl-right-margin-small\" : \"\"}>\r\n                                <Text weight=\"bold\" content={this.localize(\"categoriesNotAvailableHeader\")} /><br />\r\n                                <Text content={\r\n                                    this.searchText !== \"\" ?\r\n                                    this.localize(\"categoriesNotFoundForSearchedTextDescription\", { searchedText: this.searchText }) :\r\n                                    this.localize(\"categoriesNotAvailableHeaderDescription\")}\r\n                                />\r\n                            </div>\r\n                        </Flex>\r\n                    </Flex.Item>\r\n                </Flex>\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Render search input based on culture direction. */\r\n    renderSearchInput = () => {\r\n            if (this.props.dir === LanguageDirection.Rtl)\r\n            {\r\n                return <div>\r\n                    <Input\r\n                        icon={<SearchIcon />}\r\n                        iconPosition={\"start\"}\r\n                        data-testid=\"searchbar\"\r\n                        placeholder={this.localize(\"searchPlaceholder\")}\r\n                        onChange={this.onSearchTextChanged}\r\n                    />\r\n                </div>\r\n            }\r\n            else if(this.props.dir === LanguageDirection.Ltr)\r\n            {\r\n                return <Input\r\n                    icon={<SearchIcon />}\r\n                    iconPosition={\"end\"}\r\n                    data-testid=\"searchbar\"\r\n                    placeholder={this.localize(\"searchPlaceholder\")}\r\n                    onChange={this.onSearchTextChanged}\r\n                />\r\n            }\r\n    }\r\n\r\n    /** Renders the component */\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"commandbar-wrapper\">\r\n                    <Flex className=\"commandbar-wrapper-container\">\r\n                        <Button text data-testid=\"addbutton\" className=\"list-categories-menu-button\" icon={<AddIcon className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}/>} content={this.localize(\"add\")} onClick={() => this.onActionPerformed(CategoryOperations.Add)} />\r\n                        <Button text data-testid=\"editbutton\" className=\"list-categories-menu-button\" icon={<EditIcon className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}/>} disabled={!this.state.isEditEnabled} content={this.localize(\"edit\")} onClick={() => this.onActionPerformed(CategoryOperations.Edit)} />\r\n                        <Button text data-testid=\"deletebutton\" icon={<TrashCanIcon className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}/>} disabled={!this.state.isDeleteEnabled} content={this.localize(\"delete\")} onClick={() => this.onActionPerformed(CategoryOperations.Delete)} />\r\n                        <Flex.Item push={this.props.dir === LanguageDirection.Ltr} grow={this.props.dir === LanguageDirection.Rtl} className=\"search-input-container\">\r\n                            {this.renderSearchInput()}\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                </div>\r\n                { this.renderCategories() }\r\n                <Flex className=\"manage-categories-footer\" space=\"between\">\r\n                    { this.renderFooter() }\r\n                </Flex>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(ListCategories));","// <copyright file=\"manage-categories-operation-footer.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Button, Flex, Text, ChevronStartIcon, ChevronEndIcon } from \"@fluentui/react-northstar\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\ninterface IManageCategoriesOperationFooter {\r\n    backButtonContent: string,\r\n    submitButtonContent: string,\r\n    isSubmitButtonDisabled: boolean,\r\n    isOperationInProgress: boolean,\r\n    errorMessage: string,\r\n    onBackClicked: () => void,\r\n    onSubmit: () => void,\r\n    dir: LanguageDirection\r\n}\r\n\r\n/**\r\n * The function component which renders footers for Add, Edit and Delete category operation\r\n * @param props The props of type IManageCategoriesOperationFooter\r\n */\r\nexport const ManageCategoriesOperationFooter: React.FunctionComponent<IManageCategoriesOperationFooter> = props => {\r\n    /** Renders error if data operation fails */\r\n    const renderError = () => {\r\n        if (props.errorMessage && props.errorMessage !== \"\") {\r\n            return (\r\n                <Flex.Item push>\r\n                    <Text error content={props.errorMessage} weight=\"semibold\" />\r\n                </Flex.Item>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Flex className=\"manage-categories-footer\" space=\"between\">\r\n            <Button data-testid=\"backbutton\" className=\"back-button\" text icon={props.dir === LanguageDirection.Rtl ? <ChevronEndIcon /> : <ChevronStartIcon />} content={props.backButtonContent} onClick={props.onBackClicked} />\r\n            <Flex gap=\"gap.medium\" vAlign=\"center\" hAlign=\"center\">\r\n                {renderError()}\r\n                <Flex.Item push>\r\n                    <Button\r\n                        primary\r\n                        content={props.submitButtonContent}\r\n                        disabled={props.isSubmitButtonDisabled}\r\n                        loading={props.isOperationInProgress}\r\n                        onClick={props.onSubmit}\r\n                        data-testid=\"manage-categories-operation-footer_button\"\r\n                    />\r\n                </Flex.Item>\r\n            </Flex>\r\n        </Flex>\r\n    );\r\n}","// <copyright file=\"add-update-category.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Input, Text, TextArea } from \"@fluentui/react-northstar\";\r\nimport { ICategory } from \"../../models/ICategory\";\r\nimport Constants, { ResponseStatus } from \"../../constants/constants\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport { TFunction } from \"i18next\";\r\nimport { ManageCategoriesOperationFooter } from \"./manage-categories-operation-footer\";\r\nimport { createCategoryAsync, updateCategoryAsync, getEventCategoriesAsync } from \"../../api/manage-categories-api\";\r\n\r\ninterface IAddCategoryProps extends WithTranslation, IWithContext {\r\n    category?: ICategory\r\n    onBackClicked: () => void,\r\n    onCategoryAddedOrUpdated: (message: string) => void\r\n}\r\n\r\ninterface IAddCategoryState {\r\n    category: ICategory,\r\n    isCreatingOrUpdating: boolean,\r\n    errorMessage: string,\r\n    isCategoryAlreadyExists: boolean\r\n}\r\n\r\n/** This component adds a new event category */\r\nclass AddUpdateCategory extends React.Component<IAddCategoryProps, IAddCategoryState> {\r\n    readonly localize: TFunction;\r\n    teamId: string;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n        this.teamId = \"\";\r\n\r\n        let categoryDetails: ICategory;\r\n\r\n        if (this.props.category) {\r\n            categoryDetails = { ...this.props.category };\r\n        }\r\n        else {\r\n            categoryDetails = {\r\n                categoryId: \"\",\r\n                name: \"\",\r\n                description: \"\",\r\n                isSelected: false,\r\n                isInUse: false,\r\n            };\r\n        }\r\n\r\n        this.state = {\r\n            category: categoryDetails,\r\n            isCreatingOrUpdating: false,\r\n            errorMessage: \"\",\r\n            isCategoryAlreadyExists: false\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets teams context from HOC as props\r\n     */\r\n    componentWillReceiveProps(nextProps: IAddCategoryProps) {\r\n        if (this.props.teamsContext !== nextProps.teamsContext) {\r\n            if (nextProps.teamsContext) {\r\n                this.teamId = nextProps.teamsContext.teamId!;\r\n\r\n                if (this.props.category) {\r\n                    this.setState({ category: { ...this.props.category } });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** The HTTP POST call to add a new category in storage */\r\n    createOrUpdateCategoryAsync = async () => {\r\n        this.setState({ isCreatingOrUpdating: true, errorMessage: \"\" });\r\n\r\n        let isCategoryAlreadyExists: boolean = false;\r\n\r\n        // Checking whether category name already exists-\r\n        // - creating a new category\r\n        // - updating a category after category name changed\r\n        if (!this.props.category || (this.props.category.name !== this.state.category.name.trim())) {\r\n            isCategoryAlreadyExists = await this.checkCategoryExists();\r\n\r\n            if (isCategoryAlreadyExists) {\r\n                this.setState({ isCategoryAlreadyExists: true, isCreatingOrUpdating: false });\r\n                return;\r\n            }\r\n        }\r\n\r\n        let response;\r\n\r\n        if (this.props.category) {\r\n            response = await updateCategoryAsync(this.teamId, this.state.category);\r\n\r\n            if (response.status == ResponseStatus.OK) {\r\n                if (response.data == true) {\r\n                    this.props.onCategoryAddedOrUpdated(this.localize(\"categoryUpdateSuccess\"));\r\n                }\r\n                else {\r\n                    this.setState({ isCreatingOrUpdating: false, errorMessage: this.localize(\"failedToUpdateCategory\") });\r\n                }\r\n            }\r\n            else {\r\n                this.setState({ isCreatingOrUpdating: false, errorMessage: this.localize(\"dataResponseFailedStatus\") });\r\n            }\r\n        }\r\n        else {\r\n            response = await createCategoryAsync(this.teamId, this.state.category);\r\n\r\n            if (response.status == ResponseStatus.OK && response.data === true) {\r\n                this.setState({ isCreatingOrUpdating: false, errorMessage: \"\" });\r\n                this.props.onCategoryAddedOrUpdated(this.localize(\"categoryAddedSuccess\"));\r\n            }\r\n            else {\r\n                this.setState({ isCreatingOrUpdating: false, errorMessage: this.localize(\"dataResponseFailedStatus\") });\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Checks whether a category with the same name already exists */\r\n    checkCategoryExists = async () => {\r\n        if (this.state.category.name?.length) {\r\n            let result = await getEventCategoriesAsync();\r\n\r\n            if (result && result.status === ResponseStatus.OK && result.data) {\r\n                let categories: Array<ICategory> = result.data;\r\n\r\n                if (!categories || categories.length === 0) {\r\n                    return false;\r\n                }\r\n\r\n                let isCategoryAlreadyExists: boolean = categories.some((category: ICategory) => category.name.toLowerCase() === this.state.category.name.trim().toLowerCase());\r\n\r\n                return isCategoryAlreadyExists;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when category name changes\r\n     * @param event The input event object\r\n     */\r\n    onNameChanged = (event: any) => {\r\n        let category = this.state.category;\r\n        category.name = event.target.value;\r\n\r\n        this.setState({ category, isCategoryAlreadyExists: false });\r\n    }\r\n\r\n    /**\r\n     * The event handler called when category description changes\r\n     * @param event The input event object\r\n     */\r\n    onDescriptionChanged = (event: any) => {\r\n        let category = this.state.category;\r\n        category.description = event.target.value;\r\n\r\n        this.setState({ category });\r\n    }\r\n\r\n    /** Renders the error message related to category name */\r\n    renderCategoryNameError = () => {\r\n        if (this.state.isCategoryAlreadyExists) {\r\n            return (\r\n                <Flex.Item push>\r\n                    <Text error content={this.localize(\"categoryAlreadyExistsError\")} weight=\"semibold\" />\r\n                </Flex.Item>\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Renders a component */\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Flex column gap=\"gap.medium\" data-testid=\"addorupdateform\">\r\n                    <Flex column gap=\"gap.smaller\" >\r\n                        <Flex space=\"between\">\r\n                            <Text content={`${this.localize(\"categoryName\")}*`} weight=\"semibold\" />\r\n                            {this.renderCategoryNameError()}\r\n                        </Flex>\r\n                        <Input\r\n                            fluid\r\n                            required={true}\r\n                            placeholder={this.localize(\"enterNamePlaceholder\")}\r\n                            value={this.state.category.name}\r\n                            maxLength={Constants.categoryNameMaxLength}\r\n                            onChange={this.onNameChanged}\r\n                            data-testid=\"categoryname\"\r\n                        />\r\n                    </Flex>\r\n                    <Flex column gap=\"gap.smaller\">\r\n                        <Text content={`${this.localize(\"description\")}*`} weight=\"semibold\" />\r\n                        <TextArea\r\n                            className=\"add-update-category-description\"\r\n                            fluid\r\n                            placeholder={this.localize(\"categoryDescriptionPlaceholder\", { \"categoryDescriptionMaxLength\": Constants.categoryDescriptionMaxLength })}\r\n                            maxLength={Constants.categoryDescriptionMaxLength}\r\n                            value={this.state.category.description}\r\n                            onChange={this.onDescriptionChanged}\r\n                            data-testid=\"categorydescription\"\r\n                        />\r\n                    </Flex>\r\n                    <ManageCategoriesOperationFooter\r\n                        dir={this.props.dir}\r\n                        backButtonContent={this.localize(\"back\")}\r\n                        submitButtonContent={this.props.category ? this.localize(\"save\") : this.localize(\"addCategory\")}\r\n                        isSubmitButtonDisabled={this.state.category.name.trim() === \"\" || this.state.category.description.trim() === \"\" || this.state.isCreatingOrUpdating || this.state.isCategoryAlreadyExists}\r\n                        isOperationInProgress={this.state.isCreatingOrUpdating}\r\n                        errorMessage={this.state.errorMessage}\r\n                        onBackClicked={this.props.onBackClicked}\r\n                        onSubmit={this.createOrUpdateCategoryAsync}\r\n                    />\r\n                </Flex>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(AddUpdateCategory));","// <copyright file=\"delete-category.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Table, Text, ExclamationCircleIcon } from \"@fluentui/react-northstar\";\r\nimport { ICategory } from \"../../models/ICategory\";\r\nimport { ResponseStatus } from \"../../constants/constants\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { ManageCategoriesOperationFooter } from \"./manage-categories-operation-footer\";\r\nimport { deleteCategoriesAsync } from \"../../api/manage-categories-api\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\n\r\ninterface IDeleteCategoryProps extends WithTranslation, IWithContext {\r\n    categories: Array<ICategory>,\r\n    onBackClicked: () => void,\r\n    onCategoryDeleted: (message: string) => void\r\n}\r\n\r\ninterface IDeleteCategoryState {\r\n    isDeleting: boolean,\r\n    errorMessage: string\r\n}\r\n\r\n/** This component manages the Delete category operations */\r\nclass DeleteCategory extends React.Component<IDeleteCategoryProps, IDeleteCategoryState> {\r\n    readonly localize: TFunction = this.props.t;\r\n    teamId: string;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.teamId = \"\";\r\n\r\n        this.state = {\r\n            isDeleting: false,\r\n            errorMessage: \"\"\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets teams context from HOC as props\r\n     */\r\n    componentWillReceiveProps(nextProps: IDeleteCategoryProps) {\r\n        if (this.props.teamsContext !== nextProps.teamsContext) {\r\n            if (nextProps.teamsContext) {\r\n                this.teamId = nextProps.teamsContext.teamId!;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** The HTTP DELETE call to delete selected category/ies */\r\n    deleteCategoryAsync = async () => {\r\n        this.setState({ isDeleting: true, errorMessage: \"\" });\r\n\r\n        let categoryIdsToDelete = this.props.categories.map((category) => {\r\n            return category.categoryId;\r\n        });\r\n\r\n        let response = await deleteCategoriesAsync(this.teamId, categoryIdsToDelete.join(\",\"));\r\n\r\n        if (response.status === ResponseStatus.OK) {\r\n            if (response.data === true) {\r\n                this.props.onCategoryDeleted(this.localize(\"categoryDeleteSuccess\"));\r\n            }\r\n            else {\r\n                this.setState({ isDeleting: false, errorMessage: this.localize(\"failedToDeleteCategory\") });\r\n            }\r\n        }\r\n        else {\r\n            this.setState({ isDeleting: false, errorMessage: this.localize(\"dataResponseFailedStatus\") });\r\n        }\r\n    }\r\n\r\n    /** Renders the categories that needs to be deleted */\r\n    renderCategories = () => {\r\n        if (this.props.categories && this.props.categories.length > 0) {\r\n            const categoriesTableHeaderItems = {\r\n                key: \"header\",\r\n                items: [\r\n                    { key: \"category-name\", className: \"category-name-column\", content: this.localize(\"categoryName\") },\r\n                    { key: \"category-description\", content: this.localize(\"description\") }\r\n                ]\r\n            };\r\n\r\n            let rows = this.props.categories.map((category: ICategory, index: number) => {\r\n                return {\r\n                    \"key\": index,\r\n                    \"items\": [\r\n                        {\r\n                            className: \"category-select-all-column\",\r\n                            content: category.isInUse ? <ExclamationCircleIcon title={this.localize(\"categoryInUse\")} style={{ paddingLeft: \".42rem\" }} /> : \"\"\r\n                        },\r\n                        {\r\n                            className: \"category-name-column\",\r\n                            content: <Text content={category.name} weight=\"bold\" />,\r\n                            title: category.name,\r\n                            truncateContent: true\r\n                        },\r\n                        {\r\n                            content: category.description,\r\n                            title: category.description,\r\n                            truncateContent: true\r\n                        }\r\n                    ]}\r\n            });\r\n\r\n            return (\r\n                <Table\r\n                    className=\"manage-categories-content categories-table manage-categories-content-background\"\r\n                    header={categoriesTableHeaderItems}\r\n                    rows={rows}\r\n                    data-testid=\"deletecategorytable\"\r\n                />\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Renders component */\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Text content={this.localize(\"deleteCategoryConfirmation\")} weight=\"semibold\" />\r\n                {this.renderCategories()}\r\n                <ManageCategoriesOperationFooter\r\n                    dir={this.props.dir}\r\n                    backButtonContent={this.localize(\"back\")}\r\n                    submitButtonContent={this.localize(\"delete\")}\r\n                    isSubmitButtonDisabled={this.state.isDeleting}\r\n                    isOperationInProgress={this.state.isDeleting}\r\n                    errorMessage={this.state.errorMessage}\r\n                    onBackClicked={this.props.onBackClicked}\r\n                    onSubmit={this.deleteCategoryAsync}\r\n                />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(DeleteCategory));","// <copyright file=\"manage-categories.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Provider } from '@fluentui/react-northstar';\r\nimport { Fabric } from '@fluentui/react';\r\nimport ListCategories from \"./list-categories\";\r\nimport { CategoryOperations } from \"../../constants/constants\";\r\nimport AddUpdateCategory from './add-update-category';\r\nimport DeleteCategory from './delete-category';\r\nimport { ICategory } from \"../../models/ICategory\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\n\r\nimport \"./manage-categories.css\";\r\n\r\ninterface IManageCategoriesProps extends WithTranslation, IWithContext {\r\n}\r\n\r\ninterface IManageCategoriesState {\r\n    operation: CategoryOperations,\r\n    operationData: Array<ICategory>,\r\n    operationStatusMessage: string\r\n}\r\n\r\n/** The class which manages manage-categories dialog content */\r\nclass ManageCategories extends React.Component<IManageCategoriesProps, IManageCategoriesState > {\r\n    readonly localize: TFunction;\r\n\r\n    /** Constructor which initializes state */\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n\r\n        this.state = {\r\n            operation: CategoryOperations.Unknown,\r\n            operationData: [],\r\n            operationStatusMessage: \"\"\r\n        };\r\n    }\r\n\r\n    /** Sets operation whether it is Add, Edit or Delete. If 'Back' button pressed from any component,\r\n    in that case the operation will be unknown.*/\r\n    setCategoryOperation = (\r\n        operationStatusMessage: string = \"\",\r\n        categoryOperation: CategoryOperations = CategoryOperations.Unknown,\r\n        operationData: Array<ICategory> = []) => {\r\n        this.setState({ operation: categoryOperation, operationData, operationStatusMessage });\r\n    }\r\n\r\n    /** The event handler called when clicked on 'Back' from any category operation */\r\n    onBackClicked = () => {\r\n        this.setCategoryOperation();\r\n    }\r\n\r\n    /**\r\n     * The event handler called when a category operation successfully executed\r\n     * @param message The success message\r\n     */\r\n    onOperationSuccessful = (message: string) => {\r\n        this.setCategoryOperation(message);\r\n    }\r\n\r\n    /**\r\n     * An event handler gets called when clicked on Add, Edit and Delete category\r\n     * @param categoryOperation The category operation performed\r\n     * @param operationData The data that needs to be populated in selected category operation\r\n     */\r\n    onCategoryActionPerformed = (categoryOperation: CategoryOperations, operationData?: Array<ICategory>) => {\r\n        this.setCategoryOperation(\"\", categoryOperation, operationData);\r\n    }\r\n\r\n    /** Renders component based on Add, Edit or Delete */\r\n    renderOperation = () => {\r\n        switch (this.state.operation) {\r\n            case CategoryOperations.Add:\r\n                return <AddUpdateCategory\r\n                    onBackClicked={this.onBackClicked}\r\n                    onCategoryAddedOrUpdated={this.onOperationSuccessful} />;\r\n\r\n            case CategoryOperations.Edit:\r\n                return <AddUpdateCategory\r\n                    category={this.state.operationData?.[0]}\r\n                    onBackClicked={this.onBackClicked}\r\n                    onCategoryAddedOrUpdated={this.onOperationSuccessful} />;\r\n\r\n            case CategoryOperations.Delete:\r\n                return <DeleteCategory\r\n                    categories={this.state.operationData}\r\n                    onBackClicked={this.onBackClicked}\r\n                    onCategoryDeleted={this.onOperationSuccessful} />\r\n\r\n            default:\r\n                return <ListCategories statusMessage={this.state.operationStatusMessage} onActionPerformed={this.onCategoryActionPerformed} />;\r\n        }\r\n    }\r\n\r\n    /** Renders the component */\r\n    render() {\r\n        return (\r\n            <Fabric dir={this.props.dir}>\r\n                <Provider>\r\n                    <Flex>\r\n                        <div className=\"task-module-container\">\r\n                            {this.renderOperation()}\r\n                        </div>\r\n                    </Flex>\r\n                </Provider>\r\n            </Fabric>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(ManageCategories));","// <copyright file=\"close-cancel-event.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport moment from \"moment\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { ResponseStatus } from \"../../constants/constants\";\r\nimport { EventOperationType } from \"../../models/event-operation-type\";\r\nimport { EventStatus } from \"../../models/event-status\";\r\nimport { getEventAsync } from \"../../api/manage-events-api\";\r\nimport { getUserProfiles } from \"../../api/user-group-api\"\r\nimport { closeEventRegistrationsAsync, cancelEventAsync } from \"../../api/manage-events-api\";\r\nimport EventDetails from \"../event-operation-task-module/event-details\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\n\r\ninterface ICloseCancelEventState {\r\n    isLoading: boolean,\r\n    isOperationInProgress: boolean,\r\n    eventDetails: IEvent | undefined,\r\n    eventCreatedBy: string,\r\n    isErrorGettingEventDetails: boolean,\r\n    isFailedToCloseOrCancelEvent: boolean,\r\n    eventOperationType: EventOperationType\r\n}\r\n\r\ninterface ICloseCancelEventProps extends IWithContext, WithTranslation {\r\n}\r\n\r\nclass CloseCancelEvent extends React.Component<ICloseCancelEventProps, ICloseCancelEventState> {\r\n    readonly localize: TFunction;\r\n    isMobileView: boolean;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.localize = this.props.t;\r\n        this.isMobileView = false;\r\n\r\n        this.state = {\r\n            isLoading: true,\r\n            isOperationInProgress: false,\r\n            eventDetails: undefined,\r\n            eventCreatedBy: \"\",\r\n            isErrorGettingEventDetails: false,\r\n            isFailedToCloseOrCancelEvent: false,\r\n            eventOperationType: EventOperationType.None\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getEventDetailsAsync();\r\n    }\r\n\r\n    /** Gets event details */\r\n    getEventDetailsAsync = async () => {\r\n        let queryParam = new URLSearchParams(window.location.search);\r\n        let operationType = queryParam.get(\"operationType\") ?? \"0\";\r\n        let eventId = queryParam.get(\"eventId\") ?? \"0\";\r\n        let teamId = queryParam.get(\"teamId\") ?? \"0\";\r\n        this.isMobileView = queryParam.get(\"isMobileView\") === \"true\" ? true : false;\r\n\r\n        let response = await getEventAsync(eventId!, teamId!);\r\n\r\n        if (response.status === ResponseStatus.OK && response.data) {\r\n            let eventDetails: IEvent = response.data;\r\n            let eventOperationType: EventOperationType = EventOperationType.None;\r\n\r\n            if (eventDetails.status === EventStatus.Active && new Date() < moment.utc(eventDetails.endDate).local().toDate()) {\r\n                if (operationType === EventOperationType.CloseRegistration.toString()) {\r\n                    if (!eventDetails.isRegistrationClosed) {\r\n                        eventOperationType = EventOperationType.CloseRegistration;\r\n                    }\r\n                }\r\n                else if (operationType === EventOperationType.CancelEvent.toString()) {\r\n                    eventOperationType = EventOperationType.CancelEvent;\r\n                }\r\n            }\r\n\r\n            this.setState({isLoading: false, eventDetails, eventOperationType }, () => {\r\n                if (this.state.eventDetails) {\r\n                    this.getUserProfileAsync(this.state.eventDetails.createdBy);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.setState({ isLoading: false, isErrorGettingEventDetails: true });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get event creator information\r\n     * @param userId The user ID of which information to get\r\n     */\r\n    getUserProfileAsync = async (userId: string) => {\r\n        let user: Array<string> = [userId];\r\n        let response = await getUserProfiles(user);\r\n\r\n        if (response.status === ResponseStatus.OK && response.data) {\r\n            let userInfo = response.data[0];\r\n            this.setState({ eventCreatedBy: userInfo.displayName });\r\n        }\r\n    }\r\n\r\n    /** Called when click on 'Close Registration' or 'Cancel' event */\r\n    onCloseOrCancelEvent = async () => {\r\n        this.setState({ isFailedToCloseOrCancelEvent: false, isOperationInProgress: true });\r\n\r\n        let response;\r\n        let teamId = this.state.eventDetails ? this.state.eventDetails.teamId : \"0\";\r\n        let eventId = this.state.eventDetails ? this.state.eventDetails.eventId : \"0\";\r\n\r\n\r\n        switch (this.state.eventOperationType) {\r\n            case EventOperationType.CloseRegistration:\r\n                response = await closeEventRegistrationsAsync(teamId, eventId);\r\n                break;\r\n\r\n            case EventOperationType.CancelEvent:\r\n                response = await cancelEventAsync(teamId, eventId);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data === true) {\r\n            this.props.microsoftTeams.tasks.submitTask({ isSuccess: true });\r\n        }\r\n        else {\r\n            this.setState({ isFailedToCloseOrCancelEvent: true, isOperationInProgress: false });\r\n        }\r\n    }\r\n\r\n    /** Renders component */\r\n    render() {\r\n        return (\r\n            <EventDetails\r\n                dir={this.props.dir}\r\n                eventDetails={this.state.eventDetails}\r\n                eventCreatedByName={this.state.eventCreatedBy}\r\n                eventOperationType={this.state.eventOperationType}\r\n                isLoadingEventDetails={this.state.isLoading}\r\n                isFailedToGetEventDetails={this.state.isErrorGettingEventDetails}\r\n                isOperationInProgress={this.state.isOperationInProgress}\r\n                isOperationFailed={this.state.isFailedToCloseOrCancelEvent}\r\n                isMobileView={this.isMobileView}\r\n                onPerformOperation={this.onCloseOrCancelEvent}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(CloseCancelEvent));","// <copyright file=\"delete-draft.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { Flex, Text, Button, Provider } from \"@fluentui/react-northstar\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { deleteDraftEventAsync } from \"../../api/manage-events-api\";\r\nimport { ResponseStatus } from \"../../constants/constants\";\r\n\r\n/** Renders component to delete draft event */\r\nconst DeleteDraftEvent: React.FunctionComponent = props => {\r\n    const localize: TFunction = useTranslation().t;\r\n    const search = window.location.search;\r\n    const params = new URLSearchParams(search);\r\n    const eventId = params.get(\"eventId\")!;\r\n    const teamId = params.get(\"teamId\")!;\r\n    let [isUpdatingStatus, setUpdatingEventStatus] = React.useState(false);\r\n    let [errorGettingEventDetails, setEventDetailsError] = React.useState(false);\r\n    let [errorUpdatingEventStatus, setUpdateStatusError] = React.useState(false);\r\n\r\n    /** Delete draft event */\r\n    const deleteDraftEvent = async () => {\r\n        setUpdateStatusError(false);\r\n        setUpdatingEventStatus(true);\r\n\r\n        let response = await deleteDraftEventAsync(teamId!, eventId!);\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data === true) {\r\n            setUpdatingEventStatus(false);\r\n            microsoftTeams.tasks.submitTask({ isSuccess: true });\r\n        }\r\n        else {\r\n            setUpdatingEventStatus(false);\r\n            setUpdateStatusError(true);\r\n        }\r\n    }\r\n\r\n    /** Renders component */\r\n    const renderEventDetails = () => {\r\n        if (errorGettingEventDetails) {\r\n            return <Text error content={localize(\"dataResponseFailedStatus\")} weight=\"semibold\" />\r\n        }\r\n\r\n        return (\r\n            <Provider>\r\n                <Flex>\r\n                    <div className=\"task-module-container close-cancel-event-container\">\r\n                        <div className=\"close-cancel-event\">\r\n                            <Text weight=\"bold\" content={localize(\"deleteConfirmationText\")} />\r\n                        </div>\r\n                        <Flex styles={{ marginRight: \"3.4rem\", marginLeft: \"3.4rem\", margintop: \"2rem\", position:\"absolute\", bottom:\"3.4rem\" }} vAlign=\"center\">\r\n                            {errorUpdatingEventStatus ? <Text error content={localize(\"dataResponseFailedStatus\")} weight=\"semibold\" /> : null}\r\n                            <Flex.Item push>\r\n                                <Button\r\n                                    primary\r\n                                    loading={isUpdatingStatus}\r\n                                    disabled={isUpdatingStatus}\r\n                                    content={localize(\"delete\")}\r\n                                    onClick={deleteDraftEvent}\r\n                                />\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                    </div>\r\n                </Flex>\r\n            </Provider>\r\n        );\r\n    }\r\n\r\n    return renderEventDetails();\r\n}\r\n\r\nexport default DeleteDraftEvent;","// <copyright file=\"signin.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { Text, Button } from \"@fluentui/react-northstar\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport \"../../styles/signin.css\";\r\n\r\nconst SignInPage: React.FunctionComponent<RouteComponentProps> = props => {\r\n    const localize = useTranslation().t;\r\n\r\n    function onSignIn() {\r\n        microsoftTeams.initialize();\r\n        microsoftTeams.authentication.authenticate({\r\n            url: window.location.origin + \"/signin-simple-start\",\r\n            successCallback: () => {\r\n                console.log(\"Login succeeded!\");\r\n                window.location.href = \"/discover\";\r\n            },\r\n            failureCallback: (reason) => {\r\n                console.log(\"Login failed: \" + reason);\r\n                window.location.href = \"/errorpage\";\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"sign-in-content-container\">\r\n            <div>\r\n            </div>\r\n            <Text\r\n                content={localize('signInMessage')}\r\n                size=\"medium\"\r\n            />\r\n            <div className=\"space\"></div>\r\n            <Button content={localize(\"signInText\")} primary className=\"sign-in-button\" onClick={onSignIn} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignInPage;\r\n","// <copyright file=\"authentication-metadata-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\nimport { AxiosRequestConfig } from \"axios\";\r\nimport Constants from \"../constants/constants\";\r\nimport { getAPIRequestConfigParams } from \"../helpers/api-helper\";\r\n\r\n/**\r\n* Get authentication metadata from API\r\n* @param  {String} windowLocationOriginDomain Application base URL\r\n* @param  {String} login_hint Login hint for SSO\r\n*/\r\nexport const getAuthenticationConsentMetadata = async (windowLocationOriginDomain: string, login_hint: string): Promise<any> => {\r\n    let url = `${Constants.apiBaseURL}/authenticationMetadata/consentUrl`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({\r\n        windowLocationOriginDomain: windowLocationOriginDomain,\r\n        loginhint: login_hint\r\n    });\r\n\r\n    return await axios.get(url, config, false);\r\n}","// <copyright file=\"signin-start.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { getAuthenticationConsentMetadata } from '../../api/authentication-metadata-api';\r\n\r\nconst SignInSimpleStart: React.FunctionComponent = () => {\r\n    useEffect(() => {\r\n        microsoftTeams.initialize();\r\n        microsoftTeams.getContext((context: microsoftTeams.Context) => {\r\n            const windowLocationOriginDomain = window.location.origin.replace(\"https://\", \"\");\r\n            const login_hint = context.upn ? context.upn : \"\";\r\n\r\n            getAuthenticationConsentMetadata(windowLocationOriginDomain, login_hint).then((result: any) => {\r\n                window.location.assign(result.data);\r\n            });\r\n        });\r\n    });\r\n\r\n    return (\r\n        <></>\r\n    );\r\n};\r\n\r\nexport default SignInSimpleStart;","// <copyright file=\"signin-end.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\n\r\nconst SignInSimpleEnd: React.FunctionComponent = () => {\r\n    // Parse hash parameters into key-value pairs\r\n    function getHashParameters() {\r\n        const hashParams: any = {};\r\n        window.location.hash.substr(1).split(\"&\").forEach(function (item) {\r\n            let s = item.split(\"=\"),\r\n                k = s[0],\r\n                v = s[1] && decodeURIComponent(s[1]);\r\n            hashParams[k] = v;\r\n        });\r\n        return hashParams;\r\n    }\r\n\r\n    useEffect(() => {\r\n        microsoftTeams.initialize();\r\n        const hashParams: any = getHashParameters();\r\n        if (hashParams[\"error\"]) {\r\n            // Authentication/authorization failed\r\n            microsoftTeams.authentication.notifyFailure(hashParams[\"error\"]);\r\n        } else if (hashParams[\"id_token\"]) {\r\n            // Success\r\n            microsoftTeams.authentication.notifySuccess();\r\n            window.location.href = \"/\";\r\n        } else {\r\n            // Unexpected condition: hash does not contain error or access_token parameter\r\n            microsoftTeams.authentication.notifyFailure(\"UnexpectedFailure\");\r\n        }\r\n    });\r\n\r\n    return (\r\n        <></>\r\n    );\r\n};\r\n\r\nexport default SignInSimpleEnd;","/*\r\n    <copyright file=\"router.tsx\" company=\"Microsoft\">\r\n    Copyright (c) Microsoft. All rights reserved.\r\n    </copyright>\r\n*/\r\n\r\nimport * as React from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport ErrorPage from '../components/error-page';\r\nimport \"../i18n\";\r\nimport RegisterRemoveEvent from \"../components/register-remove-event/register-remove-event\";\r\nimport DiscoverEvents from \"../components/discover-events/discover-events\";\r\nimport MyEvents from \"../components/my-events/my-events\";\r\nimport MobileFilter from \"../components/mobile-filter-bar/mobile-filter-bar\";\r\nimport ManageEvents from \"../components/manage-events/manage-events\";\r\nimport CreateEventWrapper from \"../components/create-event/create-event-wrapper\";\r\nimport ManageCategories from \"../components/manage-categories/manage-categories\";\r\nimport CloseOrCancelEvent from \"../components/manage-events/close-cancel-event\";\r\nimport DeleteDraftEvent from \"../components/manage-events/delete-draft\";\r\nimport SignInPage from \"../components/signin/signin\";\r\nimport SignInSimpleStart from \"../components/signin/signin-start\";\r\nimport SignInSimpleEnd from \"../components/signin/signin-end\";\r\n\r\nexport const AppRoute: React.FunctionComponent<{}> = () => {\r\n    return (\r\n        <React.Suspense fallback={<div className=\"container-div\"><div className=\"container-subdiv\"></div></div>}>\r\n            <BrowserRouter>\r\n                <Switch>\r\n                    <Route exact path=\"/discover-events\" component={DiscoverEvents} />\r\n                    <Route exact path=\"/my-events\" component={MyEvents} />\r\n                    <Route exact path=\"/manage-events\" component={ManageEvents} />\r\n                    <Route exact path=\"/manage-categories\" component={ManageCategories} />\r\n                    <Route exact path=\"/close-or-cancel-event\" component={CloseOrCancelEvent} />\r\n                    <Route exact path=\"/register-remove\" component={RegisterRemoveEvent} />\r\n                    <Route exact path=\"/create-event\" component={CreateEventWrapper} />\r\n                    <Route exact path=\"/delete-draft\" component={DeleteDraftEvent} />\r\n                    <Route exact path=\"/mobile-filter\" component={MobileFilter} />\r\n                    <Route exact path=\"/signin\" component={SignInPage} />\r\n                    <Route exact path=\"/signin-simple-start\" component={SignInSimpleStart} />\r\n                    <Route exact path=\"/signin-simple-end\" component={SignInSimpleEnd} />\r\n                    <Route exact path=\"/error\" component={ErrorPage} />\r\n                </Switch>\r\n            </BrowserRouter>\r\n        </React.Suspense>\r\n    );\r\n};","// <copyright file=\"app.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\nimport * as React from \"react\";\r\nimport { AppRoute } from \"./router/router\";\r\nimport Resources from \"./constants/constants\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { Provider, ThemeInput, themes } from \"@fluentui/react-northstar\";\r\nimport { initializeIcons } from \"@uifabric/icons\";\r\nimport \"./styles/style.css\";\r\n\r\nexport interface IAppState {\r\n    theme: string;\r\n}\r\n\r\nexport default class App extends React.Component<{}, IAppState> {\r\n    theme?: string | null = null;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        let search = window.location.search;\r\n        let params = new URLSearchParams(search);\r\n        this.theme = params.get(\"theme\");\r\n        initializeIcons();\r\n\r\n        this.state = {\r\n            theme: this.theme ? this.theme : Resources.default,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        microsoftTeams.initialize();\r\n        microsoftTeams.getContext((context: microsoftTeams.Context) => {\r\n            this.setState({ theme: context.theme! });\r\n        });\r\n        microsoftTeams.registerOnThemeChangeHandler((theme: string) => {\r\n            this.setState({ theme: theme! }, () => {\r\n                this.forceUpdate();\r\n            });\r\n        });\r\n    }\r\n\r\n    setThemeComponent = () => {\r\n        if (this.state.theme === Resources.dark) {\r\n            return this.getAppDOM(themes.teamsDark, \"dark-container\");;\r\n        }\r\n        else if (this.state.theme === Resources.contrast) {\r\n            return this.getAppDOM(themes.teamsHighContrast, \"high-contrast-container\");\r\n        } else {\r\n            return this.getAppDOM(themes.teams, \"default-container\");\r\n        }\r\n    }\r\n\r\n    getAppDOM = (theme: ThemeInput | undefined, className: string) => {\r\n        return (\r\n            <Provider theme={theme}>\r\n                <div className={className}>\r\n                    <div className=\"appContainer\">\r\n                        <AppRoute />\r\n                    </div>\r\n                </div>\r\n            </Provider>\r\n        );\r\n    }\r\n\r\n    /**\r\n    * Renders the component\r\n    */\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div>\r\n                {this.setThemeComponent()}\r\n            </div>\r\n        );\r\n    }\r\n}","/*\r\n    <copyright file=\"index.tsx\" company=\"Microsoft\">\r\n    Copyright (c) Microsoft. All rights reserved.\r\n    </copyright>\r\n*/\r\n\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport App from \"./app\";\r\n\r\nReactDOM.render(\r\n\t    <Router>\r\n\t\t    <App />\r\n        </Router>, document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}